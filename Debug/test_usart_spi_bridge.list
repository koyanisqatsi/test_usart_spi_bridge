
test_usart_spi_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800daa0  0800daa0  0000eaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db54  0800db54  0000eb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db5c  0800db5c  0000eb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800db60  0800db60  0000eb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800db64  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000214d4  24000064  0800dbc8  0000f064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24021538  0800dbc8  0000f538  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002481b  00000000  00000000  0000f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004209  00000000  00000000  000338ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b28  00000000  00000000  00037ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001527  00000000  00000000  000395e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000364a5  00000000  00000000  0003ab07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022f2d  00000000  00000000  00070fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015efdc  00000000  00000000  00093ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f2eb5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076e0  00000000  00000000  001f2ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001fa5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800da88 	.word	0x0800da88

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800da88 	.word	0x0800da88

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <bridge_enable>:
void SpiTxRxTask(void *argument);
void UsartTxRxTask(void *argument);

static void rxdBufferProcessing(const uint8_t *input, size_t buffer_length, QueueHandle_t *output);

void bridge_enable(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
	if (NULL == (spi_buffer_notification = xQueueCreate(1U, sizeof(uint8_t)))) {
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	2001      	movs	r0, #1
 800060c:	f00a fd27 	bl	800b05e <xQueueGenericCreate>
 8000610:	4603      	mov	r3, r0
 8000612:	4a2a      	ldr	r2, [pc, #168]	@ (80006bc <bridge_enable+0xbc>)
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <bridge_enable+0xbc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <bridge_enable+0x22>
		Error_Handler();
 800061e:	f000 fcaf 	bl	8000f80 <Error_Handler>
	}

	if (NULL == (usart_buffer_notification = xQueueCreate(1U, sizeof(uint8_t)))) {
 8000622:	2200      	movs	r2, #0
 8000624:	2101      	movs	r1, #1
 8000626:	2001      	movs	r0, #1
 8000628:	f00a fd19 	bl	800b05e <xQueueGenericCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a24      	ldr	r2, [pc, #144]	@ (80006c0 <bridge_enable+0xc0>)
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <bridge_enable+0xc0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <bridge_enable+0x3e>
		Error_Handler();
 800063a:	f000 fca1 	bl	8000f80 <Error_Handler>
	}

	if (NULL == (spi_to_usart_queue = xQueueCreate(TX_BYTE_BUFFER_NUMBER, TX_BYTE_BUFFER_LENGTH))) {
 800063e:	2200      	movs	r2, #0
 8000640:	2110      	movs	r1, #16
 8000642:	2010      	movs	r0, #16
 8000644:	f00a fd0b 	bl	800b05e <xQueueGenericCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a1e      	ldr	r2, [pc, #120]	@ (80006c4 <bridge_enable+0xc4>)
 800064c:	6013      	str	r3, [r2, #0]
 800064e:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <bridge_enable+0xc4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <bridge_enable+0x5a>
		Error_Handler();
 8000656:	f000 fc93 	bl	8000f80 <Error_Handler>
	}

	if (NULL == (usart_to_spi_queue = xQueueCreate(TX_BYTE_BUFFER_NUMBER, TX_BYTE_BUFFER_LENGTH))) {
 800065a:	2200      	movs	r2, #0
 800065c:	2110      	movs	r1, #16
 800065e:	2010      	movs	r0, #16
 8000660:	f00a fcfd 	bl	800b05e <xQueueGenericCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	4a18      	ldr	r2, [pc, #96]	@ (80006c8 <bridge_enable+0xc8>)
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <bridge_enable+0xc8>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <bridge_enable+0x76>
		Error_Handler();
 8000672:	f000 fc85 	bl	8000f80 <Error_Handler>
	}

	if (pdPASS != xTaskCreate(SpiTxRxTask, "SPI Tx and Rx task", 256UL,
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <bridge_enable+0xcc>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2317      	movs	r3, #23
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000684:	4912      	ldr	r1, [pc, #72]	@ (80006d0 <bridge_enable+0xd0>)
 8000686:	4813      	ldr	r0, [pc, #76]	@ (80006d4 <bridge_enable+0xd4>)
 8000688:	f00b fa9e 	bl	800bbc8 <xTaskCreate>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d001      	beq.n	8000696 <bridge_enable+0x96>
							  NULL, 23, &SpiTxRxTaskHandle)) {
		Error_Handler();
 8000692:	f000 fc75 	bl	8000f80 <Error_Handler>
	}

	if (pdPASS != xTaskCreate(UsartTxRxTask, "USART Tx and Rx task", 256UL,
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <bridge_enable+0xd8>)
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2317      	movs	r3, #23
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <bridge_enable+0xdc>)
 80006a6:	480e      	ldr	r0, [pc, #56]	@ (80006e0 <bridge_enable+0xe0>)
 80006a8:	f00b fa8e 	bl	800bbc8 <xTaskCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d001      	beq.n	80006b6 <bridge_enable+0xb6>
							  NULL, 23, &UsartTxRxTaskHandle)) {
		Error_Handler();
 80006b2:	f000 fc65 	bl	8000f80 <Error_Handler>
	}
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	24000088 	.word	0x24000088
 80006c0:	2400008c 	.word	0x2400008c
 80006c4:	24000090 	.word	0x24000090
 80006c8:	24000094 	.word	0x24000094
 80006cc:	24000080 	.word	0x24000080
 80006d0:	0800daa0 	.word	0x0800daa0
 80006d4:	080006e5 	.word	0x080006e5
 80006d8:	24000084 	.word	0x24000084
 80006dc:	0800dab4 	.word	0x0800dab4
 80006e0:	080007cd 	.word	0x080007cd

080006e4 <SpiTxRxTask>:

void SpiTxRxTask(void *argument) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	(void)argument;
	uint8_t ready_buffer = 0U;
 80006ec:	2300      	movs	r3, #0
 80006ee:	77fb      	strb	r3, [r7, #31]

	// Набор очередей, чтобы можно было разблокировать задачу по нескольким источникам.
	QueueSetHandle_t notification;
	QueueSetMemberHandle_t activated;

	if (NULL == (notification = xQueueCreateSet(TX_BYTE_BUFFER_NUMBER + 1U))) {
 80006f0:	2011      	movs	r0, #17
 80006f2:	f00b f96b 	bl	800b9cc <xQueueCreateSet>
 80006f6:	6278      	str	r0, [r7, #36]	@ 0x24
 80006f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <SpiTxRxTask+0x1e>
		Error_Handler();
 80006fe:	f000 fc3f 	bl	8000f80 <Error_Handler>
	}

	// Добавление в набор очереди уведомлений о состоянии принимающего буффера.
	xQueueAddToSet(spi_buffer_notification, notification);
 8000702:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <SpiTxRxTask+0xcc>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000708:	4618      	mov	r0, r3
 800070a:	f00b f96e 	bl	800b9ea <xQueueAddToSet>
	// Добавление в набор очереди с данными полученными от USART.
	xQueueAddToSet(usart_to_spi_queue, notification);
 800070e:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <SpiTxRxTask+0xd0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000714:	4618      	mov	r0, r3
 8000716:	f00b f968 	bl	800b9ea <xQueueAddToSet>
	// DMA настроен как Circular, поэтому его можно запустить один раз и всё.
	if (HAL_OK != HAL_SPI_Receive_DMA(&hspi1, spi_rx_buffer, SPI_RX_BUFFER_LENGTH)) {
 800071a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800071e:	4926      	ldr	r1, [pc, #152]	@ (80007b8 <SpiTxRxTask+0xd4>)
 8000720:	4826      	ldr	r0, [pc, #152]	@ (80007bc <SpiTxRxTask+0xd8>)
 8000722:	f007 f8f9 	bl	8007918 <HAL_SPI_Receive_DMA>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SpiTxRxTask+0x4c>
		Error_Handler();
 800072c:	f000 fc28 	bl	8000f80 <Error_Handler>
	}

	for (;;) {
		// Ждем пока что-нибудь не произойдет.
		activated = xQueueSelectFromSet(notification, osWaitForever);
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000736:	f00b f979 	bl	800ba2c <xQueueSelectFromSet>
 800073a:	6238      	str	r0, [r7, #32]
		// Если прилетело уведомление о состоянии буффера приёма, то надо обработать данные и отправить их в USART.
		if (activated == spi_buffer_notification) {
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <SpiTxRxTask+0xcc>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a3a      	ldr	r2, [r7, #32]
 8000742:	429a      	cmp	r2, r3
 8000744:	d117      	bne.n	8000776 <SpiTxRxTask+0x92>
			xQueueReceive(spi_buffer_notification, (void *)&ready_buffer, 10UL);
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <SpiTxRxTask+0xcc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f107 011f 	add.w	r1, r7, #31
 800074e:	220a      	movs	r2, #10
 8000750:	4618      	mov	r0, r3
 8000752:	f00a feb9 	bl	800b4c8 <xQueueReceive>

			if (ready_buffer == 0U) {
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d105      	bne.n	8000768 <SpiTxRxTask+0x84>
				rxdBufferProcessing(spi_rx_buffer, SPI_RX_BUFFER_HALF_LENGTH, &spi_to_usart_queue);
 800075c:	4a18      	ldr	r2, [pc, #96]	@ (80007c0 <SpiTxRxTask+0xdc>)
 800075e:	2180      	movs	r1, #128	@ 0x80
 8000760:	4815      	ldr	r0, [pc, #84]	@ (80007b8 <SpiTxRxTask+0xd4>)
 8000762:	f000 f98d 	bl	8000a80 <rxdBufferProcessing>
 8000766:	e7e3      	b.n	8000730 <SpiTxRxTask+0x4c>
			} else {
				rxdBufferProcessing((spi_rx_buffer + SPI_RX_BUFFER_HALF_LENGTH), SPI_RX_BUFFER_HALF_LENGTH, &spi_to_usart_queue);
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <SpiTxRxTask+0xe0>)
 800076a:	4a15      	ldr	r2, [pc, #84]	@ (80007c0 <SpiTxRxTask+0xdc>)
 800076c:	2180      	movs	r1, #128	@ 0x80
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f986 	bl	8000a80 <rxdBufferProcessing>
 8000774:	e7dc      	b.n	8000730 <SpiTxRxTask+0x4c>
			}
		// Если USART что-то прислал, то надо это  отправить.
		} else if (activated == usart_to_spi_queue) {
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <SpiTxRxTask+0xd0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6a3a      	ldr	r2, [r7, #32]
 800077c:	429a      	cmp	r2, r3
 800077e:	d1d7      	bne.n	8000730 <SpiTxRxTask+0x4c>
			if (0U == spi_tx_ready) {
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <SpiTxRxTask+0xe4>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1d2      	bne.n	8000730 <SpiTxRxTask+0x4c>
				xQueueReceive(usart_to_spi_queue, txbuffer, 10UL);
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <SpiTxRxTask+0xd0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f107 010c 	add.w	r1, r7, #12
 8000792:	220a      	movs	r2, #10
 8000794:	4618      	mov	r0, r3
 8000796:	f00a fe97 	bl	800b4c8 <xQueueReceive>
				spi_tx_ready = 1U;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <SpiTxRxTask+0xe4>)
 800079c:	2201      	movs	r2, #1
 800079e:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, txbuffer, TX_BYTE_BUFFER_LENGTH);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2210      	movs	r2, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <SpiTxRxTask+0xd8>)
 80007aa:	f006 ff73 	bl	8007694 <HAL_SPI_Transmit_DMA>
		activated = xQueueSelectFromSet(notification, osWaitForever);
 80007ae:	e7bf      	b.n	8000730 <SpiTxRxTask+0x4c>
 80007b0:	24000088 	.word	0x24000088
 80007b4:	24000094 	.word	0x24000094
 80007b8:	2400009c 	.word	0x2400009c
 80007bc:	2400029c 	.word	0x2400029c
 80007c0:	24000090 	.word	0x24000090
 80007c4:	2400011c 	.word	0x2400011c
 80007c8:	24000098 	.word	0x24000098

080007cc <UsartTxRxTask>:
		}
	}
}

// Здесь всё также как и в SpiTxRxTask, но в другую сторону.
void UsartTxRxTask(void *argument) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	(void)argument;

	uint8_t ready_buffer = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	77fb      	strb	r3, [r7, #31]
	uint8_t txbuffer[TX_BYTE_BUFFER_LENGTH];

	QueueSetHandle_t notification;
	QueueSetMemberHandle_t activated;

	if (NULL == (notification = xQueueCreateSet(TX_BYTE_BUFFER_NUMBER + 1U))) {
 80007d8:	2011      	movs	r0, #17
 80007da:	f00b f8f7 	bl	800b9cc <xQueueCreateSet>
 80007de:	6278      	str	r0, [r7, #36]	@ 0x24
 80007e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <UsartTxRxTask+0x1e>
		Error_Handler();
 80007e6:	f000 fbcb 	bl	8000f80 <Error_Handler>
	}

	xQueueAddToSet(usart_buffer_notification, notification);
 80007ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <UsartTxRxTask+0xcc>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f00b f8fa 	bl	800b9ea <xQueueAddToSet>
	xQueueAddToSet(spi_to_usart_queue, notification);
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <UsartTxRxTask+0xd0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007fc:	4618      	mov	r0, r3
 80007fe:	f00b f8f4 	bl	800b9ea <xQueueAddToSet>

	if (HAL_OK != HAL_UART_Receive_DMA(&huart1, usart_rx_buffer, USART_RX_BUFFER_LENGTH)) {
 8000802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000806:	4926      	ldr	r1, [pc, #152]	@ (80008a0 <UsartTxRxTask+0xd4>)
 8000808:	4826      	ldr	r0, [pc, #152]	@ (80008a4 <UsartTxRxTask+0xd8>)
 800080a:	f008 f8d5 	bl	80089b8 <HAL_UART_Receive_DMA>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <UsartTxRxTask+0x4c>
		Error_Handler();
 8000814:	f000 fbb4 	bl	8000f80 <Error_Handler>
	}

	for (;;) {
		activated = xQueueSelectFromSet(notification, osWaitForever);
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800081e:	f00b f905 	bl	800ba2c <xQueueSelectFromSet>
 8000822:	6238      	str	r0, [r7, #32]

		if (activated == spi_buffer_notification) {
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <UsartTxRxTask+0xdc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6a3a      	ldr	r2, [r7, #32]
 800082a:	429a      	cmp	r2, r3
 800082c:	d117      	bne.n	800085e <UsartTxRxTask+0x92>
			xQueueReceive(usart_buffer_notification, (void *)&ready_buffer, 10UL);
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <UsartTxRxTask+0xcc>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f107 011f 	add.w	r1, r7, #31
 8000836:	220a      	movs	r2, #10
 8000838:	4618      	mov	r0, r3
 800083a:	f00a fe45 	bl	800b4c8 <xQueueReceive>

			if (ready_buffer == 0U) {
 800083e:	7ffb      	ldrb	r3, [r7, #31]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d105      	bne.n	8000850 <UsartTxRxTask+0x84>
				rxdBufferProcessing(usart_rx_buffer, USART_RX_BUFFER_HALF_LENGTH, &usart_to_spi_queue);
 8000844:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <UsartTxRxTask+0xe0>)
 8000846:	2180      	movs	r1, #128	@ 0x80
 8000848:	4815      	ldr	r0, [pc, #84]	@ (80008a0 <UsartTxRxTask+0xd4>)
 800084a:	f000 f919 	bl	8000a80 <rxdBufferProcessing>
 800084e:	e7e3      	b.n	8000818 <UsartTxRxTask+0x4c>
			} else {
				rxdBufferProcessing((usart_rx_buffer + USART_RX_BUFFER_HALF_LENGTH), USART_RX_BUFFER_HALF_LENGTH, &usart_to_spi_queue);
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <UsartTxRxTask+0xe4>)
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <UsartTxRxTask+0xe0>)
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f912 	bl	8000a80 <rxdBufferProcessing>
 800085c:	e7dc      	b.n	8000818 <UsartTxRxTask+0x4c>
			}
		} else if (activated == spi_to_usart_queue) {
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <UsartTxRxTask+0xd0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6a3a      	ldr	r2, [r7, #32]
 8000864:	429a      	cmp	r2, r3
 8000866:	d1d7      	bne.n	8000818 <UsartTxRxTask+0x4c>
			if (0U == usart_tx_ready) {
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <UsartTxRxTask+0xe8>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1d2      	bne.n	8000818 <UsartTxRxTask+0x4c>
				xQueueReceive(spi_to_usart_queue, txbuffer, 10UL);
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <UsartTxRxTask+0xd0>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f107 010c 	add.w	r1, r7, #12
 800087a:	220a      	movs	r2, #10
 800087c:	4618      	mov	r0, r3
 800087e:	f00a fe23 	bl	800b4c8 <xQueueReceive>
				usart_tx_ready = 1U;
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <UsartTxRxTask+0xe8>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart1, txbuffer, TX_BYTE_BUFFER_LENGTH);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2210      	movs	r2, #16
 800088e:	4619      	mov	r1, r3
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <UsartTxRxTask+0xd8>)
 8000892:	f008 f811 	bl	80088b8 <HAL_UART_Transmit_DMA>
		activated = xQueueSelectFromSet(notification, osWaitForever);
 8000896:	e7bf      	b.n	8000818 <UsartTxRxTask+0x4c>
 8000898:	2400008c 	.word	0x2400008c
 800089c:	24000090 	.word	0x24000090
 80008a0:	2400019c 	.word	0x2400019c
 80008a4:	24000414 	.word	0x24000414
 80008a8:	24000088 	.word	0x24000088
 80008ac:	24000094 	.word	0x24000094
 80008b0:	2400021c 	.word	0x2400021c
 80008b4:	24000099 	.word	0x24000099

080008b8 <HAL_SPI_TxCpltCallback>:
	}
}

// Коллбеки, вызываемые при приёме или передачи данных.

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if (SPI1 == hspi->Instance) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <HAL_SPI_TxCpltCallback+0x24>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d102      	bne.n	80008d0 <HAL_SPI_TxCpltCallback+0x18>
		spi_tx_ready = 0U;
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <HAL_SPI_TxCpltCallback+0x28>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
	}
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40013000 	.word	0x40013000
 80008e0:	24000098 	.word	0x24000098

080008e4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
	uint8_t notify = 1U;
 80008f0:	2301      	movs	r3, #1
 80008f2:	72fb      	strb	r3, [r7, #11]

	if (SPI1 == hspi->Instance) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_SPI_RxCpltCallback+0x50>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d108      	bne.n	8000910 <HAL_SPI_RxCpltCallback+0x2c>
		xQueueSendFromISR(spi_buffer_notification, (void *)&notify, &xHigherPriorityTaskWoken);
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_SPI_RxCpltCallback+0x54>)
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	f107 020c 	add.w	r2, r7, #12
 8000906:	f107 010b 	add.w	r1, r7, #11
 800090a:	2300      	movs	r3, #0
 800090c:	f00a fd26 	bl	800b35c <xQueueGenericSendFromISR>
	}

	if (xHigherPriorityTaskWoken) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00a      	beq.n	800092c <HAL_SPI_RxCpltCallback+0x48>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d007      	beq.n	800092c <HAL_SPI_RxCpltCallback+0x48>
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <HAL_SPI_RxCpltCallback+0x58>)
 800091e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	f3bf 8f4f 	dsb	sy
 8000928:	f3bf 8f6f 	isb	sy
	}
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40013000 	.word	0x40013000
 8000938:	24000088 	.word	0x24000088
 800093c:	e000ed04 	.word	0xe000ed04

08000940 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
	uint8_t notify = 0U;
 800094c:	2300      	movs	r3, #0
 800094e:	72fb      	strb	r3, [r7, #11]

	if (SPI1 == hspi->Instance) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <HAL_SPI_RxHalfCpltCallback+0x50>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d108      	bne.n	800096c <HAL_SPI_RxHalfCpltCallback+0x2c>
		xQueueSendFromISR(spi_buffer_notification, (void *)&notify, &xHigherPriorityTaskWoken);
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <HAL_SPI_RxHalfCpltCallback+0x54>)
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	f107 020c 	add.w	r2, r7, #12
 8000962:	f107 010b 	add.w	r1, r7, #11
 8000966:	2300      	movs	r3, #0
 8000968:	f00a fcf8 	bl	800b35c <xQueueGenericSendFromISR>
	}

	if (xHigherPriorityTaskWoken) {
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00a      	beq.n	8000988 <HAL_SPI_RxHalfCpltCallback+0x48>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d007      	beq.n	8000988 <HAL_SPI_RxHalfCpltCallback+0x48>
 8000978:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <HAL_SPI_RxHalfCpltCallback+0x58>)
 800097a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	f3bf 8f4f 	dsb	sy
 8000984:	f3bf 8f6f 	isb	sy
	}
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40013000 	.word	0x40013000
 8000994:	24000088 	.word	0x24000088
 8000998:	e000ed04 	.word	0xe000ed04

0800099c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	if (USART1 == huart->Instance) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <HAL_UART_TxCpltCallback+0x24>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d102      	bne.n	80009b4 <HAL_UART_TxCpltCallback+0x18>
		usart_tx_ready = 0U;
 80009ae:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <HAL_UART_TxCpltCallback+0x28>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
	}
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	40011000 	.word	0x40011000
 80009c4:	24000099 	.word	0x24000099

080009c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
	uint8_t notify = 1U;
 80009d4:	2301      	movs	r3, #1
 80009d6:	72fb      	strb	r3, [r7, #11]

	if (USART1 == huart->Instance) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <HAL_UART_RxCpltCallback+0x50>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d108      	bne.n	80009f4 <HAL_UART_RxCpltCallback+0x2c>
		xQueueSendFromISR(usart_buffer_notification, (void *)&notify, &xHigherPriorityTaskWoken);
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_UART_RxCpltCallback+0x54>)
 80009e4:	6818      	ldr	r0, [r3, #0]
 80009e6:	f107 020c 	add.w	r2, r7, #12
 80009ea:	f107 010b 	add.w	r1, r7, #11
 80009ee:	2300      	movs	r3, #0
 80009f0:	f00a fcb4 	bl	800b35c <xQueueGenericSendFromISR>
	}

	if (xHigherPriorityTaskWoken) {
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00a      	beq.n	8000a10 <HAL_UART_RxCpltCallback+0x48>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d007      	beq.n	8000a10 <HAL_UART_RxCpltCallback+0x48>
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <HAL_UART_RxCpltCallback+0x58>)
 8000a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	f3bf 8f4f 	dsb	sy
 8000a0c:	f3bf 8f6f 	isb	sy
	}
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	2400008c 	.word	0x2400008c
 8000a20:	e000ed04 	.word	0xe000ed04

08000a24 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
	uint8_t notify = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	72fb      	strb	r3, [r7, #11]

	if (USART1 == huart->Instance) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0e      	ldr	r2, [pc, #56]	@ (8000a74 <HAL_UART_RxHalfCpltCallback+0x50>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d108      	bne.n	8000a50 <HAL_UART_RxHalfCpltCallback+0x2c>
		xQueueSendFromISR(usart_buffer_notification, (void *)&notify, &xHigherPriorityTaskWoken);
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <HAL_UART_RxHalfCpltCallback+0x54>)
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	f107 020c 	add.w	r2, r7, #12
 8000a46:	f107 010b 	add.w	r1, r7, #11
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f00a fc86 	bl	800b35c <xQueueGenericSendFromISR>
	}

	if (xHigherPriorityTaskWoken) {
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d00a      	beq.n	8000a6c <HAL_UART_RxHalfCpltCallback+0x48>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d007      	beq.n	8000a6c <HAL_UART_RxHalfCpltCallback+0x48>
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <HAL_UART_RxHalfCpltCallback+0x58>)
 8000a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	f3bf 8f4f 	dsb	sy
 8000a68:	f3bf 8f6f 	isb	sy
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40011000 	.word	0x40011000
 8000a78:	2400008c 	.word	0x2400008c
 8000a7c:	e000ed04 	.word	0xe000ed04

08000a80 <rxdBufferProcessing>:

// Обработка принятых данных.
static void rxdBufferProcessing(const uint8_t *input, size_t buffer_length, QueueHandle_t *output) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	uint8_t temptx[TX_BYTE_BUFFER_LENGTH];
	size_t byte_counter = 0UL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24

	for (size_t index = 0U; index < buffer_length; index++) {
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
 8000a94:	e04a      	b.n	8000b2c <rxdBufferProcessing+0xac>
		// Если текущий символ не равен 0, то передаем дальше.
		if ('\0' != *(char *)(input + index)) {
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00d      	beq.n	8000abe <rxdBufferProcessing+0x3e>
			temptx[byte_counter] = *(char *)(input + index);
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	7819      	ldrb	r1, [r3, #0]
 8000aaa:	f107 0210 	add.w	r2, r7, #16
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	4413      	add	r3, r2
 8000ab2:	460a      	mov	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
			byte_counter++;
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	3301      	adds	r3, #1
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8000abc:	e018      	b.n	8000af0 <rxdBufferProcessing+0x70>
		// Если текущий байт равен 0, но предыдущий нет, то тоже добавляем, т.к. это последний байт в строке.
		} else if (('\0' == *(char *)(input + index)) && ('\0' != *(char *)(input + index - 1U)) && (index != 0U)) {
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d112      	bne.n	8000af0 <rxdBufferProcessing+0x70>
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d00b      	beq.n	8000af0 <rxdBufferProcessing+0x70>
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d008      	beq.n	8000af0 <rxdBufferProcessing+0x70>
			temptx[byte_counter] = 0;
 8000ade:	f107 0210 	add.w	r2, r7, #16
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
			byte_counter++;
 8000aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aec:	3301      	adds	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
		} else {
			// Ничего не добавляем.
		}

		// Добавление в очередь
		if (((byte_counter == TX_BYTE_BUFFER_LENGTH) || ((index == (buffer_length - 1U) && (byte_counter != 0)))) && (uxQueueSpacesAvailable(*output) > 0)) {
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	2b10      	cmp	r3, #16
 8000af4:	d007      	beq.n	8000b06 <rxdBufferProcessing+0x86>
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	6a3a      	ldr	r2, [r7, #32]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d112      	bne.n	8000b26 <rxdBufferProcessing+0xa6>
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00f      	beq.n	8000b26 <rxdBufferProcessing+0xa6>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f00a fdbe 	bl	800b68c <uxQueueSpacesAvailable>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <rxdBufferProcessing+0xa6>
			xQueueSend(*output, (void *)temptx, 1UL);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	f107 0110 	add.w	r1, r7, #16
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2201      	movs	r2, #1
 8000b22:	f00a fafd 	bl	800b120 <xQueueGenericSend>
	for (size_t index = 0U; index < buffer_length; index++) {
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3a      	ldr	r2, [r7, #32]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d3b0      	bcc.n	8000a96 <rxdBufferProcessing+0x16>
		}
	}
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	@ 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b44:	f000 f9de 	bl	8000f04 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fd1c 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f820 	bl	8000b90 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b50:	f000 f88c 	bl	8000c6c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f996 	bl	8000e84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b58:	f000 f95c 	bl	8000e14 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b5c:	f000 f90e 	bl	8000d7c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000b60:	f000 f8b6 	bl	8000cd0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b64:	f009 ffb4 	bl	800aad0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b68:	4a06      	ldr	r2, [pc, #24]	@ (8000b84 <main+0x44>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <main+0x48>)
 8000b6e:	f009 fff9 	bl	800ab64 <osThreadNew>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <main+0x4c>)
 8000b76:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  bridge_enable();
 8000b78:	f7ff fd42 	bl	8000600 <bridge_enable>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b7c:	f009 ffcc 	bl	800ab18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <main+0x40>
 8000b84:	0800daf0 	.word	0x0800daf0
 8000b88:	08000ef5 	.word	0x08000ef5
 8000b8c:	24000598 	.word	0x24000598

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	@ 0x70
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9a:	224c      	movs	r2, #76	@ 0x4c
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00c fe8a 	bl	800d8b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00c fe84 	bl	800d8b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bb0:	2004      	movs	r0, #4
 8000bb2:	f003 fe87 	bl	80048c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b2b      	ldr	r3, [pc, #172]	@ (8000c68 <SystemClock_Config+0xd8>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000c68 <SystemClock_Config+0xd8>)
 8000bc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b28      	ldr	r3, [pc, #160]	@ (8000c68 <SystemClock_Config+0xd8>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bd2:	bf00      	nop
 8000bd4:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <SystemClock_Config+0xd8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000be0:	d1f8      	bne.n	8000bd4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bec:	2302      	movs	r3, #2
 8000bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000bf8:	2364      	movs	r3, #100	@ 0x64
 8000bfa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 fead 	bl	8004978 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c24:	f000 f9ac 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	233f      	movs	r3, #63	@ 0x3f
 8000c2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c34:	2308      	movs	r3, #8
 8000c36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c38:	2340      	movs	r3, #64	@ 0x40
 8000c3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c3c:	2340      	movs	r3, #64	@ 0x40
 8000c3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c46:	2340      	movs	r3, #64	@ 0x40
 8000c48:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f004 fa6c 	bl	800512c <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000c5a:	f000 f991 	bl	8000f80 <Error_Handler>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3770      	adds	r7, #112	@ 0x70
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	58024800 	.word	0x58024800

08000c6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0ae      	sub	sp, #184	@ 0xb8
 8000c70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	22b8      	movs	r2, #184	@ 0xb8
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00c fe1d 	bl	800d8b8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_USART1;
 8000c7e:	f241 0201 	movw	r2, #4097	@ 0x1001
 8000c82:	f04f 0300 	mov.w	r3, #0
 8000c86:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000c8e:	2364      	movs	r3, #100	@ 0x64
 8000c90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8000c96:	2304      	movs	r3, #4
 8000c98:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000c9e:	2380      	movs	r3, #128	@ 0x80
 8000ca0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 fe06 	bl	80058c8 <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000cc2:	f000 f95d 	bl	8000f80 <Error_Handler>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	37b8      	adds	r7, #184	@ 0xb8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000cd6:	4a28      	ldr	r2, [pc, #160]	@ (8000d78 <MX_SPI1_Init+0xa8>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cda:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000cdc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce2:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000cea:	2207      	movs	r2, #7
 8000cec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000cfc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d04:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000d08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d16:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d28:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d30:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d54:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <MX_SPI1_Init+0xa4>)
 8000d62:	f006 fb73 	bl	800744c <HAL_SPI_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000d6c:	f000 f908 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2400029c 	.word	0x2400029c
 8000d78:	40013000 	.word	0x40013000

08000d7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d80:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d82:	4a23      	ldr	r2, [pc, #140]	@ (8000e10 <MX_USART1_UART_Init+0x94>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d88:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db8:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc4:	4811      	ldr	r0, [pc, #68]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dc6:	f007 fd27 	bl	8008818 <HAL_UART_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000dd0:	f000 f8d6 	bl	8000f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dd8:	f009 fd6c 	bl	800a8b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000de2:	f000 f8cd 	bl	8000f80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4808      	ldr	r0, [pc, #32]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dea:	f009 fda1 	bl	800a930 <HAL_UARTEx_SetRxFifoThreshold>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000df4:	f000 f8c4 	bl	8000f80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <MX_USART1_UART_Init+0x90>)
 8000dfa:	f009 fd22 	bl	800a842 <HAL_UARTEx_DisableFifoMode>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e04:	f000 f8bc 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	24000414 	.word	0x24000414
 8000e10:	40011000 	.word	0x40011000

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_DMA_Init+0x6c>)
 8000e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e20:	4a17      	ldr	r2, [pc, #92]	@ (8000e80 <MX_DMA_Init+0x6c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_DMA_Init+0x6c>)
 8000e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2105      	movs	r1, #5
 8000e3c:	200b      	movs	r0, #11
 8000e3e:	f000 fcb5 	bl	80017ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e42:	200b      	movs	r0, #11
 8000e44:	f000 fccc 	bl	80017e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	200c      	movs	r0, #12
 8000e4e:	f000 fcad 	bl	80017ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e52:	200c      	movs	r0, #12
 8000e54:	f000 fcc4 	bl	80017e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	200d      	movs	r0, #13
 8000e5e:	f000 fca5 	bl	80017ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e62:	200d      	movs	r0, #13
 8000e64:	f000 fcbc 	bl	80017e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	200e      	movs	r0, #14
 8000e6e:	f000 fc9d 	bl	80017ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e72:	200e      	movs	r0, #14
 8000e74:	f000 fcb4 	bl	80017e0 <HAL_NVIC_EnableIRQ>

}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	58024400 	.word	0x58024400

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <MX_GPIO_Init+0x6c>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e90:	4a17      	ldr	r2, [pc, #92]	@ (8000ef0 <MX_GPIO_Init+0x6c>)
 8000e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_GPIO_Init+0x6c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <MX_GPIO_Init+0x6c>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eae:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <MX_GPIO_Init+0x6c>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <MX_GPIO_Init+0x6c>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <MX_GPIO_Init+0x6c>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	4a08      	ldr	r2, [pc, #32]	@ (8000ef0 <MX_GPIO_Init+0x6c>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <MX_GPIO_Init+0x6c>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	58024400 	.word	0x58024400

08000ef4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100UL);
 8000efc:	2064      	movs	r0, #100	@ 0x64
 8000efe:	f009 fec3 	bl	800ac88 <osDelay>
 8000f02:	e7fb      	b.n	8000efc <StartDefaultTask+0x8>

08000f04 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f16:	f000 fc71 	bl	80017fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f26:	231f      	movs	r3, #31
 8000f28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f2a:	2387      	movs	r3, #135	@ 0x87
 8000f2c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f32:	2300      	movs	r3, #0
 8000f34:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fc8f 	bl	800186c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f4e:	2004      	movs	r0, #4
 8000f50:	f000 fc6c 	bl	800182c <HAL_MPU_Enable>

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d101      	bne.n	8000f72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f6e:	f000 fb45 	bl	80015fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40002000 	.word	0x40002000

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <Error_Handler+0x8>

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <HAL_MspInit+0x38>)
 8000f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <HAL_MspInit+0x38>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <HAL_MspInit+0x38>)
 8000fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f06f 0001 	mvn.w	r0, #1
 8000fb8:	f000 fbf8 	bl	80017ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	@ 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a4c      	ldr	r2, [pc, #304]	@ (8001118 <HAL_SPI_MspInit+0x150>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	f040 8091 	bne.w	800110e <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fec:	4b4b      	ldr	r3, [pc, #300]	@ (800111c <HAL_SPI_MspInit+0x154>)
 8000fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800111c <HAL_SPI_MspInit+0x154>)
 8000ff4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ff8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ffc:	4b47      	ldr	r3, [pc, #284]	@ (800111c <HAL_SPI_MspInit+0x154>)
 8000ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b44      	ldr	r3, [pc, #272]	@ (800111c <HAL_SPI_MspInit+0x154>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	4a42      	ldr	r2, [pc, #264]	@ (800111c <HAL_SPI_MspInit+0x154>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101a:	4b40      	ldr	r3, [pc, #256]	@ (800111c <HAL_SPI_MspInit+0x154>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001028:	23e0      	movs	r3, #224	@ 0xe0
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001038:	2305      	movs	r3, #5
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4837      	ldr	r0, [pc, #220]	@ (8001120 <HAL_SPI_MspInit+0x158>)
 8001044:	f003 fa96 	bl	8004574 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream3;
 8001048:	4b36      	ldr	r3, [pc, #216]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 800104a:	4a37      	ldr	r2, [pc, #220]	@ (8001128 <HAL_SPI_MspInit+0x160>)
 800104c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800104e:	4b35      	ldr	r3, [pc, #212]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 8001050:	2225      	movs	r2, #37	@ 0x25
 8001052:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001054:	4b33      	ldr	r3, [pc, #204]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105a:	4b32      	ldr	r3, [pc, #200]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001060:	4b30      	ldr	r3, [pc, #192]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 8001062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001066:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001068:	4b2e      	ldr	r3, [pc, #184]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800106e:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001074:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 8001076:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800107a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800107c:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001088:	4826      	ldr	r0, [pc, #152]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 800108a:	f000 fc2f 	bl	80018ec <HAL_DMA_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8001094:	f7ff ff74 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a22      	ldr	r2, [pc, #136]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 800109c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800109e:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <HAL_SPI_MspInit+0x15c>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream2;
 80010a4:	4b21      	ldr	r3, [pc, #132]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010a6:	4a22      	ldr	r2, [pc, #136]	@ (8001130 <HAL_SPI_MspInit+0x168>)
 80010a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80010aa:	4b20      	ldr	r3, [pc, #128]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010ac:	2226      	movs	r2, #38	@ 0x26
 80010ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b0:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010b2:	2240      	movs	r2, #64	@ 0x40
 80010b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010e2:	4812      	ldr	r0, [pc, #72]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010e4:	f000 fc02 	bl	80018ec <HAL_DMA_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 80010ee:	f7ff ff47 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010f6:	679a      	str	r2, [r3, #120]	@ 0x78
 80010f8:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <HAL_SPI_MspInit+0x164>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2105      	movs	r1, #5
 8001102:	2023      	movs	r0, #35	@ 0x23
 8001104:	f000 fb52 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001108:	2023      	movs	r0, #35	@ 0x23
 800110a:	f000 fb69 	bl	80017e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40013000 	.word	0x40013000
 800111c:	58024400 	.word	0x58024400
 8001120:	58020000 	.word	0x58020000
 8001124:	24000324 	.word	0x24000324
 8001128:	40020058 	.word	0x40020058
 800112c:	2400039c 	.word	0x2400039c
 8001130:	40020040 	.word	0x40020040

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a4d      	ldr	r2, [pc, #308]	@ (8001288 <HAL_UART_MspInit+0x154>)
 8001152:	4293      	cmp	r3, r2
 8001154:	f040 8093 	bne.w	800127e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001158:	4b4c      	ldr	r3, [pc, #304]	@ (800128c <HAL_UART_MspInit+0x158>)
 800115a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800115e:	4a4b      	ldr	r2, [pc, #300]	@ (800128c <HAL_UART_MspInit+0x158>)
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001168:	4b48      	ldr	r3, [pc, #288]	@ (800128c <HAL_UART_MspInit+0x158>)
 800116a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b45      	ldr	r3, [pc, #276]	@ (800128c <HAL_UART_MspInit+0x158>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117c:	4a43      	ldr	r2, [pc, #268]	@ (800128c <HAL_UART_MspInit+0x158>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001186:	4b41      	ldr	r3, [pc, #260]	@ (800128c <HAL_UART_MspInit+0x158>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001194:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80011a6:	2304      	movs	r3, #4
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4837      	ldr	r0, [pc, #220]	@ (8001290 <HAL_UART_MspInit+0x15c>)
 80011b2:	f003 f9df 	bl	8004574 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80011b6:	4b37      	ldr	r3, [pc, #220]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011b8:	4a37      	ldr	r2, [pc, #220]	@ (8001298 <HAL_UART_MspInit+0x164>)
 80011ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80011bc:	4b35      	ldr	r3, [pc, #212]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011be:	2229      	movs	r2, #41	@ 0x29
 80011c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c2:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b32      	ldr	r3, [pc, #200]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80011e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011f0:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011f6:	4827      	ldr	r0, [pc, #156]	@ (8001294 <HAL_UART_MspInit+0x160>)
 80011f8:	f000 fb78 	bl	80018ec <HAL_DMA_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8001202:	f7ff febd 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a22      	ldr	r2, [pc, #136]	@ (8001294 <HAL_UART_MspInit+0x160>)
 800120a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800120e:	4a21      	ldr	r2, [pc, #132]	@ (8001294 <HAL_UART_MspInit+0x160>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <HAL_UART_MspInit+0x168>)
 8001216:	4a22      	ldr	r2, [pc, #136]	@ (80012a0 <HAL_UART_MspInit+0x16c>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800121a:	4b20      	ldr	r3, [pc, #128]	@ (800129c <HAL_UART_MspInit+0x168>)
 800121c:	222a      	movs	r2, #42	@ 0x2a
 800121e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <HAL_UART_MspInit+0x168>)
 8001222:	2240      	movs	r2, #64	@ 0x40
 8001224:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <HAL_UART_MspInit+0x168>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_UART_MspInit+0x168>)
 800122e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001232:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001234:	4b19      	ldr	r3, [pc, #100]	@ (800129c <HAL_UART_MspInit+0x168>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123a:	4b18      	ldr	r3, [pc, #96]	@ (800129c <HAL_UART_MspInit+0x168>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <HAL_UART_MspInit+0x168>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <HAL_UART_MspInit+0x168>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <HAL_UART_MspInit+0x168>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001252:	4812      	ldr	r0, [pc, #72]	@ (800129c <HAL_UART_MspInit+0x168>)
 8001254:	f000 fb4a 	bl	80018ec <HAL_DMA_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800125e:	f7ff fe8f 	bl	8000f80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <HAL_UART_MspInit+0x168>)
 8001266:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001268:	4a0c      	ldr	r2, [pc, #48]	@ (800129c <HAL_UART_MspInit+0x168>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2105      	movs	r1, #5
 8001272:	2025      	movs	r0, #37	@ 0x25
 8001274:	f000 fa9a 	bl	80017ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001278:	2025      	movs	r0, #37	@ 0x25
 800127a:	f000 fab1 	bl	80017e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	@ 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40011000 	.word	0x40011000
 800128c:	58024400 	.word	0x58024400
 8001290:	58020400 	.word	0x58020400
 8001294:	240004a8 	.word	0x240004a8
 8001298:	40020010 	.word	0x40020010
 800129c:	24000520 	.word	0x24000520
 80012a0:	40020028 	.word	0x40020028

080012a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	@ 0x40
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM14 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	d827      	bhi.n	8001302 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0U);
 80012b2:	2200      	movs	r2, #0
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	202d      	movs	r0, #45	@ 0x2d
 80012b8:	f000 fa78 	bl	80017ac <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80012bc:	202d      	movs	r0, #45	@ 0x2d
 80012be:	f000 fa8f 	bl	80017e0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80012c2:	4a29      	ldr	r2, [pc, #164]	@ (8001368 <HAL_InitTick+0xc4>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80012c8:	4b28      	ldr	r3, [pc, #160]	@ (800136c <HAL_InitTick+0xc8>)
 80012ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ce:	4a27      	ldr	r2, [pc, #156]	@ (800136c <HAL_InitTick+0xc8>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012d8:	4b24      	ldr	r3, [pc, #144]	@ (800136c <HAL_InitTick+0xc8>)
 80012da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e6:	f107 0210 	add.w	r2, r7, #16
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 faa7 	bl	8005844 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d106      	bne.n	800130e <HAL_InitTick+0x6a>
 8001300:	e001      	b.n	8001306 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e02b      	b.n	800135e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001306:	f004 fa71 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 800130a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800130c:	e004      	b.n	8001318 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800130e:	f004 fa6d 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 8001312:	4603      	mov	r3, r0
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800131a:	4a15      	ldr	r2, [pc, #84]	@ (8001370 <HAL_InitTick+0xcc>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	0c9b      	lsrs	r3, r3, #18
 8001322:	3b01      	subs	r3, #1
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <HAL_InitTick+0xd0>)
 8001328:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <HAL_InitTick+0xd4>)
 800132a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_InitTick+0xd0>)
 800132e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001332:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001334:	4a0f      	ldr	r2, [pc, #60]	@ (8001374 <HAL_InitTick+0xd0>)
 8001336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001338:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_InitTick+0xd0>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <HAL_InitTick+0xd0>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001346:	480b      	ldr	r0, [pc, #44]	@ (8001374 <HAL_InitTick+0xd0>)
 8001348:	f006 ff7f 	bl	800824a <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d104      	bne.n	800135c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001352:	4808      	ldr	r0, [pc, #32]	@ (8001374 <HAL_InitTick+0xd0>)
 8001354:	f006 ffda 	bl	800830c <HAL_TIM_Base_Start_IT>
 8001358:	4603      	mov	r3, r0
 800135a:	e000      	b.n	800135e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
}
 800135e:	4618      	mov	r0, r3
 8001360:	3740      	adds	r7, #64	@ 0x40
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24000008 	.word	0x24000008
 800136c:	58024400 	.word	0x58024400
 8001370:	431bde83 	.word	0x431bde83
 8001374:	2400059c 	.word	0x2400059c
 8001378:	40002000 	.word	0x40002000

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <NMI_Handler+0x4>

08001384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <MemManage_Handler+0x4>

08001394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <DMA1_Stream0_IRQHandler+0x10>)
 80013ba:	f001 fdbd 	bl	8002f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	240004a8 	.word	0x240004a8

080013c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_Stream1_IRQHandler+0x10>)
 80013ce:	f001 fdb3 	bl	8002f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	24000520 	.word	0x24000520

080013dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <DMA1_Stream2_IRQHandler+0x10>)
 80013e2:	f001 fda9 	bl	8002f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2400039c 	.word	0x2400039c

080013f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <DMA1_Stream3_IRQHandler+0x10>)
 80013f6:	f001 fd9f 	bl	8002f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	24000324 	.word	0x24000324

08001404 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <SPI1_IRQHandler+0x10>)
 800140a:	f006 fbcd 	bl	8007ba8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2400029c 	.word	0x2400029c

08001418 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <USART1_IRQHandler+0x10>)
 800141e:	f007 fb17 	bl	8008a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	24000414 	.word	0x24000414

0800142c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001432:	f006 fff1 	bl	8008418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2400059c 	.word	0x2400059c

08001440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001444:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <SystemInit+0xd0>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144a:	4a31      	ldr	r2, [pc, #196]	@ (8001510 <SystemInit+0xd0>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001454:	4b2f      	ldr	r3, [pc, #188]	@ (8001514 <SystemInit+0xd4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	2b06      	cmp	r3, #6
 800145e:	d807      	bhi.n	8001470 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001460:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <SystemInit+0xd4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 030f 	bic.w	r3, r3, #15
 8001468:	4a2a      	ldr	r2, [pc, #168]	@ (8001514 <SystemInit+0xd4>)
 800146a:	f043 0307 	orr.w	r3, r3, #7
 800146e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001470:	4b29      	ldr	r3, [pc, #164]	@ (8001518 <SystemInit+0xd8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <SystemInit+0xd8>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800147c:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <SystemInit+0xd8>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001482:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <SystemInit+0xd8>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4924      	ldr	r1, [pc, #144]	@ (8001518 <SystemInit+0xd8>)
 8001488:	4b24      	ldr	r3, [pc, #144]	@ (800151c <SystemInit+0xdc>)
 800148a:	4013      	ands	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800148e:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <SystemInit+0xd4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800149a:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <SystemInit+0xd4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 030f 	bic.w	r3, r3, #15
 80014a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001514 <SystemInit+0xd4>)
 80014a4:	f043 0307 	orr.w	r3, r3, #7
 80014a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <SystemInit+0xd8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <SystemInit+0xd8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <SystemInit+0xd8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <SystemInit+0xd8>)
 80014be:	4a18      	ldr	r2, [pc, #96]	@ (8001520 <SystemInit+0xe0>)
 80014c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <SystemInit+0xd8>)
 80014c4:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <SystemInit+0xe4>)
 80014c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <SystemInit+0xd8>)
 80014ca:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <SystemInit+0xe8>)
 80014cc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <SystemInit+0xd8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014d4:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <SystemInit+0xd8>)
 80014d6:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <SystemInit+0xe8>)
 80014d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <SystemInit+0xd8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <SystemInit+0xd8>)
 80014e2:	4a11      	ldr	r2, [pc, #68]	@ (8001528 <SystemInit+0xe8>)
 80014e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <SystemInit+0xd8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <SystemInit+0xd8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a09      	ldr	r2, [pc, #36]	@ (8001518 <SystemInit+0xd8>)
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014f8:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <SystemInit+0xd8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <SystemInit+0xec>)
 8001500:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001504:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00
 8001514:	52002000 	.word	0x52002000
 8001518:	58024400 	.word	0x58024400
 800151c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001520:	02020200 	.word	0x02020200
 8001524:	01ff0000 	.word	0x01ff0000
 8001528:	01010280 	.word	0x01010280
 800152c:	52004000 	.word	0x52004000

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001568 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001534:	f7ff ff84 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153a:	490d      	ldr	r1, [pc, #52]	@ (8001570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800153c:	4a0d      	ldr	r2, [pc, #52]	@ (8001574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001550:	4c0a      	ldr	r4, [pc, #40]	@ (800157c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f00c fa09 	bl	800d974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff faed 	bl	8000b40 <main>
  bx  lr
 8001566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800156c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001570:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001574:	0800db64 	.word	0x0800db64
  ldr r2, =_sbss
 8001578:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800157c:	24021538 	.word	0x24021538

08001580 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC3_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158a:	2003      	movs	r0, #3
 800158c:	f000 f903 	bl	8001796 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001590:	f003 ff82 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8001594:	4602      	mov	r2, r0
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_Init+0x68>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	4913      	ldr	r1, [pc, #76]	@ (80015f0 <HAL_Init+0x6c>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015ae:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <HAL_Init+0x68>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <HAL_Init+0x6c>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	fa22 f303 	lsr.w	r3, r2, r3
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <HAL_Init+0x70>)
 80015c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015c8:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <HAL_Init+0x74>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ce:	200f      	movs	r0, #15
 80015d0:	f7ff fe68 	bl	80012a4 <HAL_InitTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e002      	b.n	80015e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015de:	f7ff fcd5 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	58024400 	.word	0x58024400
 80015f0:	0800db14 	.word	0x0800db14
 80015f4:	24000004 	.word	0x24000004
 80015f8:	24000000 	.word	0x24000000

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2400000c 	.word	0x2400000c
 8001620:	240005e8 	.word	0x240005e8

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	240005e8 	.word	0x240005e8

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <__NVIC_SetPriorityGrouping+0x40>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	4313      	orrs	r3, r2
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	@ (800167c <__NVIC_SetPriorityGrouping+0x40>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	05fa0000 	.word	0x05fa0000

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	@ (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	@ (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	@ (800172c <__NVIC_SetPriority+0x50>)
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	@ 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff4c 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ba:	f7ff ff63 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	6978      	ldr	r0, [r7, #20]
 80017c6:	f7ff ffb3 	bl	8001730 <NVIC_EncodePriority>
 80017ca:	4602      	mov	r2, r0
 80017cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff82 	bl	80016dc <__NVIC_SetPriority>
}
 80017d8:	bf00      	nop
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff56 	bl	80016a0 <__NVIC_EnableIRQ>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001800:	f3bf 8f5f 	dmb	sy
}
 8001804:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001806:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <HAL_MPU_Disable+0x28>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	4a06      	ldr	r2, [pc, #24]	@ (8001824 <HAL_MPU_Disable+0x28>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001810:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_MPU_Disable+0x2c>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	e000ed90 	.word	0xe000ed90

0800182c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <HAL_MPU_Enable+0x38>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_MPU_Enable+0x3c>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	4a09      	ldr	r2, [pc, #36]	@ (8001868 <HAL_MPU_Enable+0x3c>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001848:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800184a:	f3bf 8f4f 	dsb	sy
}
 800184e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001850:	f3bf 8f6f 	isb	sy
}
 8001854:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed90 	.word	0xe000ed90
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	785a      	ldrb	r2, [r3, #1]
 8001878:	4b1b      	ldr	r3, [pc, #108]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
 800187a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4a19      	ldr	r2, [pc, #100]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001888:	4a17      	ldr	r2, [pc, #92]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7b1b      	ldrb	r3, [r3, #12]
 8001894:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7adb      	ldrb	r3, [r3, #11]
 800189a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800189c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7a9b      	ldrb	r3, [r3, #10]
 80018a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80018a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7b5b      	ldrb	r3, [r3, #13]
 80018aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7b9b      	ldrb	r3, [r3, #14]
 80018b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7bdb      	ldrb	r3, [r3, #15]
 80018ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7a5b      	ldrb	r3, [r3, #9]
 80018c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7a1b      	ldrb	r3, [r3, #8]
 80018ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018d8:	6113      	str	r3, [r2, #16]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed90 	.word	0xe000ed90

080018ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff fe96 	bl	8001624 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e312      	b.n	8001f2a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a66      	ldr	r2, [pc, #408]	@ (8001aa4 <HAL_DMA_Init+0x1b8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d04a      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a65      	ldr	r2, [pc, #404]	@ (8001aa8 <HAL_DMA_Init+0x1bc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d045      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a63      	ldr	r2, [pc, #396]	@ (8001aac <HAL_DMA_Init+0x1c0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d040      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a62      	ldr	r2, [pc, #392]	@ (8001ab0 <HAL_DMA_Init+0x1c4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d03b      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a60      	ldr	r2, [pc, #384]	@ (8001ab4 <HAL_DMA_Init+0x1c8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d036      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ab8 <HAL_DMA_Init+0x1cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d031      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a5d      	ldr	r2, [pc, #372]	@ (8001abc <HAL_DMA_Init+0x1d0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d02c      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac0 <HAL_DMA_Init+0x1d4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d027      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac4 <HAL_DMA_Init+0x1d8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d022      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a59      	ldr	r2, [pc, #356]	@ (8001ac8 <HAL_DMA_Init+0x1dc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d01d      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a57      	ldr	r2, [pc, #348]	@ (8001acc <HAL_DMA_Init+0x1e0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d018      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a56      	ldr	r2, [pc, #344]	@ (8001ad0 <HAL_DMA_Init+0x1e4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d013      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a54      	ldr	r2, [pc, #336]	@ (8001ad4 <HAL_DMA_Init+0x1e8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00e      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a53      	ldr	r2, [pc, #332]	@ (8001ad8 <HAL_DMA_Init+0x1ec>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d009      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a51      	ldr	r2, [pc, #324]	@ (8001adc <HAL_DMA_Init+0x1f0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d004      	beq.n	80019a4 <HAL_DMA_Init+0xb8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a50      	ldr	r2, [pc, #320]	@ (8001ae0 <HAL_DMA_Init+0x1f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d101      	bne.n	80019a8 <HAL_DMA_Init+0xbc>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_DMA_Init+0xbe>
 80019a8:	2300      	movs	r3, #0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 813c 	beq.w	8001c28 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a37      	ldr	r2, [pc, #220]	@ (8001aa4 <HAL_DMA_Init+0x1b8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d04a      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a36      	ldr	r2, [pc, #216]	@ (8001aa8 <HAL_DMA_Init+0x1bc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d045      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a34      	ldr	r2, [pc, #208]	@ (8001aac <HAL_DMA_Init+0x1c0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d040      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a33      	ldr	r2, [pc, #204]	@ (8001ab0 <HAL_DMA_Init+0x1c4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d03b      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a31      	ldr	r2, [pc, #196]	@ (8001ab4 <HAL_DMA_Init+0x1c8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d036      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a30      	ldr	r2, [pc, #192]	@ (8001ab8 <HAL_DMA_Init+0x1cc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d031      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2e      	ldr	r2, [pc, #184]	@ (8001abc <HAL_DMA_Init+0x1d0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d02c      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac0 <HAL_DMA_Init+0x1d4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d027      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac4 <HAL_DMA_Init+0x1d8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d022      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac8 <HAL_DMA_Init+0x1dc>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d01d      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a28      	ldr	r2, [pc, #160]	@ (8001acc <HAL_DMA_Init+0x1e0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d018      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a27      	ldr	r2, [pc, #156]	@ (8001ad0 <HAL_DMA_Init+0x1e4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d013      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a25      	ldr	r2, [pc, #148]	@ (8001ad4 <HAL_DMA_Init+0x1e8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00e      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a24      	ldr	r2, [pc, #144]	@ (8001ad8 <HAL_DMA_Init+0x1ec>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d009      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a22      	ldr	r2, [pc, #136]	@ (8001adc <HAL_DMA_Init+0x1f0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d004      	beq.n	8001a60 <HAL_DMA_Init+0x174>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <HAL_DMA_Init+0x1f4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d108      	bne.n	8001a72 <HAL_DMA_Init+0x186>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e007      	b.n	8001a82 <HAL_DMA_Init+0x196>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a82:	e02f      	b.n	8001ae4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a84:	f7ff fdce 	bl	8001624 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d928      	bls.n	8001ae4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2220      	movs	r2, #32
 8001a96:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e242      	b.n	8001f2a <HAL_DMA_Init+0x63e>
 8001aa4:	40020010 	.word	0x40020010
 8001aa8:	40020028 	.word	0x40020028
 8001aac:	40020040 	.word	0x40020040
 8001ab0:	40020058 	.word	0x40020058
 8001ab4:	40020070 	.word	0x40020070
 8001ab8:	40020088 	.word	0x40020088
 8001abc:	400200a0 	.word	0x400200a0
 8001ac0:	400200b8 	.word	0x400200b8
 8001ac4:	40020410 	.word	0x40020410
 8001ac8:	40020428 	.word	0x40020428
 8001acc:	40020440 	.word	0x40020440
 8001ad0:	40020458 	.word	0x40020458
 8001ad4:	40020470 	.word	0x40020470
 8001ad8:	40020488 	.word	0x40020488
 8001adc:	400204a0 	.word	0x400204a0
 8001ae0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1c8      	bne.n	8001a84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4b83      	ldr	r3, [pc, #524]	@ (8001d0c <HAL_DMA_Init+0x420>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d107      	bne.n	8001b48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b40:	4313      	orrs	r3, r2
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b28      	cmp	r3, #40	@ 0x28
 8001b4e:	d903      	bls.n	8001b58 <HAL_DMA_Init+0x26c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b56:	d91f      	bls.n	8001b98 <HAL_DMA_Init+0x2ac>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b5e:	d903      	bls.n	8001b68 <HAL_DMA_Init+0x27c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b42      	cmp	r3, #66	@ 0x42
 8001b66:	d917      	bls.n	8001b98 <HAL_DMA_Init+0x2ac>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b46      	cmp	r3, #70	@ 0x46
 8001b6e:	d903      	bls.n	8001b78 <HAL_DMA_Init+0x28c>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b48      	cmp	r3, #72	@ 0x48
 8001b76:	d90f      	bls.n	8001b98 <HAL_DMA_Init+0x2ac>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b4e      	cmp	r3, #78	@ 0x4e
 8001b7e:	d903      	bls.n	8001b88 <HAL_DMA_Init+0x29c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b52      	cmp	r3, #82	@ 0x52
 8001b86:	d907      	bls.n	8001b98 <HAL_DMA_Init+0x2ac>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b73      	cmp	r3, #115	@ 0x73
 8001b8e:	d905      	bls.n	8001b9c <HAL_DMA_Init+0x2b0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b77      	cmp	r3, #119	@ 0x77
 8001b96:	d801      	bhi.n	8001b9c <HAL_DMA_Init+0x2b0>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_DMA_Init+0x2b2>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ba8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f023 0307 	bic.w	r3, r3, #7
 8001bc0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d117      	bne.n	8001c04 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00e      	beq.n	8001c04 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f002 fb3a 	bl	8004260 <DMA_CheckFifoParam>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2240      	movs	r2, #64	@ 0x40
 8001bf6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e192      	b.n	8001f2a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f002 fa75 	bl	80040fc <DMA_CalcBaseAndBitshift>
 8001c12:	4603      	mov	r3, r0
 8001c14:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	223f      	movs	r2, #63	@ 0x3f
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	e0c8      	b.n	8001dba <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a38      	ldr	r2, [pc, #224]	@ (8001d10 <HAL_DMA_Init+0x424>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d022      	beq.n	8001c78 <HAL_DMA_Init+0x38c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a37      	ldr	r2, [pc, #220]	@ (8001d14 <HAL_DMA_Init+0x428>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d01d      	beq.n	8001c78 <HAL_DMA_Init+0x38c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a35      	ldr	r2, [pc, #212]	@ (8001d18 <HAL_DMA_Init+0x42c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d018      	beq.n	8001c78 <HAL_DMA_Init+0x38c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a34      	ldr	r2, [pc, #208]	@ (8001d1c <HAL_DMA_Init+0x430>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d013      	beq.n	8001c78 <HAL_DMA_Init+0x38c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a32      	ldr	r2, [pc, #200]	@ (8001d20 <HAL_DMA_Init+0x434>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00e      	beq.n	8001c78 <HAL_DMA_Init+0x38c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a31      	ldr	r2, [pc, #196]	@ (8001d24 <HAL_DMA_Init+0x438>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d009      	beq.n	8001c78 <HAL_DMA_Init+0x38c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2f      	ldr	r2, [pc, #188]	@ (8001d28 <HAL_DMA_Init+0x43c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d004      	beq.n	8001c78 <HAL_DMA_Init+0x38c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2e      	ldr	r2, [pc, #184]	@ (8001d2c <HAL_DMA_Init+0x440>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_DMA_Init+0x390>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <HAL_DMA_Init+0x392>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8092 	beq.w	8001da8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a21      	ldr	r2, [pc, #132]	@ (8001d10 <HAL_DMA_Init+0x424>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d021      	beq.n	8001cd2 <HAL_DMA_Init+0x3e6>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a20      	ldr	r2, [pc, #128]	@ (8001d14 <HAL_DMA_Init+0x428>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d01c      	beq.n	8001cd2 <HAL_DMA_Init+0x3e6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <HAL_DMA_Init+0x42c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d017      	beq.n	8001cd2 <HAL_DMA_Init+0x3e6>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d1c <HAL_DMA_Init+0x430>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d012      	beq.n	8001cd2 <HAL_DMA_Init+0x3e6>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d20 <HAL_DMA_Init+0x434>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_DMA_Init+0x3e6>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1a      	ldr	r2, [pc, #104]	@ (8001d24 <HAL_DMA_Init+0x438>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d008      	beq.n	8001cd2 <HAL_DMA_Init+0x3e6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a18      	ldr	r2, [pc, #96]	@ (8001d28 <HAL_DMA_Init+0x43c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_DMA_Init+0x3e6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <HAL_DMA_Init+0x440>)
 8001cd0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_DMA_Init+0x444>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b40      	cmp	r3, #64	@ 0x40
 8001cf8:	d01c      	beq.n	8001d34 <HAL_DMA_Init+0x448>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b80      	cmp	r3, #128	@ 0x80
 8001d00:	d102      	bne.n	8001d08 <HAL_DMA_Init+0x41c>
 8001d02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d06:	e016      	b.n	8001d36 <HAL_DMA_Init+0x44a>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e014      	b.n	8001d36 <HAL_DMA_Init+0x44a>
 8001d0c:	fe10803f 	.word	0xfe10803f
 8001d10:	58025408 	.word	0x58025408
 8001d14:	5802541c 	.word	0x5802541c
 8001d18:	58025430 	.word	0x58025430
 8001d1c:	58025444 	.word	0x58025444
 8001d20:	58025458 	.word	0x58025458
 8001d24:	5802546c 	.word	0x5802546c
 8001d28:	58025480 	.word	0x58025480
 8001d2c:	58025494 	.word	0x58025494
 8001d30:	fffe000f 	.word	0xfffe000f
 8001d34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68d2      	ldr	r2, [r2, #12]
 8001d3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f34 <HAL_DMA_Init+0x648>)
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f38 <HAL_DMA_Init+0x64c>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	009a      	lsls	r2, r3, #2
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f002 f9b5 	bl	80040fc <DMA_CalcBaseAndBitshift>
 8001d92:	4603      	mov	r3, r0
 8001d94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2201      	movs	r2, #1
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	e008      	b.n	8001dba <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2240      	movs	r2, #64	@ 0x40
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0b7      	b.n	8001f2a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8001f3c <HAL_DMA_Init+0x650>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d072      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f40 <HAL_DMA_Init+0x654>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d06d      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f44 <HAL_DMA_Init+0x658>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d068      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8001f48 <HAL_DMA_Init+0x65c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d063      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a59      	ldr	r2, [pc, #356]	@ (8001f4c <HAL_DMA_Init+0x660>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05e      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a57      	ldr	r2, [pc, #348]	@ (8001f50 <HAL_DMA_Init+0x664>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d059      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a56      	ldr	r2, [pc, #344]	@ (8001f54 <HAL_DMA_Init+0x668>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d054      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a54      	ldr	r2, [pc, #336]	@ (8001f58 <HAL_DMA_Init+0x66c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d04f      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a53      	ldr	r2, [pc, #332]	@ (8001f5c <HAL_DMA_Init+0x670>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d04a      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a51      	ldr	r2, [pc, #324]	@ (8001f60 <HAL_DMA_Init+0x674>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d045      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a50      	ldr	r2, [pc, #320]	@ (8001f64 <HAL_DMA_Init+0x678>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d040      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f68 <HAL_DMA_Init+0x67c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d03b      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a4d      	ldr	r2, [pc, #308]	@ (8001f6c <HAL_DMA_Init+0x680>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d036      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a4b      	ldr	r2, [pc, #300]	@ (8001f70 <HAL_DMA_Init+0x684>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d031      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001f74 <HAL_DMA_Init+0x688>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d02c      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a48      	ldr	r2, [pc, #288]	@ (8001f78 <HAL_DMA_Init+0x68c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d027      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a47      	ldr	r2, [pc, #284]	@ (8001f7c <HAL_DMA_Init+0x690>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d022      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a45      	ldr	r2, [pc, #276]	@ (8001f80 <HAL_DMA_Init+0x694>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01d      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a44      	ldr	r2, [pc, #272]	@ (8001f84 <HAL_DMA_Init+0x698>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d018      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a42      	ldr	r2, [pc, #264]	@ (8001f88 <HAL_DMA_Init+0x69c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a41      	ldr	r2, [pc, #260]	@ (8001f8c <HAL_DMA_Init+0x6a0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00e      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a3f      	ldr	r2, [pc, #252]	@ (8001f90 <HAL_DMA_Init+0x6a4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f94 <HAL_DMA_Init+0x6a8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d004      	beq.n	8001eaa <HAL_DMA_Init+0x5be>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8001f98 <HAL_DMA_Init+0x6ac>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_DMA_Init+0x5c2>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_DMA_Init+0x5c4>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d032      	beq.n	8001f1a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f002 fa4f 	bl	8004358 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b80      	cmp	r3, #128	@ 0x80
 8001ec0:	d102      	bne.n	8001ec8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001edc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d010      	beq.n	8001f08 <HAL_DMA_Init+0x61c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d80c      	bhi.n	8001f08 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f002 facc 	bl	800448c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	e008      	b.n	8001f1a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	a7fdabf8 	.word	0xa7fdabf8
 8001f38:	cccccccd 	.word	0xcccccccd
 8001f3c:	40020010 	.word	0x40020010
 8001f40:	40020028 	.word	0x40020028
 8001f44:	40020040 	.word	0x40020040
 8001f48:	40020058 	.word	0x40020058
 8001f4c:	40020070 	.word	0x40020070
 8001f50:	40020088 	.word	0x40020088
 8001f54:	400200a0 	.word	0x400200a0
 8001f58:	400200b8 	.word	0x400200b8
 8001f5c:	40020410 	.word	0x40020410
 8001f60:	40020428 	.word	0x40020428
 8001f64:	40020440 	.word	0x40020440
 8001f68:	40020458 	.word	0x40020458
 8001f6c:	40020470 	.word	0x40020470
 8001f70:	40020488 	.word	0x40020488
 8001f74:	400204a0 	.word	0x400204a0
 8001f78:	400204b8 	.word	0x400204b8
 8001f7c:	58025408 	.word	0x58025408
 8001f80:	5802541c 	.word	0x5802541c
 8001f84:	58025430 	.word	0x58025430
 8001f88:	58025444 	.word	0x58025444
 8001f8c:	58025458 	.word	0x58025458
 8001f90:	5802546c 	.word	0x5802546c
 8001f94:	58025480 	.word	0x58025480
 8001f98:	58025494 	.word	0x58025494

08001f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e226      	b.n	8002406 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_DMA_Start_IT+0x2a>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e21f      	b.n	8002406 <HAL_DMA_Start_IT+0x46a>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 820a 	bne.w	80023f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a68      	ldr	r2, [pc, #416]	@ (8002190 <HAL_DMA_Start_IT+0x1f4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d04a      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a66      	ldr	r2, [pc, #408]	@ (8002194 <HAL_DMA_Start_IT+0x1f8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d045      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a65      	ldr	r2, [pc, #404]	@ (8002198 <HAL_DMA_Start_IT+0x1fc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d040      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a63      	ldr	r2, [pc, #396]	@ (800219c <HAL_DMA_Start_IT+0x200>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d03b      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a62      	ldr	r2, [pc, #392]	@ (80021a0 <HAL_DMA_Start_IT+0x204>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d036      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a60      	ldr	r2, [pc, #384]	@ (80021a4 <HAL_DMA_Start_IT+0x208>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d031      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a5f      	ldr	r2, [pc, #380]	@ (80021a8 <HAL_DMA_Start_IT+0x20c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d02c      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5d      	ldr	r2, [pc, #372]	@ (80021ac <HAL_DMA_Start_IT+0x210>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d027      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a5c      	ldr	r2, [pc, #368]	@ (80021b0 <HAL_DMA_Start_IT+0x214>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d022      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5a      	ldr	r2, [pc, #360]	@ (80021b4 <HAL_DMA_Start_IT+0x218>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01d      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a59      	ldr	r2, [pc, #356]	@ (80021b8 <HAL_DMA_Start_IT+0x21c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d018      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a57      	ldr	r2, [pc, #348]	@ (80021bc <HAL_DMA_Start_IT+0x220>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a56      	ldr	r2, [pc, #344]	@ (80021c0 <HAL_DMA_Start_IT+0x224>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00e      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a54      	ldr	r2, [pc, #336]	@ (80021c4 <HAL_DMA_Start_IT+0x228>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d009      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a53      	ldr	r2, [pc, #332]	@ (80021c8 <HAL_DMA_Start_IT+0x22c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d004      	beq.n	800208a <HAL_DMA_Start_IT+0xee>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a51      	ldr	r2, [pc, #324]	@ (80021cc <HAL_DMA_Start_IT+0x230>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d108      	bne.n	800209c <HAL_DMA_Start_IT+0x100>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e007      	b.n	80020ac <HAL_DMA_Start_IT+0x110>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f001 fe76 	bl	8003da4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a34      	ldr	r2, [pc, #208]	@ (8002190 <HAL_DMA_Start_IT+0x1f4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d04a      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a33      	ldr	r2, [pc, #204]	@ (8002194 <HAL_DMA_Start_IT+0x1f8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d045      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a31      	ldr	r2, [pc, #196]	@ (8002198 <HAL_DMA_Start_IT+0x1fc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d040      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a30      	ldr	r2, [pc, #192]	@ (800219c <HAL_DMA_Start_IT+0x200>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d03b      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2e      	ldr	r2, [pc, #184]	@ (80021a0 <HAL_DMA_Start_IT+0x204>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d036      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2d      	ldr	r2, [pc, #180]	@ (80021a4 <HAL_DMA_Start_IT+0x208>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d031      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a2b      	ldr	r2, [pc, #172]	@ (80021a8 <HAL_DMA_Start_IT+0x20c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02c      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <HAL_DMA_Start_IT+0x210>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d027      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a28      	ldr	r2, [pc, #160]	@ (80021b0 <HAL_DMA_Start_IT+0x214>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d022      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a27      	ldr	r2, [pc, #156]	@ (80021b4 <HAL_DMA_Start_IT+0x218>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d01d      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a25      	ldr	r2, [pc, #148]	@ (80021b8 <HAL_DMA_Start_IT+0x21c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d018      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a24      	ldr	r2, [pc, #144]	@ (80021bc <HAL_DMA_Start_IT+0x220>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d013      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a22      	ldr	r2, [pc, #136]	@ (80021c0 <HAL_DMA_Start_IT+0x224>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00e      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a21      	ldr	r2, [pc, #132]	@ (80021c4 <HAL_DMA_Start_IT+0x228>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d009      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1f      	ldr	r2, [pc, #124]	@ (80021c8 <HAL_DMA_Start_IT+0x22c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d004      	beq.n	8002158 <HAL_DMA_Start_IT+0x1bc>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1e      	ldr	r2, [pc, #120]	@ (80021cc <HAL_DMA_Start_IT+0x230>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_DMA_Start_IT+0x1c0>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_DMA_Start_IT+0x1c2>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d036      	beq.n	80021d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 021e 	bic.w	r2, r3, #30
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0216 	orr.w	r2, r2, #22
 8002174:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d03e      	beq.n	80021fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0208 	orr.w	r2, r2, #8
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e035      	b.n	80021fc <HAL_DMA_Start_IT+0x260>
 8002190:	40020010 	.word	0x40020010
 8002194:	40020028 	.word	0x40020028
 8002198:	40020040 	.word	0x40020040
 800219c:	40020058 	.word	0x40020058
 80021a0:	40020070 	.word	0x40020070
 80021a4:	40020088 	.word	0x40020088
 80021a8:	400200a0 	.word	0x400200a0
 80021ac:	400200b8 	.word	0x400200b8
 80021b0:	40020410 	.word	0x40020410
 80021b4:	40020428 	.word	0x40020428
 80021b8:	40020440 	.word	0x40020440
 80021bc:	40020458 	.word	0x40020458
 80021c0:	40020470 	.word	0x40020470
 80021c4:	40020488 	.word	0x40020488
 80021c8:	400204a0 	.word	0x400204a0
 80021cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 020e 	bic.w	r2, r3, #14
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 020a 	orr.w	r2, r2, #10
 80021e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0204 	orr.w	r2, r2, #4
 80021fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a83      	ldr	r2, [pc, #524]	@ (8002410 <HAL_DMA_Start_IT+0x474>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d072      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a82      	ldr	r2, [pc, #520]	@ (8002414 <HAL_DMA_Start_IT+0x478>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d06d      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a80      	ldr	r2, [pc, #512]	@ (8002418 <HAL_DMA_Start_IT+0x47c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d068      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7f      	ldr	r2, [pc, #508]	@ (800241c <HAL_DMA_Start_IT+0x480>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d063      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7d      	ldr	r2, [pc, #500]	@ (8002420 <HAL_DMA_Start_IT+0x484>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d05e      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7c      	ldr	r2, [pc, #496]	@ (8002424 <HAL_DMA_Start_IT+0x488>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d059      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a7a      	ldr	r2, [pc, #488]	@ (8002428 <HAL_DMA_Start_IT+0x48c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d054      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a79      	ldr	r2, [pc, #484]	@ (800242c <HAL_DMA_Start_IT+0x490>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d04f      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a77      	ldr	r2, [pc, #476]	@ (8002430 <HAL_DMA_Start_IT+0x494>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d04a      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a76      	ldr	r2, [pc, #472]	@ (8002434 <HAL_DMA_Start_IT+0x498>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d045      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a74      	ldr	r2, [pc, #464]	@ (8002438 <HAL_DMA_Start_IT+0x49c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d040      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a73      	ldr	r2, [pc, #460]	@ (800243c <HAL_DMA_Start_IT+0x4a0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d03b      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a71      	ldr	r2, [pc, #452]	@ (8002440 <HAL_DMA_Start_IT+0x4a4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d036      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a70      	ldr	r2, [pc, #448]	@ (8002444 <HAL_DMA_Start_IT+0x4a8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d031      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6e      	ldr	r2, [pc, #440]	@ (8002448 <HAL_DMA_Start_IT+0x4ac>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d02c      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6d      	ldr	r2, [pc, #436]	@ (800244c <HAL_DMA_Start_IT+0x4b0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d027      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002450 <HAL_DMA_Start_IT+0x4b4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d022      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002454 <HAL_DMA_Start_IT+0x4b8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d01d      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a68      	ldr	r2, [pc, #416]	@ (8002458 <HAL_DMA_Start_IT+0x4bc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d018      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a67      	ldr	r2, [pc, #412]	@ (800245c <HAL_DMA_Start_IT+0x4c0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d013      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a65      	ldr	r2, [pc, #404]	@ (8002460 <HAL_DMA_Start_IT+0x4c4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00e      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a64      	ldr	r2, [pc, #400]	@ (8002464 <HAL_DMA_Start_IT+0x4c8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d009      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a62      	ldr	r2, [pc, #392]	@ (8002468 <HAL_DMA_Start_IT+0x4cc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_DMA_Start_IT+0x350>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a61      	ldr	r2, [pc, #388]	@ (800246c <HAL_DMA_Start_IT+0x4d0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_DMA_Start_IT+0x354>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_DMA_Start_IT+0x356>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01a      	beq.n	800232c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002312:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002326:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800232a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a37      	ldr	r2, [pc, #220]	@ (8002410 <HAL_DMA_Start_IT+0x474>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d04a      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a36      	ldr	r2, [pc, #216]	@ (8002414 <HAL_DMA_Start_IT+0x478>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d045      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a34      	ldr	r2, [pc, #208]	@ (8002418 <HAL_DMA_Start_IT+0x47c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d040      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a33      	ldr	r2, [pc, #204]	@ (800241c <HAL_DMA_Start_IT+0x480>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d03b      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a31      	ldr	r2, [pc, #196]	@ (8002420 <HAL_DMA_Start_IT+0x484>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d036      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a30      	ldr	r2, [pc, #192]	@ (8002424 <HAL_DMA_Start_IT+0x488>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d031      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2e      	ldr	r2, [pc, #184]	@ (8002428 <HAL_DMA_Start_IT+0x48c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d02c      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a2d      	ldr	r2, [pc, #180]	@ (800242c <HAL_DMA_Start_IT+0x490>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d027      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2b      	ldr	r2, [pc, #172]	@ (8002430 <HAL_DMA_Start_IT+0x494>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d022      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2a      	ldr	r2, [pc, #168]	@ (8002434 <HAL_DMA_Start_IT+0x498>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d01d      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a28      	ldr	r2, [pc, #160]	@ (8002438 <HAL_DMA_Start_IT+0x49c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d018      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a27      	ldr	r2, [pc, #156]	@ (800243c <HAL_DMA_Start_IT+0x4a0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a25      	ldr	r2, [pc, #148]	@ (8002440 <HAL_DMA_Start_IT+0x4a4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00e      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a24      	ldr	r2, [pc, #144]	@ (8002444 <HAL_DMA_Start_IT+0x4a8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a22      	ldr	r2, [pc, #136]	@ (8002448 <HAL_DMA_Start_IT+0x4ac>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d004      	beq.n	80023cc <HAL_DMA_Start_IT+0x430>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a21      	ldr	r2, [pc, #132]	@ (800244c <HAL_DMA_Start_IT+0x4b0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d108      	bne.n	80023de <HAL_DMA_Start_IT+0x442>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e012      	b.n	8002404 <HAL_DMA_Start_IT+0x468>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e009      	b.n	8002404 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002404:	7dfb      	ldrb	r3, [r7, #23]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40020010 	.word	0x40020010
 8002414:	40020028 	.word	0x40020028
 8002418:	40020040 	.word	0x40020040
 800241c:	40020058 	.word	0x40020058
 8002420:	40020070 	.word	0x40020070
 8002424:	40020088 	.word	0x40020088
 8002428:	400200a0 	.word	0x400200a0
 800242c:	400200b8 	.word	0x400200b8
 8002430:	40020410 	.word	0x40020410
 8002434:	40020428 	.word	0x40020428
 8002438:	40020440 	.word	0x40020440
 800243c:	40020458 	.word	0x40020458
 8002440:	40020470 	.word	0x40020470
 8002444:	40020488 	.word	0x40020488
 8002448:	400204a0 	.word	0x400204a0
 800244c:	400204b8 	.word	0x400204b8
 8002450:	58025408 	.word	0x58025408
 8002454:	5802541c 	.word	0x5802541c
 8002458:	58025430 	.word	0x58025430
 800245c:	58025444 	.word	0x58025444
 8002460:	58025458 	.word	0x58025458
 8002464:	5802546c 	.word	0x5802546c
 8002468:	58025480 	.word	0x58025480
 800246c:	58025494 	.word	0x58025494

08002470 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff f8d4 	bl	8001624 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e2dc      	b.n	8002a42 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d008      	beq.n	80024a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2280      	movs	r2, #128	@ 0x80
 8002498:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e2cd      	b.n	8002a42 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a76      	ldr	r2, [pc, #472]	@ (8002684 <HAL_DMA_Abort+0x214>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d04a      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a74      	ldr	r2, [pc, #464]	@ (8002688 <HAL_DMA_Abort+0x218>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d045      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a73      	ldr	r2, [pc, #460]	@ (800268c <HAL_DMA_Abort+0x21c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d040      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a71      	ldr	r2, [pc, #452]	@ (8002690 <HAL_DMA_Abort+0x220>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d03b      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a70      	ldr	r2, [pc, #448]	@ (8002694 <HAL_DMA_Abort+0x224>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d036      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002698 <HAL_DMA_Abort+0x228>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d031      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6d      	ldr	r2, [pc, #436]	@ (800269c <HAL_DMA_Abort+0x22c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d02c      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6b      	ldr	r2, [pc, #428]	@ (80026a0 <HAL_DMA_Abort+0x230>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d027      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6a      	ldr	r2, [pc, #424]	@ (80026a4 <HAL_DMA_Abort+0x234>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d022      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a68      	ldr	r2, [pc, #416]	@ (80026a8 <HAL_DMA_Abort+0x238>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01d      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a67      	ldr	r2, [pc, #412]	@ (80026ac <HAL_DMA_Abort+0x23c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d018      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a65      	ldr	r2, [pc, #404]	@ (80026b0 <HAL_DMA_Abort+0x240>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a64      	ldr	r2, [pc, #400]	@ (80026b4 <HAL_DMA_Abort+0x244>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00e      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a62      	ldr	r2, [pc, #392]	@ (80026b8 <HAL_DMA_Abort+0x248>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d009      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a61      	ldr	r2, [pc, #388]	@ (80026bc <HAL_DMA_Abort+0x24c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d004      	beq.n	8002546 <HAL_DMA_Abort+0xd6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a5f      	ldr	r2, [pc, #380]	@ (80026c0 <HAL_DMA_Abort+0x250>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_DMA_Abort+0xda>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_DMA_Abort+0xdc>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d013      	beq.n	8002578 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 021e 	bic.w	r2, r2, #30
 800255e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800256e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e00a      	b.n	800258e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 020e 	bic.w	r2, r2, #14
 8002586:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a3c      	ldr	r2, [pc, #240]	@ (8002684 <HAL_DMA_Abort+0x214>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d072      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a3a      	ldr	r2, [pc, #232]	@ (8002688 <HAL_DMA_Abort+0x218>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d06d      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a39      	ldr	r2, [pc, #228]	@ (800268c <HAL_DMA_Abort+0x21c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d068      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a37      	ldr	r2, [pc, #220]	@ (8002690 <HAL_DMA_Abort+0x220>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d063      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a36      	ldr	r2, [pc, #216]	@ (8002694 <HAL_DMA_Abort+0x224>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d05e      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a34      	ldr	r2, [pc, #208]	@ (8002698 <HAL_DMA_Abort+0x228>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d059      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a33      	ldr	r2, [pc, #204]	@ (800269c <HAL_DMA_Abort+0x22c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d054      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a31      	ldr	r2, [pc, #196]	@ (80026a0 <HAL_DMA_Abort+0x230>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d04f      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a30      	ldr	r2, [pc, #192]	@ (80026a4 <HAL_DMA_Abort+0x234>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d04a      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a2e      	ldr	r2, [pc, #184]	@ (80026a8 <HAL_DMA_Abort+0x238>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d045      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2d      	ldr	r2, [pc, #180]	@ (80026ac <HAL_DMA_Abort+0x23c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d040      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2b      	ldr	r2, [pc, #172]	@ (80026b0 <HAL_DMA_Abort+0x240>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d03b      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a2a      	ldr	r2, [pc, #168]	@ (80026b4 <HAL_DMA_Abort+0x244>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d036      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a28      	ldr	r2, [pc, #160]	@ (80026b8 <HAL_DMA_Abort+0x248>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d031      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a27      	ldr	r2, [pc, #156]	@ (80026bc <HAL_DMA_Abort+0x24c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d02c      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a25      	ldr	r2, [pc, #148]	@ (80026c0 <HAL_DMA_Abort+0x250>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d027      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a24      	ldr	r2, [pc, #144]	@ (80026c4 <HAL_DMA_Abort+0x254>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d022      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a22      	ldr	r2, [pc, #136]	@ (80026c8 <HAL_DMA_Abort+0x258>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01d      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a21      	ldr	r2, [pc, #132]	@ (80026cc <HAL_DMA_Abort+0x25c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d018      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1f      	ldr	r2, [pc, #124]	@ (80026d0 <HAL_DMA_Abort+0x260>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1e      	ldr	r2, [pc, #120]	@ (80026d4 <HAL_DMA_Abort+0x264>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00e      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <HAL_DMA_Abort+0x268>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d009      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1b      	ldr	r2, [pc, #108]	@ (80026dc <HAL_DMA_Abort+0x26c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d004      	beq.n	800267e <HAL_DMA_Abort+0x20e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a19      	ldr	r2, [pc, #100]	@ (80026e0 <HAL_DMA_Abort+0x270>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d132      	bne.n	80026e4 <HAL_DMA_Abort+0x274>
 800267e:	2301      	movs	r3, #1
 8002680:	e031      	b.n	80026e6 <HAL_DMA_Abort+0x276>
 8002682:	bf00      	nop
 8002684:	40020010 	.word	0x40020010
 8002688:	40020028 	.word	0x40020028
 800268c:	40020040 	.word	0x40020040
 8002690:	40020058 	.word	0x40020058
 8002694:	40020070 	.word	0x40020070
 8002698:	40020088 	.word	0x40020088
 800269c:	400200a0 	.word	0x400200a0
 80026a0:	400200b8 	.word	0x400200b8
 80026a4:	40020410 	.word	0x40020410
 80026a8:	40020428 	.word	0x40020428
 80026ac:	40020440 	.word	0x40020440
 80026b0:	40020458 	.word	0x40020458
 80026b4:	40020470 	.word	0x40020470
 80026b8:	40020488 	.word	0x40020488
 80026bc:	400204a0 	.word	0x400204a0
 80026c0:	400204b8 	.word	0x400204b8
 80026c4:	58025408 	.word	0x58025408
 80026c8:	5802541c 	.word	0x5802541c
 80026cc:	58025430 	.word	0x58025430
 80026d0:	58025444 	.word	0x58025444
 80026d4:	58025458 	.word	0x58025458
 80026d8:	5802546c 	.word	0x5802546c
 80026dc:	58025480 	.word	0x58025480
 80026e0:	58025494 	.word	0x58025494
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6d      	ldr	r2, [pc, #436]	@ (80028b4 <HAL_DMA_Abort+0x444>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d04a      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a6b      	ldr	r2, [pc, #428]	@ (80028b8 <HAL_DMA_Abort+0x448>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d045      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6a      	ldr	r2, [pc, #424]	@ (80028bc <HAL_DMA_Abort+0x44c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d040      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a68      	ldr	r2, [pc, #416]	@ (80028c0 <HAL_DMA_Abort+0x450>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d03b      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a67      	ldr	r2, [pc, #412]	@ (80028c4 <HAL_DMA_Abort+0x454>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d036      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a65      	ldr	r2, [pc, #404]	@ (80028c8 <HAL_DMA_Abort+0x458>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d031      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a64      	ldr	r2, [pc, #400]	@ (80028cc <HAL_DMA_Abort+0x45c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d02c      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a62      	ldr	r2, [pc, #392]	@ (80028d0 <HAL_DMA_Abort+0x460>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d027      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a61      	ldr	r2, [pc, #388]	@ (80028d4 <HAL_DMA_Abort+0x464>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d022      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a5f      	ldr	r2, [pc, #380]	@ (80028d8 <HAL_DMA_Abort+0x468>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01d      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a5e      	ldr	r2, [pc, #376]	@ (80028dc <HAL_DMA_Abort+0x46c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d018      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a5c      	ldr	r2, [pc, #368]	@ (80028e0 <HAL_DMA_Abort+0x470>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5b      	ldr	r2, [pc, #364]	@ (80028e4 <HAL_DMA_Abort+0x474>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00e      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a59      	ldr	r2, [pc, #356]	@ (80028e8 <HAL_DMA_Abort+0x478>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a58      	ldr	r2, [pc, #352]	@ (80028ec <HAL_DMA_Abort+0x47c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_DMA_Abort+0x32a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a56      	ldr	r2, [pc, #344]	@ (80028f0 <HAL_DMA_Abort+0x480>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d108      	bne.n	80027ac <HAL_DMA_Abort+0x33c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e007      	b.n	80027bc <HAL_DMA_Abort+0x34c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027bc:	e013      	b.n	80027e6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027be:	f7fe ff31 	bl	8001624 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d90c      	bls.n	80027e6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2203      	movs	r2, #3
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e12d      	b.n	8002a42 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e5      	bne.n	80027be <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2f      	ldr	r2, [pc, #188]	@ (80028b4 <HAL_DMA_Abort+0x444>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d04a      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2d      	ldr	r2, [pc, #180]	@ (80028b8 <HAL_DMA_Abort+0x448>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d045      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a2c      	ldr	r2, [pc, #176]	@ (80028bc <HAL_DMA_Abort+0x44c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d040      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a2a      	ldr	r2, [pc, #168]	@ (80028c0 <HAL_DMA_Abort+0x450>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d03b      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a29      	ldr	r2, [pc, #164]	@ (80028c4 <HAL_DMA_Abort+0x454>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d036      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a27      	ldr	r2, [pc, #156]	@ (80028c8 <HAL_DMA_Abort+0x458>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d031      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a26      	ldr	r2, [pc, #152]	@ (80028cc <HAL_DMA_Abort+0x45c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d02c      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a24      	ldr	r2, [pc, #144]	@ (80028d0 <HAL_DMA_Abort+0x460>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d027      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a23      	ldr	r2, [pc, #140]	@ (80028d4 <HAL_DMA_Abort+0x464>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d022      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a21      	ldr	r2, [pc, #132]	@ (80028d8 <HAL_DMA_Abort+0x468>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01d      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a20      	ldr	r2, [pc, #128]	@ (80028dc <HAL_DMA_Abort+0x46c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d018      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <HAL_DMA_Abort+0x470>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1d      	ldr	r2, [pc, #116]	@ (80028e4 <HAL_DMA_Abort+0x474>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00e      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <HAL_DMA_Abort+0x478>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1a      	ldr	r2, [pc, #104]	@ (80028ec <HAL_DMA_Abort+0x47c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_DMA_Abort+0x422>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <HAL_DMA_Abort+0x480>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_DMA_Abort+0x426>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <HAL_DMA_Abort+0x428>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02b      	beq.n	80028f4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	223f      	movs	r2, #63	@ 0x3f
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	e02a      	b.n	800290a <HAL_DMA_Abort+0x49a>
 80028b4:	40020010 	.word	0x40020010
 80028b8:	40020028 	.word	0x40020028
 80028bc:	40020040 	.word	0x40020040
 80028c0:	40020058 	.word	0x40020058
 80028c4:	40020070 	.word	0x40020070
 80028c8:	40020088 	.word	0x40020088
 80028cc:	400200a0 	.word	0x400200a0
 80028d0:	400200b8 	.word	0x400200b8
 80028d4:	40020410 	.word	0x40020410
 80028d8:	40020428 	.word	0x40020428
 80028dc:	40020440 	.word	0x40020440
 80028e0:	40020458 	.word	0x40020458
 80028e4:	40020470 	.word	0x40020470
 80028e8:	40020488 	.word	0x40020488
 80028ec:	400204a0 	.word	0x400204a0
 80028f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2201      	movs	r2, #1
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a4f      	ldr	r2, [pc, #316]	@ (8002a4c <HAL_DMA_Abort+0x5dc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d072      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a4d      	ldr	r2, [pc, #308]	@ (8002a50 <HAL_DMA_Abort+0x5e0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d06d      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a4c      	ldr	r2, [pc, #304]	@ (8002a54 <HAL_DMA_Abort+0x5e4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d068      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a58 <HAL_DMA_Abort+0x5e8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d063      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a49      	ldr	r2, [pc, #292]	@ (8002a5c <HAL_DMA_Abort+0x5ec>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d05e      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a47      	ldr	r2, [pc, #284]	@ (8002a60 <HAL_DMA_Abort+0x5f0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d059      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a46      	ldr	r2, [pc, #280]	@ (8002a64 <HAL_DMA_Abort+0x5f4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d054      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a44      	ldr	r2, [pc, #272]	@ (8002a68 <HAL_DMA_Abort+0x5f8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d04f      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a43      	ldr	r2, [pc, #268]	@ (8002a6c <HAL_DMA_Abort+0x5fc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d04a      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a41      	ldr	r2, [pc, #260]	@ (8002a70 <HAL_DMA_Abort+0x600>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d045      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a40      	ldr	r2, [pc, #256]	@ (8002a74 <HAL_DMA_Abort+0x604>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d040      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a3e      	ldr	r2, [pc, #248]	@ (8002a78 <HAL_DMA_Abort+0x608>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d03b      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a3d      	ldr	r2, [pc, #244]	@ (8002a7c <HAL_DMA_Abort+0x60c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d036      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a3b      	ldr	r2, [pc, #236]	@ (8002a80 <HAL_DMA_Abort+0x610>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d031      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a84 <HAL_DMA_Abort+0x614>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d02c      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a38      	ldr	r2, [pc, #224]	@ (8002a88 <HAL_DMA_Abort+0x618>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d027      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a37      	ldr	r2, [pc, #220]	@ (8002a8c <HAL_DMA_Abort+0x61c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d022      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a35      	ldr	r2, [pc, #212]	@ (8002a90 <HAL_DMA_Abort+0x620>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01d      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a34      	ldr	r2, [pc, #208]	@ (8002a94 <HAL_DMA_Abort+0x624>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d018      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a32      	ldr	r2, [pc, #200]	@ (8002a98 <HAL_DMA_Abort+0x628>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a31      	ldr	r2, [pc, #196]	@ (8002a9c <HAL_DMA_Abort+0x62c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00e      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa0 <HAL_DMA_Abort+0x630>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d009      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa4 <HAL_DMA_Abort+0x634>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_DMA_Abort+0x58a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa8 <HAL_DMA_Abort+0x638>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_Abort+0x58e>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_DMA_Abort+0x590>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d015      	beq.n	8002a30 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a0c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a24:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a2e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40020010 	.word	0x40020010
 8002a50:	40020028 	.word	0x40020028
 8002a54:	40020040 	.word	0x40020040
 8002a58:	40020058 	.word	0x40020058
 8002a5c:	40020070 	.word	0x40020070
 8002a60:	40020088 	.word	0x40020088
 8002a64:	400200a0 	.word	0x400200a0
 8002a68:	400200b8 	.word	0x400200b8
 8002a6c:	40020410 	.word	0x40020410
 8002a70:	40020428 	.word	0x40020428
 8002a74:	40020440 	.word	0x40020440
 8002a78:	40020458 	.word	0x40020458
 8002a7c:	40020470 	.word	0x40020470
 8002a80:	40020488 	.word	0x40020488
 8002a84:	400204a0 	.word	0x400204a0
 8002a88:	400204b8 	.word	0x400204b8
 8002a8c:	58025408 	.word	0x58025408
 8002a90:	5802541c 	.word	0x5802541c
 8002a94:	58025430 	.word	0x58025430
 8002a98:	58025444 	.word	0x58025444
 8002a9c:	58025458 	.word	0x58025458
 8002aa0:	5802546c 	.word	0x5802546c
 8002aa4:	58025480 	.word	0x58025480
 8002aa8:	58025494 	.word	0x58025494

08002aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e237      	b.n	8002f2e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2280      	movs	r2, #128	@ 0x80
 8002ace:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e22c      	b.n	8002f2e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a5c      	ldr	r2, [pc, #368]	@ (8002c4c <HAL_DMA_Abort_IT+0x1a0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d04a      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c50 <HAL_DMA_Abort_IT+0x1a4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d045      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a59      	ldr	r2, [pc, #356]	@ (8002c54 <HAL_DMA_Abort_IT+0x1a8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d040      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a58      	ldr	r2, [pc, #352]	@ (8002c58 <HAL_DMA_Abort_IT+0x1ac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d03b      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a56      	ldr	r2, [pc, #344]	@ (8002c5c <HAL_DMA_Abort_IT+0x1b0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d036      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a55      	ldr	r2, [pc, #340]	@ (8002c60 <HAL_DMA_Abort_IT+0x1b4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d031      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a53      	ldr	r2, [pc, #332]	@ (8002c64 <HAL_DMA_Abort_IT+0x1b8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02c      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a52      	ldr	r2, [pc, #328]	@ (8002c68 <HAL_DMA_Abort_IT+0x1bc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d027      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a50      	ldr	r2, [pc, #320]	@ (8002c6c <HAL_DMA_Abort_IT+0x1c0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d022      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4f      	ldr	r2, [pc, #316]	@ (8002c70 <HAL_DMA_Abort_IT+0x1c4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d01d      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002c74 <HAL_DMA_Abort_IT+0x1c8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d018      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a4c      	ldr	r2, [pc, #304]	@ (8002c78 <HAL_DMA_Abort_IT+0x1cc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a4a      	ldr	r2, [pc, #296]	@ (8002c7c <HAL_DMA_Abort_IT+0x1d0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00e      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a49      	ldr	r2, [pc, #292]	@ (8002c80 <HAL_DMA_Abort_IT+0x1d4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a47      	ldr	r2, [pc, #284]	@ (8002c84 <HAL_DMA_Abort_IT+0x1d8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_DMA_Abort_IT+0xc8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a46      	ldr	r2, [pc, #280]	@ (8002c88 <HAL_DMA_Abort_IT+0x1dc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_DMA_Abort_IT+0xcc>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_DMA_Abort_IT+0xce>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8086 	beq.w	8002c8c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2204      	movs	r2, #4
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8002c4c <HAL_DMA_Abort_IT+0x1a0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d04a      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2e      	ldr	r2, [pc, #184]	@ (8002c50 <HAL_DMA_Abort_IT+0x1a4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d045      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8002c54 <HAL_DMA_Abort_IT+0x1a8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d040      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a2b      	ldr	r2, [pc, #172]	@ (8002c58 <HAL_DMA_Abort_IT+0x1ac>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d03b      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a29      	ldr	r2, [pc, #164]	@ (8002c5c <HAL_DMA_Abort_IT+0x1b0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d036      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a28      	ldr	r2, [pc, #160]	@ (8002c60 <HAL_DMA_Abort_IT+0x1b4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d031      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a26      	ldr	r2, [pc, #152]	@ (8002c64 <HAL_DMA_Abort_IT+0x1b8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d02c      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a25      	ldr	r2, [pc, #148]	@ (8002c68 <HAL_DMA_Abort_IT+0x1bc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d027      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	@ (8002c6c <HAL_DMA_Abort_IT+0x1c0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d022      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a22      	ldr	r2, [pc, #136]	@ (8002c70 <HAL_DMA_Abort_IT+0x1c4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d01d      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a20      	ldr	r2, [pc, #128]	@ (8002c74 <HAL_DMA_Abort_IT+0x1c8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d018      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8002c78 <HAL_DMA_Abort_IT+0x1cc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	@ (8002c7c <HAL_DMA_Abort_IT+0x1d0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00e      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <HAL_DMA_Abort_IT+0x1d4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d009      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1a      	ldr	r2, [pc, #104]	@ (8002c84 <HAL_DMA_Abort_IT+0x1d8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x17c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <HAL_DMA_Abort_IT+0x1dc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d108      	bne.n	8002c3a <HAL_DMA_Abort_IT+0x18e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e178      	b.n	8002f2c <HAL_DMA_Abort_IT+0x480>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e16f      	b.n	8002f2c <HAL_DMA_Abort_IT+0x480>
 8002c4c:	40020010 	.word	0x40020010
 8002c50:	40020028 	.word	0x40020028
 8002c54:	40020040 	.word	0x40020040
 8002c58:	40020058 	.word	0x40020058
 8002c5c:	40020070 	.word	0x40020070
 8002c60:	40020088 	.word	0x40020088
 8002c64:	400200a0 	.word	0x400200a0
 8002c68:	400200b8 	.word	0x400200b8
 8002c6c:	40020410 	.word	0x40020410
 8002c70:	40020428 	.word	0x40020428
 8002c74:	40020440 	.word	0x40020440
 8002c78:	40020458 	.word	0x40020458
 8002c7c:	40020470 	.word	0x40020470
 8002c80:	40020488 	.word	0x40020488
 8002c84:	400204a0 	.word	0x400204a0
 8002c88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 020e 	bic.w	r2, r2, #14
 8002c9a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6c      	ldr	r2, [pc, #432]	@ (8002e54 <HAL_DMA_Abort_IT+0x3a8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d04a      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6b      	ldr	r2, [pc, #428]	@ (8002e58 <HAL_DMA_Abort_IT+0x3ac>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d045      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a69      	ldr	r2, [pc, #420]	@ (8002e5c <HAL_DMA_Abort_IT+0x3b0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d040      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a68      	ldr	r2, [pc, #416]	@ (8002e60 <HAL_DMA_Abort_IT+0x3b4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d03b      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a66      	ldr	r2, [pc, #408]	@ (8002e64 <HAL_DMA_Abort_IT+0x3b8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d036      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a65      	ldr	r2, [pc, #404]	@ (8002e68 <HAL_DMA_Abort_IT+0x3bc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d031      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a63      	ldr	r2, [pc, #396]	@ (8002e6c <HAL_DMA_Abort_IT+0x3c0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02c      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a62      	ldr	r2, [pc, #392]	@ (8002e70 <HAL_DMA_Abort_IT+0x3c4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d027      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a60      	ldr	r2, [pc, #384]	@ (8002e74 <HAL_DMA_Abort_IT+0x3c8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d022      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a5f      	ldr	r2, [pc, #380]	@ (8002e78 <HAL_DMA_Abort_IT+0x3cc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d01d      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a5d      	ldr	r2, [pc, #372]	@ (8002e7c <HAL_DMA_Abort_IT+0x3d0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d018      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002e80 <HAL_DMA_Abort_IT+0x3d4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5a      	ldr	r2, [pc, #360]	@ (8002e84 <HAL_DMA_Abort_IT+0x3d8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a59      	ldr	r2, [pc, #356]	@ (8002e88 <HAL_DMA_Abort_IT+0x3dc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a57      	ldr	r2, [pc, #348]	@ (8002e8c <HAL_DMA_Abort_IT+0x3e0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_DMA_Abort_IT+0x290>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a56      	ldr	r2, [pc, #344]	@ (8002e90 <HAL_DMA_Abort_IT+0x3e4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <HAL_DMA_Abort_IT+0x2a2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e007      	b.n	8002d5e <HAL_DMA_Abort_IT+0x2b2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3c      	ldr	r2, [pc, #240]	@ (8002e54 <HAL_DMA_Abort_IT+0x3a8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d072      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e58 <HAL_DMA_Abort_IT+0x3ac>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d06d      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a39      	ldr	r2, [pc, #228]	@ (8002e5c <HAL_DMA_Abort_IT+0x3b0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d068      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a37      	ldr	r2, [pc, #220]	@ (8002e60 <HAL_DMA_Abort_IT+0x3b4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d063      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a36      	ldr	r2, [pc, #216]	@ (8002e64 <HAL_DMA_Abort_IT+0x3b8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d05e      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a34      	ldr	r2, [pc, #208]	@ (8002e68 <HAL_DMA_Abort_IT+0x3bc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d059      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a33      	ldr	r2, [pc, #204]	@ (8002e6c <HAL_DMA_Abort_IT+0x3c0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d054      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a31      	ldr	r2, [pc, #196]	@ (8002e70 <HAL_DMA_Abort_IT+0x3c4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d04f      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a30      	ldr	r2, [pc, #192]	@ (8002e74 <HAL_DMA_Abort_IT+0x3c8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d04a      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8002e78 <HAL_DMA_Abort_IT+0x3cc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d045      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e7c <HAL_DMA_Abort_IT+0x3d0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d040      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e80 <HAL_DMA_Abort_IT+0x3d4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d03b      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2a      	ldr	r2, [pc, #168]	@ (8002e84 <HAL_DMA_Abort_IT+0x3d8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d036      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a28      	ldr	r2, [pc, #160]	@ (8002e88 <HAL_DMA_Abort_IT+0x3dc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d031      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a27      	ldr	r2, [pc, #156]	@ (8002e8c <HAL_DMA_Abort_IT+0x3e0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d02c      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a25      	ldr	r2, [pc, #148]	@ (8002e90 <HAL_DMA_Abort_IT+0x3e4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d027      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a24      	ldr	r2, [pc, #144]	@ (8002e94 <HAL_DMA_Abort_IT+0x3e8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d022      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a22      	ldr	r2, [pc, #136]	@ (8002e98 <HAL_DMA_Abort_IT+0x3ec>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01d      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a21      	ldr	r2, [pc, #132]	@ (8002e9c <HAL_DMA_Abort_IT+0x3f0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d018      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <HAL_DMA_Abort_IT+0x3f4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d013      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea4 <HAL_DMA_Abort_IT+0x3f8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00e      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea8 <HAL_DMA_Abort_IT+0x3fc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002eac <HAL_DMA_Abort_IT+0x400>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d004      	beq.n	8002e4e <HAL_DMA_Abort_IT+0x3a2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a19      	ldr	r2, [pc, #100]	@ (8002eb0 <HAL_DMA_Abort_IT+0x404>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d132      	bne.n	8002eb4 <HAL_DMA_Abort_IT+0x408>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e031      	b.n	8002eb6 <HAL_DMA_Abort_IT+0x40a>
 8002e52:	bf00      	nop
 8002e54:	40020010 	.word	0x40020010
 8002e58:	40020028 	.word	0x40020028
 8002e5c:	40020040 	.word	0x40020040
 8002e60:	40020058 	.word	0x40020058
 8002e64:	40020070 	.word	0x40020070
 8002e68:	40020088 	.word	0x40020088
 8002e6c:	400200a0 	.word	0x400200a0
 8002e70:	400200b8 	.word	0x400200b8
 8002e74:	40020410 	.word	0x40020410
 8002e78:	40020428 	.word	0x40020428
 8002e7c:	40020440 	.word	0x40020440
 8002e80:	40020458 	.word	0x40020458
 8002e84:	40020470 	.word	0x40020470
 8002e88:	40020488 	.word	0x40020488
 8002e8c:	400204a0 	.word	0x400204a0
 8002e90:	400204b8 	.word	0x400204b8
 8002e94:	58025408 	.word	0x58025408
 8002e98:	5802541c 	.word	0x5802541c
 8002e9c:	58025430 	.word	0x58025430
 8002ea0:	58025444 	.word	0x58025444
 8002ea4:	58025458 	.word	0x58025458
 8002ea8:	5802546c 	.word	0x5802546c
 8002eac:	58025480 	.word	0x58025480
 8002eb0:	58025494 	.word	0x58025494
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2201      	movs	r2, #1
 8002eda:	409a      	lsls	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ee8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00c      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002efc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f00:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f0a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop

08002f38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	@ 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f44:	4b67      	ldr	r3, [pc, #412]	@ (80030e4 <HAL_DMA_IRQHandler+0x1ac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a67      	ldr	r2, [pc, #412]	@ (80030e8 <HAL_DMA_IRQHandler+0x1b0>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0a9b      	lsrs	r3, r3, #10
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a5f      	ldr	r2, [pc, #380]	@ (80030ec <HAL_DMA_IRQHandler+0x1b4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d04a      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a5d      	ldr	r2, [pc, #372]	@ (80030f0 <HAL_DMA_IRQHandler+0x1b8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d045      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a5c      	ldr	r2, [pc, #368]	@ (80030f4 <HAL_DMA_IRQHandler+0x1bc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d040      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5a      	ldr	r2, [pc, #360]	@ (80030f8 <HAL_DMA_IRQHandler+0x1c0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d03b      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a59      	ldr	r2, [pc, #356]	@ (80030fc <HAL_DMA_IRQHandler+0x1c4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d036      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a57      	ldr	r2, [pc, #348]	@ (8003100 <HAL_DMA_IRQHandler+0x1c8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d031      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a56      	ldr	r2, [pc, #344]	@ (8003104 <HAL_DMA_IRQHandler+0x1cc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d02c      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a54      	ldr	r2, [pc, #336]	@ (8003108 <HAL_DMA_IRQHandler+0x1d0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d027      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a53      	ldr	r2, [pc, #332]	@ (800310c <HAL_DMA_IRQHandler+0x1d4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d022      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a51      	ldr	r2, [pc, #324]	@ (8003110 <HAL_DMA_IRQHandler+0x1d8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01d      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a50      	ldr	r2, [pc, #320]	@ (8003114 <HAL_DMA_IRQHandler+0x1dc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d018      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a4e      	ldr	r2, [pc, #312]	@ (8003118 <HAL_DMA_IRQHandler+0x1e0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a4d      	ldr	r2, [pc, #308]	@ (800311c <HAL_DMA_IRQHandler+0x1e4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00e      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8003120 <HAL_DMA_IRQHandler+0x1e8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d009      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a4a      	ldr	r2, [pc, #296]	@ (8003124 <HAL_DMA_IRQHandler+0x1ec>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d004      	beq.n	800300a <HAL_DMA_IRQHandler+0xd2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a48      	ldr	r2, [pc, #288]	@ (8003128 <HAL_DMA_IRQHandler+0x1f0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d101      	bne.n	800300e <HAL_DMA_IRQHandler+0xd6>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_DMA_IRQHandler+0xd8>
 800300e:	2300      	movs	r3, #0
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 842b 	beq.w	800386c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	2208      	movs	r2, #8
 8003020:	409a      	lsls	r2, r3
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80a2 	beq.w	8003170 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2e      	ldr	r2, [pc, #184]	@ (80030ec <HAL_DMA_IRQHandler+0x1b4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d04a      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2d      	ldr	r2, [pc, #180]	@ (80030f0 <HAL_DMA_IRQHandler+0x1b8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d045      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a2b      	ldr	r2, [pc, #172]	@ (80030f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d040      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2a      	ldr	r2, [pc, #168]	@ (80030f8 <HAL_DMA_IRQHandler+0x1c0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d03b      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a28      	ldr	r2, [pc, #160]	@ (80030fc <HAL_DMA_IRQHandler+0x1c4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d036      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a27      	ldr	r2, [pc, #156]	@ (8003100 <HAL_DMA_IRQHandler+0x1c8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d031      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a25      	ldr	r2, [pc, #148]	@ (8003104 <HAL_DMA_IRQHandler+0x1cc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02c      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a24      	ldr	r2, [pc, #144]	@ (8003108 <HAL_DMA_IRQHandler+0x1d0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d027      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a22      	ldr	r2, [pc, #136]	@ (800310c <HAL_DMA_IRQHandler+0x1d4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d022      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a21      	ldr	r2, [pc, #132]	@ (8003110 <HAL_DMA_IRQHandler+0x1d8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d01d      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1f      	ldr	r2, [pc, #124]	@ (8003114 <HAL_DMA_IRQHandler+0x1dc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d018      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1e      	ldr	r2, [pc, #120]	@ (8003118 <HAL_DMA_IRQHandler+0x1e0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1c      	ldr	r2, [pc, #112]	@ (800311c <HAL_DMA_IRQHandler+0x1e4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00e      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003120 <HAL_DMA_IRQHandler+0x1e8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d009      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <HAL_DMA_IRQHandler+0x1ec>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_DMA_IRQHandler+0x194>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a18      	ldr	r2, [pc, #96]	@ (8003128 <HAL_DMA_IRQHandler+0x1f0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d12f      	bne.n	800312c <HAL_DMA_IRQHandler+0x1f4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e02e      	b.n	8003140 <HAL_DMA_IRQHandler+0x208>
 80030e2:	bf00      	nop
 80030e4:	24000000 	.word	0x24000000
 80030e8:	1b4e81b5 	.word	0x1b4e81b5
 80030ec:	40020010 	.word	0x40020010
 80030f0:	40020028 	.word	0x40020028
 80030f4:	40020040 	.word	0x40020040
 80030f8:	40020058 	.word	0x40020058
 80030fc:	40020070 	.word	0x40020070
 8003100:	40020088 	.word	0x40020088
 8003104:	400200a0 	.word	0x400200a0
 8003108:	400200b8 	.word	0x400200b8
 800310c:	40020410 	.word	0x40020410
 8003110:	40020428 	.word	0x40020428
 8003114:	40020440 	.word	0x40020440
 8003118:	40020458 	.word	0x40020458
 800311c:	40020470 	.word	0x40020470
 8003120:	40020488 	.word	0x40020488
 8003124:	400204a0 	.word	0x400204a0
 8003128:	400204b8 	.word	0x400204b8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d015      	beq.n	8003170 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0204 	bic.w	r2, r2, #4
 8003152:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2208      	movs	r2, #8
 800315e:	409a      	lsls	r2, r3
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	fa22 f303 	lsr.w	r3, r2, r3
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06e      	beq.n	8003264 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a69      	ldr	r2, [pc, #420]	@ (8003330 <HAL_DMA_IRQHandler+0x3f8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d04a      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a67      	ldr	r2, [pc, #412]	@ (8003334 <HAL_DMA_IRQHandler+0x3fc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d045      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a66      	ldr	r2, [pc, #408]	@ (8003338 <HAL_DMA_IRQHandler+0x400>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d040      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a64      	ldr	r2, [pc, #400]	@ (800333c <HAL_DMA_IRQHandler+0x404>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d03b      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a63      	ldr	r2, [pc, #396]	@ (8003340 <HAL_DMA_IRQHandler+0x408>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d036      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a61      	ldr	r2, [pc, #388]	@ (8003344 <HAL_DMA_IRQHandler+0x40c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d031      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a60      	ldr	r2, [pc, #384]	@ (8003348 <HAL_DMA_IRQHandler+0x410>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d02c      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a5e      	ldr	r2, [pc, #376]	@ (800334c <HAL_DMA_IRQHandler+0x414>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d027      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5d      	ldr	r2, [pc, #372]	@ (8003350 <HAL_DMA_IRQHandler+0x418>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a5b      	ldr	r2, [pc, #364]	@ (8003354 <HAL_DMA_IRQHandler+0x41c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01d      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003358 <HAL_DMA_IRQHandler+0x420>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d018      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a58      	ldr	r2, [pc, #352]	@ (800335c <HAL_DMA_IRQHandler+0x424>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a57      	ldr	r2, [pc, #348]	@ (8003360 <HAL_DMA_IRQHandler+0x428>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a55      	ldr	r2, [pc, #340]	@ (8003364 <HAL_DMA_IRQHandler+0x42c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a54      	ldr	r2, [pc, #336]	@ (8003368 <HAL_DMA_IRQHandler+0x430>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_DMA_IRQHandler+0x2ee>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a52      	ldr	r2, [pc, #328]	@ (800336c <HAL_DMA_IRQHandler+0x434>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10a      	bne.n	800323c <HAL_DMA_IRQHandler+0x304>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e003      	b.n	8003244 <HAL_DMA_IRQHandler+0x30c>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	2201      	movs	r2, #1
 8003252:	409a      	lsls	r2, r3
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325c:	f043 0202 	orr.w	r2, r3, #2
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2204      	movs	r2, #4
 800326e:	409a      	lsls	r2, r3
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 808f 	beq.w	8003398 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2c      	ldr	r2, [pc, #176]	@ (8003330 <HAL_DMA_IRQHandler+0x3f8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d04a      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2a      	ldr	r2, [pc, #168]	@ (8003334 <HAL_DMA_IRQHandler+0x3fc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d045      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a29      	ldr	r2, [pc, #164]	@ (8003338 <HAL_DMA_IRQHandler+0x400>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d040      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a27      	ldr	r2, [pc, #156]	@ (800333c <HAL_DMA_IRQHandler+0x404>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d03b      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a26      	ldr	r2, [pc, #152]	@ (8003340 <HAL_DMA_IRQHandler+0x408>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d036      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a24      	ldr	r2, [pc, #144]	@ (8003344 <HAL_DMA_IRQHandler+0x40c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a23      	ldr	r2, [pc, #140]	@ (8003348 <HAL_DMA_IRQHandler+0x410>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d02c      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a21      	ldr	r2, [pc, #132]	@ (800334c <HAL_DMA_IRQHandler+0x414>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d027      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a20      	ldr	r2, [pc, #128]	@ (8003350 <HAL_DMA_IRQHandler+0x418>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003354 <HAL_DMA_IRQHandler+0x41c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01d      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003358 <HAL_DMA_IRQHandler+0x420>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d018      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1b      	ldr	r2, [pc, #108]	@ (800335c <HAL_DMA_IRQHandler+0x424>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003360 <HAL_DMA_IRQHandler+0x428>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00e      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a18      	ldr	r2, [pc, #96]	@ (8003364 <HAL_DMA_IRQHandler+0x42c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d009      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a17      	ldr	r2, [pc, #92]	@ (8003368 <HAL_DMA_IRQHandler+0x430>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d004      	beq.n	800331a <HAL_DMA_IRQHandler+0x3e2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a15      	ldr	r2, [pc, #84]	@ (800336c <HAL_DMA_IRQHandler+0x434>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d12a      	bne.n	8003370 <HAL_DMA_IRQHandler+0x438>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e023      	b.n	8003378 <HAL_DMA_IRQHandler+0x440>
 8003330:	40020010 	.word	0x40020010
 8003334:	40020028 	.word	0x40020028
 8003338:	40020040 	.word	0x40020040
 800333c:	40020058 	.word	0x40020058
 8003340:	40020070 	.word	0x40020070
 8003344:	40020088 	.word	0x40020088
 8003348:	400200a0 	.word	0x400200a0
 800334c:	400200b8 	.word	0x400200b8
 8003350:	40020410 	.word	0x40020410
 8003354:	40020428 	.word	0x40020428
 8003358:	40020440 	.word	0x40020440
 800335c:	40020458 	.word	0x40020458
 8003360:	40020470 	.word	0x40020470
 8003364:	40020488 	.word	0x40020488
 8003368:	400204a0 	.word	0x400204a0
 800336c:	400204b8 	.word	0x400204b8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00d      	beq.n	8003398 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2204      	movs	r2, #4
 8003386:	409a      	lsls	r2, r3
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2210      	movs	r2, #16
 80033a2:	409a      	lsls	r2, r3
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80a6 	beq.w	80034fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a85      	ldr	r2, [pc, #532]	@ (80035c8 <HAL_DMA_IRQHandler+0x690>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d04a      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a83      	ldr	r2, [pc, #524]	@ (80035cc <HAL_DMA_IRQHandler+0x694>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d045      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a82      	ldr	r2, [pc, #520]	@ (80035d0 <HAL_DMA_IRQHandler+0x698>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d040      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a80      	ldr	r2, [pc, #512]	@ (80035d4 <HAL_DMA_IRQHandler+0x69c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d03b      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7f      	ldr	r2, [pc, #508]	@ (80035d8 <HAL_DMA_IRQHandler+0x6a0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d036      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a7d      	ldr	r2, [pc, #500]	@ (80035dc <HAL_DMA_IRQHandler+0x6a4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d031      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7c      	ldr	r2, [pc, #496]	@ (80035e0 <HAL_DMA_IRQHandler+0x6a8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d02c      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a7a      	ldr	r2, [pc, #488]	@ (80035e4 <HAL_DMA_IRQHandler+0x6ac>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d027      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a79      	ldr	r2, [pc, #484]	@ (80035e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a77      	ldr	r2, [pc, #476]	@ (80035ec <HAL_DMA_IRQHandler+0x6b4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01d      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a76      	ldr	r2, [pc, #472]	@ (80035f0 <HAL_DMA_IRQHandler+0x6b8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d018      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a74      	ldr	r2, [pc, #464]	@ (80035f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a73      	ldr	r2, [pc, #460]	@ (80035f8 <HAL_DMA_IRQHandler+0x6c0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a71      	ldr	r2, [pc, #452]	@ (80035fc <HAL_DMA_IRQHandler+0x6c4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a70      	ldr	r2, [pc, #448]	@ (8003600 <HAL_DMA_IRQHandler+0x6c8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_DMA_IRQHandler+0x516>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6e      	ldr	r2, [pc, #440]	@ (8003604 <HAL_DMA_IRQHandler+0x6cc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10a      	bne.n	8003464 <HAL_DMA_IRQHandler+0x52c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e009      	b.n	8003478 <HAL_DMA_IRQHandler+0x540>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d03e      	beq.n	80034fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2210      	movs	r2, #16
 8003486:	409a      	lsls	r2, r3
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d018      	beq.n	80034cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d108      	bne.n	80034ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d024      	beq.n	80034fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e01f      	b.n	80034fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01b      	beq.n	80034fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
 80034ca:	e016      	b.n	80034fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0208 	bic.w	r2, r2, #8
 80034e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2220      	movs	r2, #32
 8003504:	409a      	lsls	r2, r3
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8110 	beq.w	8003730 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a2c      	ldr	r2, [pc, #176]	@ (80035c8 <HAL_DMA_IRQHandler+0x690>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d04a      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2b      	ldr	r2, [pc, #172]	@ (80035cc <HAL_DMA_IRQHandler+0x694>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d045      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a29      	ldr	r2, [pc, #164]	@ (80035d0 <HAL_DMA_IRQHandler+0x698>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d040      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a28      	ldr	r2, [pc, #160]	@ (80035d4 <HAL_DMA_IRQHandler+0x69c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d03b      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a26      	ldr	r2, [pc, #152]	@ (80035d8 <HAL_DMA_IRQHandler+0x6a0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d036      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a25      	ldr	r2, [pc, #148]	@ (80035dc <HAL_DMA_IRQHandler+0x6a4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d031      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a23      	ldr	r2, [pc, #140]	@ (80035e0 <HAL_DMA_IRQHandler+0x6a8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02c      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a22      	ldr	r2, [pc, #136]	@ (80035e4 <HAL_DMA_IRQHandler+0x6ac>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d027      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a20      	ldr	r2, [pc, #128]	@ (80035e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d022      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <HAL_DMA_IRQHandler+0x6b4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d01d      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1d      	ldr	r2, [pc, #116]	@ (80035f0 <HAL_DMA_IRQHandler+0x6b8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d018      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1c      	ldr	r2, [pc, #112]	@ (80035f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1a      	ldr	r2, [pc, #104]	@ (80035f8 <HAL_DMA_IRQHandler+0x6c0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00e      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <HAL_DMA_IRQHandler+0x6c4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d009      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a17      	ldr	r2, [pc, #92]	@ (8003600 <HAL_DMA_IRQHandler+0x6c8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x678>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a16      	ldr	r2, [pc, #88]	@ (8003604 <HAL_DMA_IRQHandler+0x6cc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d12b      	bne.n	8003608 <HAL_DMA_IRQHandler+0x6d0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e02a      	b.n	800361c <HAL_DMA_IRQHandler+0x6e4>
 80035c6:	bf00      	nop
 80035c8:	40020010 	.word	0x40020010
 80035cc:	40020028 	.word	0x40020028
 80035d0:	40020040 	.word	0x40020040
 80035d4:	40020058 	.word	0x40020058
 80035d8:	40020070 	.word	0x40020070
 80035dc:	40020088 	.word	0x40020088
 80035e0:	400200a0 	.word	0x400200a0
 80035e4:	400200b8 	.word	0x400200b8
 80035e8:	40020410 	.word	0x40020410
 80035ec:	40020428 	.word	0x40020428
 80035f0:	40020440 	.word	0x40020440
 80035f4:	40020458 	.word	0x40020458
 80035f8:	40020470 	.word	0x40020470
 80035fc:	40020488 	.word	0x40020488
 8003600:	400204a0 	.word	0x400204a0
 8003604:	400204b8 	.word	0x400204b8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	bf14      	ite	ne
 8003616:	2301      	movne	r3, #1
 8003618:	2300      	moveq	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 8087 	beq.w	8003730 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2220      	movs	r2, #32
 800362c:	409a      	lsls	r2, r3
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b04      	cmp	r3, #4
 800363c:	d139      	bne.n	80036b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0216 	bic.w	r2, r2, #22
 800364c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800365c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <HAL_DMA_IRQHandler+0x736>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0208 	bic.w	r2, r2, #8
 800367c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	223f      	movs	r2, #63	@ 0x3f
 8003688:	409a      	lsls	r2, r3
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 834a 	beq.w	8003d3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
          }
          return;
 80036b0:	e344      	b.n	8003d3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d018      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d108      	bne.n	80036e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d02c      	beq.n	8003730 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
 80036de:	e027      	b.n	8003730 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d023      	beq.n	8003730 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
 80036f0:	e01e      	b.n	8003730 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10f      	bne.n	8003720 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0210 	bic.w	r2, r2, #16
 800370e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8306 	beq.w	8003d46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8088 	beq.w	8003858 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2204      	movs	r2, #4
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a7a      	ldr	r2, [pc, #488]	@ (8003940 <HAL_DMA_IRQHandler+0xa08>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d04a      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a79      	ldr	r2, [pc, #484]	@ (8003944 <HAL_DMA_IRQHandler+0xa0c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d045      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a77      	ldr	r2, [pc, #476]	@ (8003948 <HAL_DMA_IRQHandler+0xa10>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d040      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a76      	ldr	r2, [pc, #472]	@ (800394c <HAL_DMA_IRQHandler+0xa14>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d03b      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a74      	ldr	r2, [pc, #464]	@ (8003950 <HAL_DMA_IRQHandler+0xa18>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d036      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a73      	ldr	r2, [pc, #460]	@ (8003954 <HAL_DMA_IRQHandler+0xa1c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d031      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a71      	ldr	r2, [pc, #452]	@ (8003958 <HAL_DMA_IRQHandler+0xa20>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d02c      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a70      	ldr	r2, [pc, #448]	@ (800395c <HAL_DMA_IRQHandler+0xa24>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d027      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003960 <HAL_DMA_IRQHandler+0xa28>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d022      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6d      	ldr	r2, [pc, #436]	@ (8003964 <HAL_DMA_IRQHandler+0xa2c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d01d      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003968 <HAL_DMA_IRQHandler+0xa30>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d018      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a6a      	ldr	r2, [pc, #424]	@ (800396c <HAL_DMA_IRQHandler+0xa34>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d013      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a68      	ldr	r2, [pc, #416]	@ (8003970 <HAL_DMA_IRQHandler+0xa38>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00e      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a67      	ldr	r2, [pc, #412]	@ (8003974 <HAL_DMA_IRQHandler+0xa3c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d009      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a65      	ldr	r2, [pc, #404]	@ (8003978 <HAL_DMA_IRQHandler+0xa40>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d004      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x8b8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a64      	ldr	r2, [pc, #400]	@ (800397c <HAL_DMA_IRQHandler+0xa44>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d108      	bne.n	8003802 <HAL_DMA_IRQHandler+0x8ca>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e007      	b.n	8003812 <HAL_DMA_IRQHandler+0x8da>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3301      	adds	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381a:	429a      	cmp	r2, r3
 800381c:	d307      	bcc.n	800382e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f2      	bne.n	8003812 <HAL_DMA_IRQHandler+0x8da>
 800382c:	e000      	b.n	8003830 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800382e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2203      	movs	r2, #3
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003846:	e003      	b.n	8003850 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8272 	beq.w	8003d46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
 800386a:	e26c      	b.n	8003d46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a43      	ldr	r2, [pc, #268]	@ (8003980 <HAL_DMA_IRQHandler+0xa48>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d022      	beq.n	80038bc <HAL_DMA_IRQHandler+0x984>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a42      	ldr	r2, [pc, #264]	@ (8003984 <HAL_DMA_IRQHandler+0xa4c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d01d      	beq.n	80038bc <HAL_DMA_IRQHandler+0x984>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a40      	ldr	r2, [pc, #256]	@ (8003988 <HAL_DMA_IRQHandler+0xa50>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d018      	beq.n	80038bc <HAL_DMA_IRQHandler+0x984>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a3f      	ldr	r2, [pc, #252]	@ (800398c <HAL_DMA_IRQHandler+0xa54>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d013      	beq.n	80038bc <HAL_DMA_IRQHandler+0x984>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a3d      	ldr	r2, [pc, #244]	@ (8003990 <HAL_DMA_IRQHandler+0xa58>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00e      	beq.n	80038bc <HAL_DMA_IRQHandler+0x984>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003994 <HAL_DMA_IRQHandler+0xa5c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d009      	beq.n	80038bc <HAL_DMA_IRQHandler+0x984>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003998 <HAL_DMA_IRQHandler+0xa60>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_DMA_IRQHandler+0x984>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a39      	ldr	r2, [pc, #228]	@ (800399c <HAL_DMA_IRQHandler+0xa64>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d101      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x988>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <HAL_DMA_IRQHandler+0x98a>
 80038c0:	2300      	movs	r3, #0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 823f 	beq.w	8003d46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2204      	movs	r2, #4
 80038da:	409a      	lsls	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80cd 	beq.w	8003a80 <HAL_DMA_IRQHandler+0xb48>
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80c7 	beq.w	8003a80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2204      	movs	r2, #4
 80038fc:	409a      	lsls	r2, r3
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d049      	beq.n	80039a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8210 	beq.w	8003d40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003928:	e20a      	b.n	8003d40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8206 	beq.w	8003d40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800393c:	e200      	b.n	8003d40 <HAL_DMA_IRQHandler+0xe08>
 800393e:	bf00      	nop
 8003940:	40020010 	.word	0x40020010
 8003944:	40020028 	.word	0x40020028
 8003948:	40020040 	.word	0x40020040
 800394c:	40020058 	.word	0x40020058
 8003950:	40020070 	.word	0x40020070
 8003954:	40020088 	.word	0x40020088
 8003958:	400200a0 	.word	0x400200a0
 800395c:	400200b8 	.word	0x400200b8
 8003960:	40020410 	.word	0x40020410
 8003964:	40020428 	.word	0x40020428
 8003968:	40020440 	.word	0x40020440
 800396c:	40020458 	.word	0x40020458
 8003970:	40020470 	.word	0x40020470
 8003974:	40020488 	.word	0x40020488
 8003978:	400204a0 	.word	0x400204a0
 800397c:	400204b8 	.word	0x400204b8
 8003980:	58025408 	.word	0x58025408
 8003984:	5802541c 	.word	0x5802541c
 8003988:	58025430 	.word	0x58025430
 800398c:	58025444 	.word	0x58025444
 8003990:	58025458 	.word	0x58025458
 8003994:	5802546c 	.word	0x5802546c
 8003998:	58025480 	.word	0x58025480
 800399c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d160      	bne.n	8003a6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7f      	ldr	r2, [pc, #508]	@ (8003bac <HAL_DMA_IRQHandler+0xc74>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d04a      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a7d      	ldr	r2, [pc, #500]	@ (8003bb0 <HAL_DMA_IRQHandler+0xc78>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d045      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a7c      	ldr	r2, [pc, #496]	@ (8003bb4 <HAL_DMA_IRQHandler+0xc7c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d040      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb8 <HAL_DMA_IRQHandler+0xc80>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d03b      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a79      	ldr	r2, [pc, #484]	@ (8003bbc <HAL_DMA_IRQHandler+0xc84>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d036      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a77      	ldr	r2, [pc, #476]	@ (8003bc0 <HAL_DMA_IRQHandler+0xc88>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d031      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a76      	ldr	r2, [pc, #472]	@ (8003bc4 <HAL_DMA_IRQHandler+0xc8c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d02c      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a74      	ldr	r2, [pc, #464]	@ (8003bc8 <HAL_DMA_IRQHandler+0xc90>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d027      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a73      	ldr	r2, [pc, #460]	@ (8003bcc <HAL_DMA_IRQHandler+0xc94>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d022      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a71      	ldr	r2, [pc, #452]	@ (8003bd0 <HAL_DMA_IRQHandler+0xc98>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01d      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a70      	ldr	r2, [pc, #448]	@ (8003bd4 <HAL_DMA_IRQHandler+0xc9c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd8 <HAL_DMA_IRQHandler+0xca0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6d      	ldr	r2, [pc, #436]	@ (8003bdc <HAL_DMA_IRQHandler+0xca4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a6b      	ldr	r2, [pc, #428]	@ (8003be0 <HAL_DMA_IRQHandler+0xca8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6a      	ldr	r2, [pc, #424]	@ (8003be4 <HAL_DMA_IRQHandler+0xcac>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xb12>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a68      	ldr	r2, [pc, #416]	@ (8003be8 <HAL_DMA_IRQHandler+0xcb0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d108      	bne.n	8003a5c <HAL_DMA_IRQHandler+0xb24>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0208 	bic.w	r2, r2, #8
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e007      	b.n	8003a6c <HAL_DMA_IRQHandler+0xb34>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8165 	beq.w	8003d40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a7e:	e15f      	b.n	8003d40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2202      	movs	r2, #2
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80c5 	beq.w	8003c20 <HAL_DMA_IRQHandler+0xce8>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80bf 	beq.w	8003c20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2202      	movs	r2, #2
 8003aac:	409a      	lsls	r2, r3
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d018      	beq.n	8003aee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 813a 	beq.w	8003d44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ad8:	e134      	b.n	8003d44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8130 	beq.w	8003d44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aec:	e12a      	b.n	8003d44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 8089 	bne.w	8003c0c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2b      	ldr	r2, [pc, #172]	@ (8003bac <HAL_DMA_IRQHandler+0xc74>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d04a      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a29      	ldr	r2, [pc, #164]	@ (8003bb0 <HAL_DMA_IRQHandler+0xc78>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d045      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a28      	ldr	r2, [pc, #160]	@ (8003bb4 <HAL_DMA_IRQHandler+0xc7c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d040      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a26      	ldr	r2, [pc, #152]	@ (8003bb8 <HAL_DMA_IRQHandler+0xc80>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d03b      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a25      	ldr	r2, [pc, #148]	@ (8003bbc <HAL_DMA_IRQHandler+0xc84>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d036      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a23      	ldr	r2, [pc, #140]	@ (8003bc0 <HAL_DMA_IRQHandler+0xc88>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d031      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a22      	ldr	r2, [pc, #136]	@ (8003bc4 <HAL_DMA_IRQHandler+0xc8c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d02c      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a20      	ldr	r2, [pc, #128]	@ (8003bc8 <HAL_DMA_IRQHandler+0xc90>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d027      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bcc <HAL_DMA_IRQHandler+0xc94>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd0 <HAL_DMA_IRQHandler+0xc98>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01d      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd4 <HAL_DMA_IRQHandler+0xc9c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bd8 <HAL_DMA_IRQHandler+0xca0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a19      	ldr	r2, [pc, #100]	@ (8003bdc <HAL_DMA_IRQHandler+0xca4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a17      	ldr	r2, [pc, #92]	@ (8003be0 <HAL_DMA_IRQHandler+0xca8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a16      	ldr	r2, [pc, #88]	@ (8003be4 <HAL_DMA_IRQHandler+0xcac>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xc62>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <HAL_DMA_IRQHandler+0xcb0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d128      	bne.n	8003bec <HAL_DMA_IRQHandler+0xcb4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0214 	bic.w	r2, r2, #20
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e027      	b.n	8003bfc <HAL_DMA_IRQHandler+0xcc4>
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40020028 	.word	0x40020028
 8003bb4:	40020040 	.word	0x40020040
 8003bb8:	40020058 	.word	0x40020058
 8003bbc:	40020070 	.word	0x40020070
 8003bc0:	40020088 	.word	0x40020088
 8003bc4:	400200a0 	.word	0x400200a0
 8003bc8:	400200b8 	.word	0x400200b8
 8003bcc:	40020410 	.word	0x40020410
 8003bd0:	40020428 	.word	0x40020428
 8003bd4:	40020440 	.word	0x40020440
 8003bd8:	40020458 	.word	0x40020458
 8003bdc:	40020470 	.word	0x40020470
 8003be0:	40020488 	.word	0x40020488
 8003be4:	400204a0 	.word	0x400204a0
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 020a 	bic.w	r2, r2, #10
 8003bfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8097 	beq.w	8003d44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c1e:	e091      	b.n	8003d44 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2208      	movs	r2, #8
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8088 	beq.w	8003d46 <HAL_DMA_IRQHandler+0xe0e>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8082 	beq.w	8003d46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a41      	ldr	r2, [pc, #260]	@ (8003d4c <HAL_DMA_IRQHandler+0xe14>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d04a      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a3f      	ldr	r2, [pc, #252]	@ (8003d50 <HAL_DMA_IRQHandler+0xe18>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d045      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d54 <HAL_DMA_IRQHandler+0xe1c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d040      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a3c      	ldr	r2, [pc, #240]	@ (8003d58 <HAL_DMA_IRQHandler+0xe20>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d03b      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d5c <HAL_DMA_IRQHandler+0xe24>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d036      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a39      	ldr	r2, [pc, #228]	@ (8003d60 <HAL_DMA_IRQHandler+0xe28>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d031      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a38      	ldr	r2, [pc, #224]	@ (8003d64 <HAL_DMA_IRQHandler+0xe2c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d02c      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a36      	ldr	r2, [pc, #216]	@ (8003d68 <HAL_DMA_IRQHandler+0xe30>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d027      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a35      	ldr	r2, [pc, #212]	@ (8003d6c <HAL_DMA_IRQHandler+0xe34>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d022      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a33      	ldr	r2, [pc, #204]	@ (8003d70 <HAL_DMA_IRQHandler+0xe38>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a32      	ldr	r2, [pc, #200]	@ (8003d74 <HAL_DMA_IRQHandler+0xe3c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d018      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a30      	ldr	r2, [pc, #192]	@ (8003d78 <HAL_DMA_IRQHandler+0xe40>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8003d7c <HAL_DMA_IRQHandler+0xe44>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8003d80 <HAL_DMA_IRQHandler+0xe48>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d009      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d84 <HAL_DMA_IRQHandler+0xe4c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xdaa>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8003d88 <HAL_DMA_IRQHandler+0xe50>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d108      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0xdbc>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 021c 	bic.w	r2, r2, #28
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e007      	b.n	8003d04 <HAL_DMA_IRQHandler+0xdcc>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 020e 	bic.w	r2, r2, #14
 8003d02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
 8003d3a:	e004      	b.n	8003d46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d3c:	bf00      	nop
 8003d3e:	e002      	b.n	8003d46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d40:	bf00      	nop
 8003d42:	e000      	b.n	8003d46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d46:	3728      	adds	r7, #40	@ 0x28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40020010 	.word	0x40020010
 8003d50:	40020028 	.word	0x40020028
 8003d54:	40020040 	.word	0x40020040
 8003d58:	40020058 	.word	0x40020058
 8003d5c:	40020070 	.word	0x40020070
 8003d60:	40020088 	.word	0x40020088
 8003d64:	400200a0 	.word	0x400200a0
 8003d68:	400200b8 	.word	0x400200b8
 8003d6c:	40020410 	.word	0x40020410
 8003d70:	40020428 	.word	0x40020428
 8003d74:	40020440 	.word	0x40020440
 8003d78:	40020458 	.word	0x40020458
 8003d7c:	40020470 	.word	0x40020470
 8003d80:	40020488 	.word	0x40020488
 8003d84:	400204a0 	.word	0x400204a0
 8003d88:	400204b8 	.word	0x400204b8

08003d8c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7f      	ldr	r2, [pc, #508]	@ (8003fc0 <DMA_SetConfig+0x21c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d072      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7d      	ldr	r2, [pc, #500]	@ (8003fc4 <DMA_SetConfig+0x220>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d06d      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8003fc8 <DMA_SetConfig+0x224>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d068      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a7a      	ldr	r2, [pc, #488]	@ (8003fcc <DMA_SetConfig+0x228>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d063      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a79      	ldr	r2, [pc, #484]	@ (8003fd0 <DMA_SetConfig+0x22c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d05e      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a77      	ldr	r2, [pc, #476]	@ (8003fd4 <DMA_SetConfig+0x230>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d059      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a76      	ldr	r2, [pc, #472]	@ (8003fd8 <DMA_SetConfig+0x234>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d054      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a74      	ldr	r2, [pc, #464]	@ (8003fdc <DMA_SetConfig+0x238>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d04f      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a73      	ldr	r2, [pc, #460]	@ (8003fe0 <DMA_SetConfig+0x23c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d04a      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a71      	ldr	r2, [pc, #452]	@ (8003fe4 <DMA_SetConfig+0x240>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d045      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a70      	ldr	r2, [pc, #448]	@ (8003fe8 <DMA_SetConfig+0x244>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d040      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6e      	ldr	r2, [pc, #440]	@ (8003fec <DMA_SetConfig+0x248>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d03b      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ff0 <DMA_SetConfig+0x24c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d036      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6b      	ldr	r2, [pc, #428]	@ (8003ff4 <DMA_SetConfig+0x250>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d031      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff8 <DMA_SetConfig+0x254>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d02c      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a68      	ldr	r2, [pc, #416]	@ (8003ffc <DMA_SetConfig+0x258>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d027      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a67      	ldr	r2, [pc, #412]	@ (8004000 <DMA_SetConfig+0x25c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d022      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a65      	ldr	r2, [pc, #404]	@ (8004004 <DMA_SetConfig+0x260>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01d      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a64      	ldr	r2, [pc, #400]	@ (8004008 <DMA_SetConfig+0x264>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d018      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a62      	ldr	r2, [pc, #392]	@ (800400c <DMA_SetConfig+0x268>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a61      	ldr	r2, [pc, #388]	@ (8004010 <DMA_SetConfig+0x26c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a5f      	ldr	r2, [pc, #380]	@ (8004014 <DMA_SetConfig+0x270>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004018 <DMA_SetConfig+0x274>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <DMA_SetConfig+0x10a>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a5c      	ldr	r2, [pc, #368]	@ (800401c <DMA_SetConfig+0x278>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d101      	bne.n	8003eb2 <DMA_SetConfig+0x10e>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <DMA_SetConfig+0x110>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00d      	beq.n	8003ed4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ec0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ed2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a39      	ldr	r2, [pc, #228]	@ (8003fc0 <DMA_SetConfig+0x21c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d04a      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a38      	ldr	r2, [pc, #224]	@ (8003fc4 <DMA_SetConfig+0x220>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d045      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a36      	ldr	r2, [pc, #216]	@ (8003fc8 <DMA_SetConfig+0x224>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d040      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a35      	ldr	r2, [pc, #212]	@ (8003fcc <DMA_SetConfig+0x228>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d03b      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a33      	ldr	r2, [pc, #204]	@ (8003fd0 <DMA_SetConfig+0x22c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d036      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a32      	ldr	r2, [pc, #200]	@ (8003fd4 <DMA_SetConfig+0x230>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d031      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a30      	ldr	r2, [pc, #192]	@ (8003fd8 <DMA_SetConfig+0x234>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02c      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003fdc <DMA_SetConfig+0x238>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d027      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe0 <DMA_SetConfig+0x23c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d022      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe4 <DMA_SetConfig+0x240>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d01d      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe8 <DMA_SetConfig+0x244>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a29      	ldr	r2, [pc, #164]	@ (8003fec <DMA_SetConfig+0x248>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d013      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a27      	ldr	r2, [pc, #156]	@ (8003ff0 <DMA_SetConfig+0x24c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a26      	ldr	r2, [pc, #152]	@ (8003ff4 <DMA_SetConfig+0x250>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a24      	ldr	r2, [pc, #144]	@ (8003ff8 <DMA_SetConfig+0x254>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <DMA_SetConfig+0x1d0>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a23      	ldr	r2, [pc, #140]	@ (8003ffc <DMA_SetConfig+0x258>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <DMA_SetConfig+0x1d4>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <DMA_SetConfig+0x1d6>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d059      	beq.n	8004032 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	223f      	movs	r2, #63	@ 0x3f
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b40      	cmp	r3, #64	@ 0x40
 8003fac:	d138      	bne.n	8004020 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fbe:	e086      	b.n	80040ce <DMA_SetConfig+0x32a>
 8003fc0:	40020010 	.word	0x40020010
 8003fc4:	40020028 	.word	0x40020028
 8003fc8:	40020040 	.word	0x40020040
 8003fcc:	40020058 	.word	0x40020058
 8003fd0:	40020070 	.word	0x40020070
 8003fd4:	40020088 	.word	0x40020088
 8003fd8:	400200a0 	.word	0x400200a0
 8003fdc:	400200b8 	.word	0x400200b8
 8003fe0:	40020410 	.word	0x40020410
 8003fe4:	40020428 	.word	0x40020428
 8003fe8:	40020440 	.word	0x40020440
 8003fec:	40020458 	.word	0x40020458
 8003ff0:	40020470 	.word	0x40020470
 8003ff4:	40020488 	.word	0x40020488
 8003ff8:	400204a0 	.word	0x400204a0
 8003ffc:	400204b8 	.word	0x400204b8
 8004000:	58025408 	.word	0x58025408
 8004004:	5802541c 	.word	0x5802541c
 8004008:	58025430 	.word	0x58025430
 800400c:	58025444 	.word	0x58025444
 8004010:	58025458 	.word	0x58025458
 8004014:	5802546c 	.word	0x5802546c
 8004018:	58025480 	.word	0x58025480
 800401c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]
}
 8004030:	e04d      	b.n	80040ce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a29      	ldr	r2, [pc, #164]	@ (80040dc <DMA_SetConfig+0x338>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d022      	beq.n	8004082 <DMA_SetConfig+0x2de>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a27      	ldr	r2, [pc, #156]	@ (80040e0 <DMA_SetConfig+0x33c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01d      	beq.n	8004082 <DMA_SetConfig+0x2de>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a26      	ldr	r2, [pc, #152]	@ (80040e4 <DMA_SetConfig+0x340>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <DMA_SetConfig+0x2de>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a24      	ldr	r2, [pc, #144]	@ (80040e8 <DMA_SetConfig+0x344>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <DMA_SetConfig+0x2de>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a23      	ldr	r2, [pc, #140]	@ (80040ec <DMA_SetConfig+0x348>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <DMA_SetConfig+0x2de>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a21      	ldr	r2, [pc, #132]	@ (80040f0 <DMA_SetConfig+0x34c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <DMA_SetConfig+0x2de>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a20      	ldr	r2, [pc, #128]	@ (80040f4 <DMA_SetConfig+0x350>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <DMA_SetConfig+0x2de>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1e      	ldr	r2, [pc, #120]	@ (80040f8 <DMA_SetConfig+0x354>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <DMA_SetConfig+0x2e2>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <DMA_SetConfig+0x2e4>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2201      	movs	r2, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
 80040aa:	d108      	bne.n	80040be <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	60da      	str	r2, [r3, #12]
}
 80040bc:	e007      	b.n	80040ce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	58025408 	.word	0x58025408
 80040e0:	5802541c 	.word	0x5802541c
 80040e4:	58025430 	.word	0x58025430
 80040e8:	58025444 	.word	0x58025444
 80040ec:	58025458 	.word	0x58025458
 80040f0:	5802546c 	.word	0x5802546c
 80040f4:	58025480 	.word	0x58025480
 80040f8:	58025494 	.word	0x58025494

080040fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a42      	ldr	r2, [pc, #264]	@ (8004214 <DMA_CalcBaseAndBitshift+0x118>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d04a      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a41      	ldr	r2, [pc, #260]	@ (8004218 <DMA_CalcBaseAndBitshift+0x11c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d045      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a3f      	ldr	r2, [pc, #252]	@ (800421c <DMA_CalcBaseAndBitshift+0x120>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d040      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3e      	ldr	r2, [pc, #248]	@ (8004220 <DMA_CalcBaseAndBitshift+0x124>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d03b      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a3c      	ldr	r2, [pc, #240]	@ (8004224 <DMA_CalcBaseAndBitshift+0x128>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d036      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a3b      	ldr	r2, [pc, #236]	@ (8004228 <DMA_CalcBaseAndBitshift+0x12c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d031      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a39      	ldr	r2, [pc, #228]	@ (800422c <DMA_CalcBaseAndBitshift+0x130>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d02c      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a38      	ldr	r2, [pc, #224]	@ (8004230 <DMA_CalcBaseAndBitshift+0x134>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d027      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a36      	ldr	r2, [pc, #216]	@ (8004234 <DMA_CalcBaseAndBitshift+0x138>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d022      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a35      	ldr	r2, [pc, #212]	@ (8004238 <DMA_CalcBaseAndBitshift+0x13c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d01d      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a33      	ldr	r2, [pc, #204]	@ (800423c <DMA_CalcBaseAndBitshift+0x140>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a32      	ldr	r2, [pc, #200]	@ (8004240 <DMA_CalcBaseAndBitshift+0x144>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a30      	ldr	r2, [pc, #192]	@ (8004244 <DMA_CalcBaseAndBitshift+0x148>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a2f      	ldr	r2, [pc, #188]	@ (8004248 <DMA_CalcBaseAndBitshift+0x14c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2d      	ldr	r2, [pc, #180]	@ (800424c <DMA_CalcBaseAndBitshift+0x150>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <DMA_CalcBaseAndBitshift+0xa8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2c      	ldr	r2, [pc, #176]	@ (8004250 <DMA_CalcBaseAndBitshift+0x154>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <DMA_CalcBaseAndBitshift+0xac>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <DMA_CalcBaseAndBitshift+0xae>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d024      	beq.n	80041f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	3b10      	subs	r3, #16
 80041b6:	4a27      	ldr	r2, [pc, #156]	@ (8004254 <DMA_CalcBaseAndBitshift+0x158>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	4a24      	ldr	r2, [pc, #144]	@ (8004258 <DMA_CalcBaseAndBitshift+0x15c>)
 80041c8:	5cd3      	ldrb	r3, [r2, r3]
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d908      	bls.n	80041e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	4b1f      	ldr	r3, [pc, #124]	@ (800425c <DMA_CalcBaseAndBitshift+0x160>)
 80041de:	4013      	ands	r3, r2
 80041e0:	1d1a      	adds	r2, r3, #4
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80041e6:	e00d      	b.n	8004204 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <DMA_CalcBaseAndBitshift+0x160>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80041f6:	e005      	b.n	8004204 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40020010 	.word	0x40020010
 8004218:	40020028 	.word	0x40020028
 800421c:	40020040 	.word	0x40020040
 8004220:	40020058 	.word	0x40020058
 8004224:	40020070 	.word	0x40020070
 8004228:	40020088 	.word	0x40020088
 800422c:	400200a0 	.word	0x400200a0
 8004230:	400200b8 	.word	0x400200b8
 8004234:	40020410 	.word	0x40020410
 8004238:	40020428 	.word	0x40020428
 800423c:	40020440 	.word	0x40020440
 8004240:	40020458 	.word	0x40020458
 8004244:	40020470 	.word	0x40020470
 8004248:	40020488 	.word	0x40020488
 800424c:	400204a0 	.word	0x400204a0
 8004250:	400204b8 	.word	0x400204b8
 8004254:	aaaaaaab 	.word	0xaaaaaaab
 8004258:	0800db24 	.word	0x0800db24
 800425c:	fffffc00 	.word	0xfffffc00

08004260 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d120      	bne.n	80042b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	2b03      	cmp	r3, #3
 800427a:	d858      	bhi.n	800432e <DMA_CheckFifoParam+0xce>
 800427c:	a201      	add	r2, pc, #4	@ (adr r2, 8004284 <DMA_CheckFifoParam+0x24>)
 800427e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004282:	bf00      	nop
 8004284:	08004295 	.word	0x08004295
 8004288:	080042a7 	.word	0x080042a7
 800428c:	08004295 	.word	0x08004295
 8004290:	0800432f 	.word	0x0800432f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d048      	beq.n	8004332 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042a4:	e045      	b.n	8004332 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042ae:	d142      	bne.n	8004336 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042b4:	e03f      	b.n	8004336 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042be:	d123      	bne.n	8004308 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d838      	bhi.n	800433a <DMA_CheckFifoParam+0xda>
 80042c8:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <DMA_CheckFifoParam+0x70>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	080042e7 	.word	0x080042e7
 80042d8:	080042e1 	.word	0x080042e1
 80042dc:	080042f9 	.word	0x080042f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
        break;
 80042e4:	e030      	b.n	8004348 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d025      	beq.n	800433e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042f6:	e022      	b.n	800433e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004300:	d11f      	bne.n	8004342 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004306:	e01c      	b.n	8004342 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	2b02      	cmp	r3, #2
 800430e:	d902      	bls.n	8004316 <DMA_CheckFifoParam+0xb6>
 8004310:	2b03      	cmp	r3, #3
 8004312:	d003      	beq.n	800431c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004314:	e018      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
        break;
 800431a:	e015      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00e      	beq.n	8004346 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
    break;
 800432c:	e00b      	b.n	8004346 <DMA_CheckFifoParam+0xe6>
        break;
 800432e:	bf00      	nop
 8004330:	e00a      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
        break;
 8004332:	bf00      	nop
 8004334:	e008      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
        break;
 8004336:	bf00      	nop
 8004338:	e006      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
        break;
 800433a:	bf00      	nop
 800433c:	e004      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
        break;
 800433e:	bf00      	nop
 8004340:	e002      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
        break;
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <DMA_CheckFifoParam+0xe8>
    break;
 8004346:	bf00      	nop
    }
  }

  return status;
 8004348:	7bfb      	ldrb	r3, [r7, #15]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop

08004358 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a38      	ldr	r2, [pc, #224]	@ (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d022      	beq.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a36      	ldr	r2, [pc, #216]	@ (8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01d      	beq.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a35      	ldr	r2, [pc, #212]	@ (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d018      	beq.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a33      	ldr	r2, [pc, #204]	@ (8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a32      	ldr	r2, [pc, #200]	@ (800445c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a30      	ldr	r2, [pc, #192]	@ (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d009      	beq.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004468 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80043ba:	2300      	movs	r3, #0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01a      	beq.n	80043f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	3b08      	subs	r3, #8
 80043c8:	4a28      	ldr	r2, [pc, #160]	@ (800446c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4b26      	ldr	r3, [pc, #152]	@ (8004470 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	461a      	mov	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a24      	ldr	r2, [pc, #144]	@ (8004474 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	2201      	movs	r2, #1
 80043ee:	409a      	lsls	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80043f4:	e024      	b.n	8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	3b10      	subs	r3, #16
 80043fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004478 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a1c      	ldr	r2, [pc, #112]	@ (800447c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d806      	bhi.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4a1b      	ldr	r2, [pc, #108]	@ (8004480 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d902      	bls.n	800441e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3308      	adds	r3, #8
 800441c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4b18      	ldr	r3, [pc, #96]	@ (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	461a      	mov	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a16      	ldr	r2, [pc, #88]	@ (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004430:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	2201      	movs	r2, #1
 800443a:	409a      	lsls	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	58025408 	.word	0x58025408
 8004450:	5802541c 	.word	0x5802541c
 8004454:	58025430 	.word	0x58025430
 8004458:	58025444 	.word	0x58025444
 800445c:	58025458 	.word	0x58025458
 8004460:	5802546c 	.word	0x5802546c
 8004464:	58025480 	.word	0x58025480
 8004468:	58025494 	.word	0x58025494
 800446c:	cccccccd 	.word	0xcccccccd
 8004470:	16009600 	.word	0x16009600
 8004474:	58025880 	.word	0x58025880
 8004478:	aaaaaaab 	.word	0xaaaaaaab
 800447c:	400204b8 	.word	0x400204b8
 8004480:	4002040f 	.word	0x4002040f
 8004484:	10008200 	.word	0x10008200
 8004488:	40020880 	.word	0x40020880

0800448c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d04a      	beq.n	8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d847      	bhi.n	8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a25      	ldr	r2, [pc, #148]	@ (8004544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d022      	beq.n	80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a24      	ldr	r2, [pc, #144]	@ (8004548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d01d      	beq.n	80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a22      	ldr	r2, [pc, #136]	@ (800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d018      	beq.n	80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a21      	ldr	r2, [pc, #132]	@ (8004550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00e      	beq.n	80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1e      	ldr	r2, [pc, #120]	@ (8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d009      	beq.n	80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1c      	ldr	r2, [pc, #112]	@ (800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d101      	bne.n	80044fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4b17      	ldr	r3, [pc, #92]	@ (8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	461a      	mov	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a15      	ldr	r2, [pc, #84]	@ (8004568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004514:	671a      	str	r2, [r3, #112]	@ 0x70
 8004516:	e009      	b.n	800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4b14      	ldr	r3, [pc, #80]	@ (800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	461a      	mov	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a11      	ldr	r2, [pc, #68]	@ (8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800452a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3b01      	subs	r3, #1
 8004530:	2201      	movs	r2, #1
 8004532:	409a      	lsls	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	58025408 	.word	0x58025408
 8004548:	5802541c 	.word	0x5802541c
 800454c:	58025430 	.word	0x58025430
 8004550:	58025444 	.word	0x58025444
 8004554:	58025458 	.word	0x58025458
 8004558:	5802546c 	.word	0x5802546c
 800455c:	58025480 	.word	0x58025480
 8004560:	58025494 	.word	0x58025494
 8004564:	1600963f 	.word	0x1600963f
 8004568:	58025940 	.word	0x58025940
 800456c:	1000823f 	.word	0x1000823f
 8004570:	40020940 	.word	0x40020940

08004574 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004574:	b480      	push	{r7}
 8004576:	b089      	sub	sp, #36	@ 0x24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004582:	4b86      	ldr	r3, [pc, #536]	@ (800479c <HAL_GPIO_Init+0x228>)
 8004584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004586:	e18c      	b.n	80048a2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2101      	movs	r1, #1
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 817e 	beq.w	800489c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d005      	beq.n	80045b8 <HAL_GPIO_Init+0x44>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d130      	bne.n	800461a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2203      	movs	r2, #3
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ee:	2201      	movs	r2, #1
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	091b      	lsrs	r3, r3, #4
 8004604:	f003 0201 	and.w	r2, r3, #1
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b03      	cmp	r3, #3
 8004624:	d017      	beq.n	8004656 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	2203      	movs	r2, #3
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d123      	bne.n	80046aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	08da      	lsrs	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3208      	adds	r2, #8
 800466a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	220f      	movs	r2, #15
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	08da      	lsrs	r2, r3, #3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3208      	adds	r2, #8
 80046a4:	69b9      	ldr	r1, [r7, #24]
 80046a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	2203      	movs	r2, #3
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0203 	and.w	r2, r3, #3
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80d8 	beq.w	800489c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ec:	4b2c      	ldr	r3, [pc, #176]	@ (80047a0 <HAL_GPIO_Init+0x22c>)
 80046ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046f2:	4a2b      	ldr	r2, [pc, #172]	@ (80047a0 <HAL_GPIO_Init+0x22c>)
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80046fc:	4b28      	ldr	r3, [pc, #160]	@ (80047a0 <HAL_GPIO_Init+0x22c>)
 80046fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800470a:	4a26      	ldr	r2, [pc, #152]	@ (80047a4 <HAL_GPIO_Init+0x230>)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	3302      	adds	r3, #2
 8004712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	220f      	movs	r2, #15
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1d      	ldr	r2, [pc, #116]	@ (80047a8 <HAL_GPIO_Init+0x234>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d04a      	beq.n	80047cc <HAL_GPIO_Init+0x258>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1c      	ldr	r2, [pc, #112]	@ (80047ac <HAL_GPIO_Init+0x238>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02b      	beq.n	8004796 <HAL_GPIO_Init+0x222>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1b      	ldr	r2, [pc, #108]	@ (80047b0 <HAL_GPIO_Init+0x23c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d025      	beq.n	8004792 <HAL_GPIO_Init+0x21e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1a      	ldr	r2, [pc, #104]	@ (80047b4 <HAL_GPIO_Init+0x240>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01f      	beq.n	800478e <HAL_GPIO_Init+0x21a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <HAL_GPIO_Init+0x244>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d019      	beq.n	800478a <HAL_GPIO_Init+0x216>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a18      	ldr	r2, [pc, #96]	@ (80047bc <HAL_GPIO_Init+0x248>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_GPIO_Init+0x212>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a17      	ldr	r2, [pc, #92]	@ (80047c0 <HAL_GPIO_Init+0x24c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00d      	beq.n	8004782 <HAL_GPIO_Init+0x20e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <HAL_GPIO_Init+0x250>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <HAL_GPIO_Init+0x20a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a15      	ldr	r2, [pc, #84]	@ (80047c8 <HAL_GPIO_Init+0x254>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_GPIO_Init+0x206>
 8004776:	2309      	movs	r3, #9
 8004778:	e029      	b.n	80047ce <HAL_GPIO_Init+0x25a>
 800477a:	230a      	movs	r3, #10
 800477c:	e027      	b.n	80047ce <HAL_GPIO_Init+0x25a>
 800477e:	2307      	movs	r3, #7
 8004780:	e025      	b.n	80047ce <HAL_GPIO_Init+0x25a>
 8004782:	2306      	movs	r3, #6
 8004784:	e023      	b.n	80047ce <HAL_GPIO_Init+0x25a>
 8004786:	2305      	movs	r3, #5
 8004788:	e021      	b.n	80047ce <HAL_GPIO_Init+0x25a>
 800478a:	2304      	movs	r3, #4
 800478c:	e01f      	b.n	80047ce <HAL_GPIO_Init+0x25a>
 800478e:	2303      	movs	r3, #3
 8004790:	e01d      	b.n	80047ce <HAL_GPIO_Init+0x25a>
 8004792:	2302      	movs	r3, #2
 8004794:	e01b      	b.n	80047ce <HAL_GPIO_Init+0x25a>
 8004796:	2301      	movs	r3, #1
 8004798:	e019      	b.n	80047ce <HAL_GPIO_Init+0x25a>
 800479a:	bf00      	nop
 800479c:	58000080 	.word	0x58000080
 80047a0:	58024400 	.word	0x58024400
 80047a4:	58000400 	.word	0x58000400
 80047a8:	58020000 	.word	0x58020000
 80047ac:	58020400 	.word	0x58020400
 80047b0:	58020800 	.word	0x58020800
 80047b4:	58020c00 	.word	0x58020c00
 80047b8:	58021000 	.word	0x58021000
 80047bc:	58021400 	.word	0x58021400
 80047c0:	58021800 	.word	0x58021800
 80047c4:	58021c00 	.word	0x58021c00
 80047c8:	58022400 	.word	0x58022400
 80047cc:	2300      	movs	r3, #0
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	f002 0203 	and.w	r2, r2, #3
 80047d4:	0092      	lsls	r2, r2, #2
 80047d6:	4093      	lsls	r3, r2
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047de:	4938      	ldr	r1, [pc, #224]	@ (80048c0 <HAL_GPIO_Init+0x34c>)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	3302      	adds	r3, #2
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800481a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	3301      	adds	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f ae6b 	bne.w	8004588 <HAL_GPIO_Init+0x14>
  }
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	3724      	adds	r7, #36	@ 0x24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	58000400 	.word	0x58000400

080048c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80048cc:	4b29      	ldr	r3, [pc, #164]	@ (8004974 <HAL_PWREx_ConfigSupply+0xb0>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	2b06      	cmp	r3, #6
 80048d6:	d00a      	beq.n	80048ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048d8:	4b26      	ldr	r3, [pc, #152]	@ (8004974 <HAL_PWREx_ConfigSupply+0xb0>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d001      	beq.n	80048ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e03f      	b.n	800496a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e03d      	b.n	800496a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048ee:	4b21      	ldr	r3, [pc, #132]	@ (8004974 <HAL_PWREx_ConfigSupply+0xb0>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80048f6:	491f      	ldr	r1, [pc, #124]	@ (8004974 <HAL_PWREx_ConfigSupply+0xb0>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048fe:	f7fc fe91 	bl	8001624 <HAL_GetTick>
 8004902:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004904:	e009      	b.n	800491a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004906:	f7fc fe8d 	bl	8001624 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004914:	d901      	bls.n	800491a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e027      	b.n	800496a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800491a:	4b16      	ldr	r3, [pc, #88]	@ (8004974 <HAL_PWREx_ConfigSupply+0xb0>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004926:	d1ee      	bne.n	8004906 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b1e      	cmp	r3, #30
 800492c:	d008      	beq.n	8004940 <HAL_PWREx_ConfigSupply+0x7c>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b2e      	cmp	r3, #46	@ 0x2e
 8004932:	d005      	beq.n	8004940 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b1d      	cmp	r3, #29
 8004938:	d002      	beq.n	8004940 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b2d      	cmp	r3, #45	@ 0x2d
 800493e:	d113      	bne.n	8004968 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004940:	f7fc fe70 	bl	8001624 <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004946:	e009      	b.n	800495c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004948:	f7fc fe6c 	bl	8001624 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004956:	d901      	bls.n	800495c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e006      	b.n	800496a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_PWREx_ConfigSupply+0xb0>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0311 	and.w	r3, r3, #17
 8004964:	2b11      	cmp	r3, #17
 8004966:	d1ef      	bne.n	8004948 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	58024800 	.word	0x58024800

08004978 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08c      	sub	sp, #48	@ 0x30
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e3c8      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8087 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004998:	4b88      	ldr	r3, [pc, #544]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049a2:	4b86      	ldr	r3, [pc, #536]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 80049a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d007      	beq.n	80049be <HAL_RCC_OscConfig+0x46>
 80049ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b0:	2b18      	cmp	r3, #24
 80049b2:	d110      	bne.n	80049d6 <HAL_RCC_OscConfig+0x5e>
 80049b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d10b      	bne.n	80049d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049be:	4b7f      	ldr	r3, [pc, #508]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d06c      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x12c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d168      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e3a2      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049de:	d106      	bne.n	80049ee <HAL_RCC_OscConfig+0x76>
 80049e0:	4b76      	ldr	r3, [pc, #472]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a75      	ldr	r2, [pc, #468]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e02e      	b.n	8004a4c <HAL_RCC_OscConfig+0xd4>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x98>
 80049f6:	4b71      	ldr	r3, [pc, #452]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a70      	ldr	r2, [pc, #448]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 80049fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	4b6e      	ldr	r3, [pc, #440]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a6d      	ldr	r2, [pc, #436]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e01d      	b.n	8004a4c <HAL_RCC_OscConfig+0xd4>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0xbc>
 8004a1a:	4b68      	ldr	r3, [pc, #416]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a67      	ldr	r2, [pc, #412]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b65      	ldr	r3, [pc, #404]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a64      	ldr	r2, [pc, #400]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0xd4>
 8004a34:	4b61      	ldr	r3, [pc, #388]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a60      	ldr	r2, [pc, #384]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b5e      	ldr	r3, [pc, #376]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a5d      	ldr	r2, [pc, #372]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fc fde6 	bl	8001624 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fc fde2 	bl	8001624 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e356      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a6e:	4b53      	ldr	r3, [pc, #332]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0xe4>
 8004a7a:	e014      	b.n	8004aa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fc fdd2 	bl	8001624 <HAL_GetTick>
 8004a80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fc fdce 	bl	8001624 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	@ 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e342      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a96:	4b49      	ldr	r3, [pc, #292]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x10c>
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 808c 	beq.w	8004bcc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab4:	4b41      	ldr	r3, [pc, #260]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004abc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004abe:	4b3f      	ldr	r3, [pc, #252]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_RCC_OscConfig+0x162>
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	2b18      	cmp	r3, #24
 8004ace:	d137      	bne.n	8004b40 <HAL_RCC_OscConfig+0x1c8>
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d132      	bne.n	8004b40 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ada:	4b38      	ldr	r3, [pc, #224]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_RCC_OscConfig+0x17a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e314      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004af2:	4b32      	ldr	r3, [pc, #200]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 0219 	bic.w	r2, r3, #25
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	492f      	ldr	r1, [pc, #188]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fc fd8e 	bl	8001624 <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0c:	f7fc fd8a 	bl	8001624 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e2fe      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b1e:	4b27      	ldr	r3, [pc, #156]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2a:	4b24      	ldr	r3, [pc, #144]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	4920      	ldr	r1, [pc, #128]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b3e:	e045      	b.n	8004bcc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d026      	beq.n	8004b96 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b48:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 0219 	bic.w	r2, r3, #25
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4919      	ldr	r1, [pc, #100]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fc fd63 	bl	8001624 <HAL_GetTick>
 8004b5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b62:	f7fc fd5f 	bl	8001624 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e2d3      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b74:	4b11      	ldr	r3, [pc, #68]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b80:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	490b      	ldr	r1, [pc, #44]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	604b      	str	r3, [r1, #4]
 8004b94:	e01a      	b.n	8004bcc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b96:	4b09      	ldr	r3, [pc, #36]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a08      	ldr	r2, [pc, #32]	@ (8004bbc <HAL_RCC_OscConfig+0x244>)
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fc fd3f 	bl	8001624 <HAL_GetTick>
 8004ba6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004baa:	f7fc fd3b 	bl	8001624 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d903      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e2af      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
 8004bbc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bc0:	4b96      	ldr	r3, [pc, #600]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ee      	bne.n	8004baa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d06a      	beq.n	8004cae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bd8:	4b90      	ldr	r3, [pc, #576]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004be0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004be2:	4b8e      	ldr	r3, [pc, #568]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d007      	beq.n	8004bfe <HAL_RCC_OscConfig+0x286>
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	2b18      	cmp	r3, #24
 8004bf2:	d11b      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2b4>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d116      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bfe:	4b87      	ldr	r3, [pc, #540]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCC_OscConfig+0x29e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	2b80      	cmp	r3, #128	@ 0x80
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e282      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c16:	4b81      	ldr	r3, [pc, #516]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	497d      	ldr	r1, [pc, #500]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c2a:	e040      	b.n	8004cae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d023      	beq.n	8004c7c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c34:	4b79      	ldr	r3, [pc, #484]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a78      	ldr	r2, [pc, #480]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fc fcf0 	bl	8001624 <HAL_GetTick>
 8004c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c48:	f7fc fcec 	bl	8001624 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e260      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c5a:	4b70      	ldr	r3, [pc, #448]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c66:	4b6d      	ldr	r3, [pc, #436]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	4969      	ldr	r1, [pc, #420]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60cb      	str	r3, [r1, #12]
 8004c7a:	e018      	b.n	8004cae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c7c:	4b67      	ldr	r3, [pc, #412]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a66      	ldr	r2, [pc, #408]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fc fccc 	bl	8001624 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c90:	f7fc fcc8 	bl	8001624 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e23c      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ca2:	4b5e      	ldr	r3, [pc, #376]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d036      	beq.n	8004d28 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d019      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc2:	4b56      	ldr	r3, [pc, #344]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc6:	4a55      	ldr	r2, [pc, #340]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fc fca9 	bl	8001624 <HAL_GetTick>
 8004cd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fc fca5 	bl	8001624 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e219      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ce8:	4b4c      	ldr	r3, [pc, #304]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x35e>
 8004cf4:	e018      	b.n	8004d28 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf6:	4b49      	ldr	r3, [pc, #292]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cfa:	4a48      	ldr	r2, [pc, #288]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fc fc8f 	bl	8001624 <HAL_GetTick>
 8004d06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fc fc8b 	bl	8001624 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e1ff      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d036      	beq.n	8004da2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d019      	beq.n	8004d70 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d3c:	4b37      	ldr	r3, [pc, #220]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a36      	ldr	r2, [pc, #216]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004d42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d48:	f7fc fc6c 	bl	8001624 <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d50:	f7fc fc68 	bl	8001624 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e1dc      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d62:	4b2e      	ldr	r3, [pc, #184]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x3d8>
 8004d6e:	e018      	b.n	8004da2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d70:	4b2a      	ldr	r3, [pc, #168]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a29      	ldr	r2, [pc, #164]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004d76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d7c:	f7fc fc52 	bl	8001624 <HAL_GetTick>
 8004d80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d84:	f7fc fc4e 	bl	8001624 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e1c2      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d96:	4b21      	ldr	r3, [pc, #132]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8086 	beq.w	8004ebc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004db0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <HAL_RCC_OscConfig+0x4a8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1a      	ldr	r2, [pc, #104]	@ (8004e20 <HAL_RCC_OscConfig+0x4a8>)
 8004db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dbc:	f7fc fc32 	bl	8001624 <HAL_GetTick>
 8004dc0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc4:	f7fc fc2e 	bl	8001624 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	@ 0x64
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e1a2      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dd6:	4b12      	ldr	r3, [pc, #72]	@ (8004e20 <HAL_RCC_OscConfig+0x4a8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d106      	bne.n	8004df8 <HAL_RCC_OscConfig+0x480>
 8004dea:	4b0c      	ldr	r3, [pc, #48]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dee:	4a0b      	ldr	r2, [pc, #44]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004df6:	e032      	b.n	8004e5e <HAL_RCC_OscConfig+0x4e6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d111      	bne.n	8004e24 <HAL_RCC_OscConfig+0x4ac>
 8004e00:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e04:	4a05      	ldr	r2, [pc, #20]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e0c:	4b03      	ldr	r3, [pc, #12]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	4a02      	ldr	r2, [pc, #8]	@ (8004e1c <HAL_RCC_OscConfig+0x4a4>)
 8004e12:	f023 0304 	bic.w	r3, r3, #4
 8004e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e18:	e021      	b.n	8004e5e <HAL_RCC_OscConfig+0x4e6>
 8004e1a:	bf00      	nop
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	58024800 	.word	0x58024800
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b05      	cmp	r3, #5
 8004e2a:	d10c      	bne.n	8004e46 <HAL_RCC_OscConfig+0x4ce>
 8004e2c:	4b83      	ldr	r3, [pc, #524]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e30:	4a82      	ldr	r2, [pc, #520]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004e32:	f043 0304 	orr.w	r3, r3, #4
 8004e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e38:	4b80      	ldr	r3, [pc, #512]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3c:	4a7f      	ldr	r2, [pc, #508]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e44:	e00b      	b.n	8004e5e <HAL_RCC_OscConfig+0x4e6>
 8004e46:	4b7d      	ldr	r3, [pc, #500]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e52:	4b7a      	ldr	r3, [pc, #488]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	4a79      	ldr	r2, [pc, #484]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004e58:	f023 0304 	bic.w	r3, r3, #4
 8004e5c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d015      	beq.n	8004e92 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e66:	f7fc fbdd 	bl	8001624 <HAL_GetTick>
 8004e6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e6c:	e00a      	b.n	8004e84 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6e:	f7fc fbd9 	bl	8001624 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e14b      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e84:	4b6d      	ldr	r3, [pc, #436]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ee      	beq.n	8004e6e <HAL_RCC_OscConfig+0x4f6>
 8004e90:	e014      	b.n	8004ebc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fc fbc7 	bl	8001624 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f7fc fbc3 	bl	8001624 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e135      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004eb0:	4b62      	ldr	r3, [pc, #392]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ee      	bne.n	8004e9a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 812a 	beq.w	800511a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ece:	2b18      	cmp	r3, #24
 8004ed0:	f000 80ba 	beq.w	8005048 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f040 8095 	bne.w	8005008 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ede:	4b57      	ldr	r3, [pc, #348]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a56      	ldr	r2, [pc, #344]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004ee4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eea:	f7fc fb9b 	bl	8001624 <HAL_GetTick>
 8004eee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef2:	f7fc fb97 	bl	8001624 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e10b      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f04:	4b4d      	ldr	r3, [pc, #308]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f0      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f10:	4b4a      	ldr	r3, [pc, #296]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f14:	4b4a      	ldr	r3, [pc, #296]	@ (8005040 <HAL_RCC_OscConfig+0x6c8>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f20:	0112      	lsls	r2, r2, #4
 8004f22:	430a      	orrs	r2, r1
 8004f24:	4945      	ldr	r1, [pc, #276]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	025b      	lsls	r3, r3, #9
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f44:	3b01      	subs	r3, #1
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f52:	3b01      	subs	r3, #1
 8004f54:	061b      	lsls	r3, r3, #24
 8004f56:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f5a:	4938      	ldr	r1, [pc, #224]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f60:	4b36      	ldr	r3, [pc, #216]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	4a35      	ldr	r2, [pc, #212]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f6c:	4b33      	ldr	r3, [pc, #204]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f70:	4b34      	ldr	r3, [pc, #208]	@ (8005044 <HAL_RCC_OscConfig+0x6cc>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f78:	00d2      	lsls	r2, r2, #3
 8004f7a:	4930      	ldr	r1, [pc, #192]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f80:	4b2e      	ldr	r3, [pc, #184]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	f023 020c 	bic.w	r2, r3, #12
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	492b      	ldr	r1, [pc, #172]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f92:	4b2a      	ldr	r3, [pc, #168]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	f023 0202 	bic.w	r2, r3, #2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9e:	4927      	ldr	r1, [pc, #156]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fa4:	4b25      	ldr	r3, [pc, #148]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	4a24      	ldr	r2, [pc, #144]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb0:	4b22      	ldr	r3, [pc, #136]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	4a21      	ldr	r2, [pc, #132]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004fc8:	4b1c      	ldr	r3, [pc, #112]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd4:	4b19      	ldr	r3, [pc, #100]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a18      	ldr	r2, [pc, #96]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fc fb20 	bl	8001624 <HAL_GetTick>
 8004fe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fc fb1c 	bl	8001624 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e090      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ffa:	4b10      	ldr	r3, [pc, #64]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x670>
 8005006:	e088      	b.n	800511a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005008:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a0b      	ldr	r2, [pc, #44]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 800500e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fc fb06 	bl	8001624 <HAL_GetTick>
 8005018:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501c:	f7fc fb02 	bl	8001624 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e076      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800502e:	4b03      	ldr	r3, [pc, #12]	@ (800503c <HAL_RCC_OscConfig+0x6c4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x6a4>
 800503a:	e06e      	b.n	800511a <HAL_RCC_OscConfig+0x7a2>
 800503c:	58024400 	.word	0x58024400
 8005040:	fffffc0c 	.word	0xfffffc0c
 8005044:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005048:	4b36      	ldr	r3, [pc, #216]	@ (8005124 <HAL_RCC_OscConfig+0x7ac>)
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800504e:	4b35      	ldr	r3, [pc, #212]	@ (8005124 <HAL_RCC_OscConfig+0x7ac>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	2b01      	cmp	r3, #1
 800505a:	d031      	beq.n	80050c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	f003 0203 	and.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d12a      	bne.n	80050c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d122      	bne.n	80050c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005084:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d11a      	bne.n	80050c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	0a5b      	lsrs	r3, r3, #9
 800508e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005096:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d111      	bne.n	80050c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d108      	bne.n	80050c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050bc:	429a      	cmp	r2, r3
 80050be:	d001      	beq.n	80050c4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e02b      	b.n	800511c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80050c4:	4b17      	ldr	r3, [pc, #92]	@ (8005124 <HAL_RCC_OscConfig+0x7ac>)
 80050c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c8:	08db      	lsrs	r3, r3, #3
 80050ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d01f      	beq.n	800511a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80050da:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <HAL_RCC_OscConfig+0x7ac>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	4a11      	ldr	r2, [pc, #68]	@ (8005124 <HAL_RCC_OscConfig+0x7ac>)
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050e6:	f7fc fa9d 	bl	8001624 <HAL_GetTick>
 80050ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80050ec:	bf00      	nop
 80050ee:	f7fc fa99 	bl	8001624 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d0f9      	beq.n	80050ee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <HAL_RCC_OscConfig+0x7ac>)
 80050fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <HAL_RCC_OscConfig+0x7b0>)
 8005100:	4013      	ands	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005106:	00d2      	lsls	r2, r2, #3
 8005108:	4906      	ldr	r1, [pc, #24]	@ (8005124 <HAL_RCC_OscConfig+0x7ac>)
 800510a:	4313      	orrs	r3, r2
 800510c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800510e:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <HAL_RCC_OscConfig+0x7ac>)
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	4a04      	ldr	r2, [pc, #16]	@ (8005124 <HAL_RCC_OscConfig+0x7ac>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3730      	adds	r7, #48	@ 0x30
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	58024400 	.word	0x58024400
 8005128:	ffff0007 	.word	0xffff0007

0800512c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e19c      	b.n	800547a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005140:	4b8a      	ldr	r3, [pc, #552]	@ (800536c <HAL_RCC_ClockConfig+0x240>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d910      	bls.n	8005170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b87      	ldr	r3, [pc, #540]	@ (800536c <HAL_RCC_ClockConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 020f 	bic.w	r2, r3, #15
 8005156:	4985      	ldr	r1, [pc, #532]	@ (800536c <HAL_RCC_ClockConfig+0x240>)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b83      	ldr	r3, [pc, #524]	@ (800536c <HAL_RCC_ClockConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e184      	b.n	800547a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	4b7b      	ldr	r3, [pc, #492]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005188:	429a      	cmp	r2, r3
 800518a:	d908      	bls.n	800519e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800518c:	4b78      	ldr	r3, [pc, #480]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	4975      	ldr	r1, [pc, #468]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 800519a:	4313      	orrs	r3, r2
 800519c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d010      	beq.n	80051cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	4b70      	ldr	r3, [pc, #448]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d908      	bls.n	80051cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	496a      	ldr	r1, [pc, #424]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d010      	beq.n	80051fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	4b64      	ldr	r3, [pc, #400]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d908      	bls.n	80051fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051e8:	4b61      	ldr	r3, [pc, #388]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	495e      	ldr	r1, [pc, #376]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d010      	beq.n	8005228 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69da      	ldr	r2, [r3, #28]
 800520a:	4b59      	ldr	r3, [pc, #356]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005212:	429a      	cmp	r2, r3
 8005214:	d908      	bls.n	8005228 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005216:	4b56      	ldr	r3, [pc, #344]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	4953      	ldr	r1, [pc, #332]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005224:	4313      	orrs	r3, r2
 8005226:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d010      	beq.n	8005256 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	4b4d      	ldr	r3, [pc, #308]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	429a      	cmp	r2, r3
 8005242:	d908      	bls.n	8005256 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005244:	4b4a      	ldr	r3, [pc, #296]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f023 020f 	bic.w	r2, r3, #15
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4947      	ldr	r1, [pc, #284]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005252:	4313      	orrs	r3, r2
 8005254:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d055      	beq.n	800530e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005262:	4b43      	ldr	r3, [pc, #268]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	4940      	ldr	r1, [pc, #256]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005270:	4313      	orrs	r3, r2
 8005272:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d107      	bne.n	800528c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800527c:	4b3c      	ldr	r3, [pc, #240]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d121      	bne.n	80052cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0f6      	b.n	800547a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d107      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005294:	4b36      	ldr	r3, [pc, #216]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d115      	bne.n	80052cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0ea      	b.n	800547a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d107      	bne.n	80052bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052ac:	4b30      	ldr	r3, [pc, #192]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0de      	b.n	800547a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0d6      	b.n	800547a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052cc:	4b28      	ldr	r3, [pc, #160]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f023 0207 	bic.w	r2, r3, #7
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4925      	ldr	r1, [pc, #148]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052de:	f7fc f9a1 	bl	8001624 <HAL_GetTick>
 80052e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e6:	f7fc f99d 	bl	8001624 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e0be      	b.n	800547a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	429a      	cmp	r2, r3
 800530c:	d1eb      	bne.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d010      	beq.n	800533c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	4b14      	ldr	r3, [pc, #80]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	429a      	cmp	r2, r3
 8005328:	d208      	bcs.n	800533c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800532a:	4b11      	ldr	r3, [pc, #68]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f023 020f 	bic.w	r2, r3, #15
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	490e      	ldr	r1, [pc, #56]	@ (8005370 <HAL_RCC_ClockConfig+0x244>)
 8005338:	4313      	orrs	r3, r2
 800533a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800533c:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <HAL_RCC_ClockConfig+0x240>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d214      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534a:	4b08      	ldr	r3, [pc, #32]	@ (800536c <HAL_RCC_ClockConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 020f 	bic.w	r2, r3, #15
 8005352:	4906      	ldr	r1, [pc, #24]	@ (800536c <HAL_RCC_ClockConfig+0x240>)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	4313      	orrs	r3, r2
 8005358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b04      	ldr	r3, [pc, #16]	@ (800536c <HAL_RCC_ClockConfig+0x240>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d005      	beq.n	8005374 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e086      	b.n	800547a <HAL_RCC_ClockConfig+0x34e>
 800536c:	52002000 	.word	0x52002000
 8005370:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d010      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	4b3f      	ldr	r3, [pc, #252]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800538c:	429a      	cmp	r2, r3
 800538e:	d208      	bcs.n	80053a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005390:	4b3c      	ldr	r3, [pc, #240]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	4939      	ldr	r1, [pc, #228]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d010      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	4b34      	ldr	r3, [pc, #208]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d208      	bcs.n	80053d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053be:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	492e      	ldr	r1, [pc, #184]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d010      	beq.n	80053fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699a      	ldr	r2, [r3, #24]
 80053e0:	4b28      	ldr	r3, [pc, #160]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d208      	bcs.n	80053fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053ec:	4b25      	ldr	r3, [pc, #148]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	4922      	ldr	r1, [pc, #136]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d010      	beq.n	800542c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005416:	429a      	cmp	r2, r3
 8005418:	d208      	bcs.n	800542c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800541a:	4b1a      	ldr	r3, [pc, #104]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	4917      	ldr	r1, [pc, #92]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 8005428:	4313      	orrs	r3, r2
 800542a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800542c:	f000 f834 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b14      	ldr	r3, [pc, #80]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	4912      	ldr	r1, [pc, #72]	@ (8005488 <HAL_RCC_ClockConfig+0x35c>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
 8005448:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800544a:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <HAL_RCC_ClockConfig+0x358>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	4a0d      	ldr	r2, [pc, #52]	@ (8005488 <HAL_RCC_ClockConfig+0x35c>)
 8005454:	5cd3      	ldrb	r3, [r2, r3]
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
 8005460:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <HAL_RCC_ClockConfig+0x360>)
 8005462:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005464:	4a0a      	ldr	r2, [pc, #40]	@ (8005490 <HAL_RCC_ClockConfig+0x364>)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800546a:	4b0a      	ldr	r3, [pc, #40]	@ (8005494 <HAL_RCC_ClockConfig+0x368>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7fb ff18 	bl	80012a4 <HAL_InitTick>
 8005474:	4603      	mov	r3, r0
 8005476:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	58024400 	.word	0x58024400
 8005488:	0800db14 	.word	0x0800db14
 800548c:	24000004 	.word	0x24000004
 8005490:	24000000 	.word	0x24000000
 8005494:	24000008 	.word	0x24000008

08005498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005498:	b480      	push	{r7}
 800549a:	b089      	sub	sp, #36	@ 0x24
 800549c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800549e:	4bb3      	ldr	r3, [pc, #716]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054a6:	2b18      	cmp	r3, #24
 80054a8:	f200 8155 	bhi.w	8005756 <HAL_RCC_GetSysClockFreq+0x2be>
 80054ac:	a201      	add	r2, pc, #4	@ (adr r2, 80054b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	08005519 	.word	0x08005519
 80054b8:	08005757 	.word	0x08005757
 80054bc:	08005757 	.word	0x08005757
 80054c0:	08005757 	.word	0x08005757
 80054c4:	08005757 	.word	0x08005757
 80054c8:	08005757 	.word	0x08005757
 80054cc:	08005757 	.word	0x08005757
 80054d0:	08005757 	.word	0x08005757
 80054d4:	0800553f 	.word	0x0800553f
 80054d8:	08005757 	.word	0x08005757
 80054dc:	08005757 	.word	0x08005757
 80054e0:	08005757 	.word	0x08005757
 80054e4:	08005757 	.word	0x08005757
 80054e8:	08005757 	.word	0x08005757
 80054ec:	08005757 	.word	0x08005757
 80054f0:	08005757 	.word	0x08005757
 80054f4:	08005545 	.word	0x08005545
 80054f8:	08005757 	.word	0x08005757
 80054fc:	08005757 	.word	0x08005757
 8005500:	08005757 	.word	0x08005757
 8005504:	08005757 	.word	0x08005757
 8005508:	08005757 	.word	0x08005757
 800550c:	08005757 	.word	0x08005757
 8005510:	08005757 	.word	0x08005757
 8005514:	0800554b 	.word	0x0800554b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005518:	4b94      	ldr	r3, [pc, #592]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d009      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005524:	4b91      	ldr	r3, [pc, #580]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	08db      	lsrs	r3, r3, #3
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	4a90      	ldr	r2, [pc, #576]	@ (8005770 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
 8005534:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005536:	e111      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005538:	4b8d      	ldr	r3, [pc, #564]	@ (8005770 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800553a:	61bb      	str	r3, [r7, #24]
      break;
 800553c:	e10e      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800553e:	4b8d      	ldr	r3, [pc, #564]	@ (8005774 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005540:	61bb      	str	r3, [r7, #24]
      break;
 8005542:	e10b      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005544:	4b8c      	ldr	r3, [pc, #560]	@ (8005778 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005546:	61bb      	str	r3, [r7, #24]
      break;
 8005548:	e108      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800554a:	4b88      	ldr	r3, [pc, #544]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005554:	4b85      	ldr	r3, [pc, #532]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800555e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005560:	4b82      	ldr	r3, [pc, #520]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800556a:	4b80      	ldr	r3, [pc, #512]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80e1 	beq.w	8005750 <HAL_RCC_GetSysClockFreq+0x2b8>
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b02      	cmp	r3, #2
 8005592:	f000 8083 	beq.w	800569c <HAL_RCC_GetSysClockFreq+0x204>
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b02      	cmp	r3, #2
 800559a:	f200 80a1 	bhi.w	80056e0 <HAL_RCC_GetSysClockFreq+0x248>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0x114>
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d056      	beq.n	8005658 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055aa:	e099      	b.n	80056e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ac:	4b6f      	ldr	r3, [pc, #444]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d02d      	beq.n	8005614 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055b8:	4b6c      	ldr	r3, [pc, #432]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	08db      	lsrs	r3, r3, #3
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	4a6b      	ldr	r2, [pc, #428]	@ (8005770 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
 80055c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e2:	4b62      	ldr	r3, [pc, #392]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80055f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800577c <HAL_RCC_GetSysClockFreq+0x2e4>
 80055fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005612:	e087      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005780 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005626:	4b51      	ldr	r3, [pc, #324]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005636:	ed97 6a02 	vldr	s12, [r7, #8]
 800563a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800577c <HAL_RCC_GetSysClockFreq+0x2e4>
 800563e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800564a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005656:	e065      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005784 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566a:	4b40      	ldr	r3, [pc, #256]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567a:	ed97 6a02 	vldr	s12, [r7, #8]
 800567e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800577c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800568e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005696:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800569a:	e043      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005788 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b2f      	ldr	r3, [pc, #188]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800577c <HAL_RCC_GetSysClockFreq+0x2e4>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056de:	e021      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005784 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b1e      	ldr	r3, [pc, #120]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a02 	vldr	s12, [r7, #8]
 8005706:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800577c <HAL_RCC_GetSysClockFreq+0x2e4>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005722:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005724:	4b11      	ldr	r3, [pc, #68]	@ (800576c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	0a5b      	lsrs	r3, r3, #9
 800572a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800572e:	3301      	adds	r3, #1
 8005730:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800573c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005748:	ee17 3a90 	vmov	r3, s15
 800574c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800574e:	e005      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
      break;
 8005754:	e002      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005756:	4b07      	ldr	r3, [pc, #28]	@ (8005774 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005758:	61bb      	str	r3, [r7, #24]
      break;
 800575a:	bf00      	nop
  }

  return sysclockfreq;
 800575c:	69bb      	ldr	r3, [r7, #24]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3724      	adds	r7, #36	@ 0x24
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	58024400 	.word	0x58024400
 8005770:	03d09000 	.word	0x03d09000
 8005774:	003d0900 	.word	0x003d0900
 8005778:	017d7840 	.word	0x017d7840
 800577c:	46000000 	.word	0x46000000
 8005780:	4c742400 	.word	0x4c742400
 8005784:	4a742400 	.word	0x4a742400
 8005788:	4bbebc20 	.word	0x4bbebc20

0800578c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005792:	f7ff fe81 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8005796:	4602      	mov	r2, r0
 8005798:	4b10      	ldr	r3, [pc, #64]	@ (80057dc <HAL_RCC_GetHCLKFreq+0x50>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	0a1b      	lsrs	r3, r3, #8
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	490f      	ldr	r1, [pc, #60]	@ (80057e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80057a4:	5ccb      	ldrb	r3, [r1, r3]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	fa22 f303 	lsr.w	r3, r2, r3
 80057ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057b0:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <HAL_RCC_GetHCLKFreq+0x50>)
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	4a09      	ldr	r2, [pc, #36]	@ (80057e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80057ba:	5cd3      	ldrb	r3, [r2, r3]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	fa22 f303 	lsr.w	r3, r2, r3
 80057c6:	4a07      	ldr	r2, [pc, #28]	@ (80057e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80057c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057ca:	4a07      	ldr	r2, [pc, #28]	@ (80057e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057d0:	4b04      	ldr	r3, [pc, #16]	@ (80057e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80057d2:	681b      	ldr	r3, [r3, #0]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	58024400 	.word	0x58024400
 80057e0:	0800db14 	.word	0x0800db14
 80057e4:	24000004 	.word	0x24000004
 80057e8:	24000000 	.word	0x24000000

080057ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80057f0:	f7ff ffcc 	bl	800578c <HAL_RCC_GetHCLKFreq>
 80057f4:	4602      	mov	r2, r0
 80057f6:	4b06      	ldr	r3, [pc, #24]	@ (8005810 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	4904      	ldr	r1, [pc, #16]	@ (8005814 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005802:	5ccb      	ldrb	r3, [r1, r3]
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800580c:	4618      	mov	r0, r3
 800580e:	bd80      	pop	{r7, pc}
 8005810:	58024400 	.word	0x58024400
 8005814:	0800db14 	.word	0x0800db14

08005818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800581c:	f7ff ffb6 	bl	800578c <HAL_RCC_GetHCLKFreq>
 8005820:	4602      	mov	r2, r0
 8005822:	4b06      	ldr	r3, [pc, #24]	@ (800583c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	4904      	ldr	r1, [pc, #16]	@ (8005840 <HAL_RCC_GetPCLK2Freq+0x28>)
 800582e:	5ccb      	ldrb	r3, [r1, r3]
 8005830:	f003 031f 	and.w	r3, r3, #31
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}
 800583c:	58024400 	.word	0x58024400
 8005840:	0800db14 	.word	0x0800db14

08005844 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	223f      	movs	r2, #63	@ 0x3f
 8005852:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005854:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 0207 	and.w	r2, r3, #7
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005860:	4b17      	ldr	r3, [pc, #92]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800586c:	4b14      	ldr	r3, [pc, #80]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f003 020f 	and.w	r2, r3, #15
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005878:	4b11      	ldr	r3, [pc, #68]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005884:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005890:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800589c:	4b08      	ldr	r3, [pc, #32]	@ (80058c0 <HAL_RCC_GetClockConfig+0x7c>)
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058a8:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <HAL_RCC_GetClockConfig+0x80>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 020f 	and.w	r2, r3, #15
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	601a      	str	r2, [r3, #0]
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	58024400 	.word	0x58024400
 80058c4:	52002000 	.word	0x52002000

080058c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058cc:	b0c6      	sub	sp, #280	@ 0x118
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058d4:	2300      	movs	r3, #0
 80058d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058da:	2300      	movs	r3, #0
 80058dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80058ec:	2500      	movs	r5, #0
 80058ee:	ea54 0305 	orrs.w	r3, r4, r5
 80058f2:	d049      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058fe:	d02f      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005900:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005904:	d828      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005906:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800590a:	d01a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800590c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005910:	d822      	bhi.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800591a:	d007      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800591c:	e01c      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591e:	4bab      	ldr	r3, [pc, #684]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	4aaa      	ldr	r2, [pc, #680]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800592a:	e01a      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800592c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005930:	3308      	adds	r3, #8
 8005932:	2102      	movs	r1, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fc25 	bl	8007184 <RCCEx_PLL2_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005940:	e00f      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005946:	3328      	adds	r3, #40	@ 0x28
 8005948:	2102      	movs	r1, #2
 800594a:	4618      	mov	r0, r3
 800594c:	f001 fccc 	bl	80072e8 <RCCEx_PLL3_Config>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005956:	e004      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800595e:	e000      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800596a:	4b98      	ldr	r3, [pc, #608]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800596c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005978:	4a94      	ldr	r2, [pc, #592]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800597a:	430b      	orrs	r3, r1
 800597c:	6513      	str	r3, [r2, #80]	@ 0x50
 800597e:	e003      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005984:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005994:	f04f 0900 	mov.w	r9, #0
 8005998:	ea58 0309 	orrs.w	r3, r8, r9
 800599c:	d047      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800599e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d82a      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80059a8:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059c5 	.word	0x080059c5
 80059b4:	080059d3 	.word	0x080059d3
 80059b8:	080059e9 	.word	0x080059e9
 80059bc:	08005a07 	.word	0x08005a07
 80059c0:	08005a07 	.word	0x08005a07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c4:	4b81      	ldr	r3, [pc, #516]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	4a80      	ldr	r2, [pc, #512]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059d0:	e01a      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d6:	3308      	adds	r3, #8
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fbd2 	bl	8007184 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059e6:	e00f      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ec:	3328      	adds	r3, #40	@ 0x28
 80059ee:	2100      	movs	r1, #0
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 fc79 	bl	80072e8 <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059fc:	e004      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a10:	4b6e      	ldr	r3, [pc, #440]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a14:	f023 0107 	bic.w	r1, r3, #7
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1e:	4a6b      	ldr	r2, [pc, #428]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a24:	e003      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005a3a:	f04f 0b00 	mov.w	fp, #0
 8005a3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a42:	d05b      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a4c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a50:	d03b      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005a52:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a56:	d834      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a5c:	d037      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a62:	d82e      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a68:	d033      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005a6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a6e:	d828      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a74:	d01a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a7a:	d822      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005a80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a84:	d007      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005a86:	e01c      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a88:	4b50      	ldr	r3, [pc, #320]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	4a4f      	ldr	r2, [pc, #316]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a94:	e01e      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 fb70 	bl	8007184 <RCCEx_PLL2_Config>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005aaa:	e013      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab0:	3328      	adds	r3, #40	@ 0x28
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 fc17 	bl	80072e8 <RCCEx_PLL3_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ac8:	e004      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005aca:	bf00      	nop
 8005acc:	e002      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e000      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005adc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005aec:	4a37      	ldr	r2, [pc, #220]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aee:	430b      	orrs	r3, r1
 8005af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005af2:	e003      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005af8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b16:	460b      	mov	r3, r1
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	d05d      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b24:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b28:	d03b      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005b2a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b2e:	d834      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b34:	d037      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005b36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b3a:	d82e      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b40:	d033      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005b42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b46:	d828      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b4c:	d01a      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005b4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b52:	d822      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b5c:	d007      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b5e:	e01c      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b60:	4b1a      	ldr	r3, [pc, #104]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	4a19      	ldr	r2, [pc, #100]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b6c:	e01e      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b72:	3308      	adds	r3, #8
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fb04 	bl	8007184 <RCCEx_PLL2_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b82:	e013      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b88:	3328      	adds	r3, #40	@ 0x28
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 fbab 	bl	80072e8 <RCCEx_PLL3_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b98:	e008      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ba0:	e004      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10d      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bb4:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bc4:	4a01      	ldr	r2, [pc, #4]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bca:	e005      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005be4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bee:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d03a      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfe:	2b30      	cmp	r3, #48	@ 0x30
 8005c00:	d01f      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005c02:	2b30      	cmp	r3, #48	@ 0x30
 8005c04:	d819      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	d00c      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d815      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d019      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d111      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c16:	4baa      	ldr	r3, [pc, #680]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1a:	4aa9      	ldr	r2, [pc, #676]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005c22:	e011      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	3308      	adds	r3, #8
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 faa9 	bl	8007184 <RCCEx_PLL2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005c38:	e006      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c40:	e002      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005c42:	bf00      	nop
 8005c44:	e000      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c50:	4b9b      	ldr	r3, [pc, #620]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c5e:	4a98      	ldr	r2, [pc, #608]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c60:	430b      	orrs	r3, r1
 8005c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c64:	e003      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c84:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	d051      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c98:	d035      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c9e:	d82e      	bhi.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ca0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ca4:	d031      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005ca6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005caa:	d828      	bhi.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb0:	d01a      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005cb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb6:	d822      	bhi.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc0:	d007      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005cc2:	e01c      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cd0:	e01c      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cd6:	3308      	adds	r3, #8
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 fa52 	bl	8007184 <RCCEx_PLL2_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ce6:	e011      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cec:	3328      	adds	r3, #40	@ 0x28
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 faf9 	bl	80072e8 <RCCEx_PLL3_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cfc:	e006      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d04:	e002      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d14:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d22:	4a67      	ldr	r2, [pc, #412]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d28:	e003      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d42:	2300      	movs	r3, #0
 8005d44:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d48:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	d053      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d5c:	d033      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005d5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d62:	d82c      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d68:	d02f      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005d6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d6e:	d826      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d74:	d02b      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005d76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d7a:	d820      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d80:	d012      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005d82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d86:	d81a      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d022      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d90:	d115      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	3308      	adds	r3, #8
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 f9f2 	bl	8007184 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005da6:	e015      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dac:	3328      	adds	r3, #40	@ 0x28
 8005dae:	2101      	movs	r1, #1
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fa99 	bl	80072e8 <RCCEx_PLL3_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e00a      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dc4:	e006      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005dc6:	bf00      	nop
 8005dc8:	e004      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e002      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ddc:	4b38      	ldr	r3, [pc, #224]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dea:	4a35      	ldr	r2, [pc, #212]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6513      	str	r3, [r2, #80]	@ 0x50
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005df6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e10:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e14:	460b      	mov	r3, r1
 8005e16:	4313      	orrs	r3, r2
 8005e18:	d058      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e26:	d033      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e2c:	d82c      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e32:	d02f      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e38:	d826      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e3e:	d02b      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005e40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e44:	d820      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e4a:	d012      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e50:	d81a      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d022      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e5a:	d115      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e60:	3308      	adds	r3, #8
 8005e62:	2101      	movs	r1, #1
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 f98d 	bl	8007184 <RCCEx_PLL2_Config>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e70:	e015      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e76:	3328      	adds	r3, #40	@ 0x28
 8005e78:	2101      	movs	r1, #1
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 fa34 	bl	80072e8 <RCCEx_PLL3_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e86:	e00a      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e8e:	e006      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e90:	bf00      	nop
 8005e92:	e004      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e94:	bf00      	nop
 8005e96:	e002      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e98:	bf00      	nop
 8005e9a:	e000      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10e      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ea6:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eaa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005eb6:	4a02      	ldr	r2, [pc, #8]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ebc:	e006      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005ebe:	bf00      	nop
 8005ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ec8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005ee2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	d037      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef6:	d00e      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005efc:	d816      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d018      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005f02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f06:	d111      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f08:	4bc4      	ldr	r3, [pc, #784]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	4ac3      	ldr	r2, [pc, #780]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f14:	e00f      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 f930 	bl	8007184 <RCCEx_PLL2_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f2a:	e004      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f3e:	4bb7      	ldr	r3, [pc, #732]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f4c:	4ab3      	ldr	r2, [pc, #716]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f52:	e003      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d039      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d81c      	bhi.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005f86:	a201      	add	r2, pc, #4	@ (adr r2, 8005f8c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fc9 	.word	0x08005fc9
 8005f90:	08005f9d 	.word	0x08005f9d
 8005f94:	08005fab 	.word	0x08005fab
 8005f98:	08005fc9 	.word	0x08005fc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f9c:	4b9f      	ldr	r3, [pc, #636]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	4a9e      	ldr	r2, [pc, #632]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fa8:	e00f      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fae:	3308      	adds	r3, #8
 8005fb0:	2102      	movs	r1, #2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 f8e6 	bl	8007184 <RCCEx_PLL2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fbe:	e004      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fc6:	e000      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10a      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005fd2:	4b92      	ldr	r3, [pc, #584]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fd6:	f023 0103 	bic.w	r1, r3, #3
 8005fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe0:	4a8e      	ldr	r2, [pc, #568]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fe6:	e003      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ffc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006000:	2300      	movs	r3, #0
 8006002:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006006:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800600a:	460b      	mov	r3, r1
 800600c:	4313      	orrs	r3, r2
 800600e:	f000 8099 	beq.w	8006144 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006012:	4b83      	ldr	r3, [pc, #524]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a82      	ldr	r2, [pc, #520]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800601c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800601e:	f7fb fb01 	bl	8001624 <HAL_GetTick>
 8006022:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006026:	e00b      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006028:	f7fb fafc 	bl	8001624 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b64      	cmp	r3, #100	@ 0x64
 8006036:	d903      	bls.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800603e:	e005      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006040:	4b77      	ldr	r3, [pc, #476]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0ed      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800604c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006050:	2b00      	cmp	r3, #0
 8006052:	d173      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006054:	4b71      	ldr	r3, [pc, #452]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006056:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006060:	4053      	eors	r3, r2
 8006062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006066:	2b00      	cmp	r3, #0
 8006068:	d015      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800606a:	4b6c      	ldr	r3, [pc, #432]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006072:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006076:	4b69      	ldr	r3, [pc, #420]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607a:	4a68      	ldr	r2, [pc, #416]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800607c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006080:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006082:	4b66      	ldr	r3, [pc, #408]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006086:	4a65      	ldr	r2, [pc, #404]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800608c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800608e:	4a63      	ldr	r2, [pc, #396]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006094:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800609e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060a2:	d118      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fb fabe 	bl	8001624 <HAL_GetTick>
 80060a8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ac:	e00d      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ae:	f7fb fab9 	bl	8001624 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80060be:	429a      	cmp	r2, r3
 80060c0:	d903      	bls.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80060c8:	e005      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ca:	4b54      	ldr	r3, [pc, #336]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0eb      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80060d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d129      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ee:	d10e      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x846>
 80060f0:	4b4a      	ldr	r3, [pc, #296]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006100:	091a      	lsrs	r2, r3, #4
 8006102:	4b48      	ldr	r3, [pc, #288]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006104:	4013      	ands	r3, r2
 8006106:	4a45      	ldr	r2, [pc, #276]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006108:	430b      	orrs	r3, r1
 800610a:	6113      	str	r3, [r2, #16]
 800610c:	e005      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800610e:	4b43      	ldr	r3, [pc, #268]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	4a42      	ldr	r2, [pc, #264]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006114:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006118:	6113      	str	r3, [r2, #16]
 800611a:	4b40      	ldr	r3, [pc, #256]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800611c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800611e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800612a:	4a3c      	ldr	r2, [pc, #240]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800612c:	430b      	orrs	r3, r1
 800612e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006130:	e008      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006136:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800613a:	e003      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006140:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f002 0301 	and.w	r3, r2, #1
 8006150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800615a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800615e:	460b      	mov	r3, r1
 8006160:	4313      	orrs	r3, r2
 8006162:	f000 808f 	beq.w	8006284 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800616c:	2b28      	cmp	r3, #40	@ 0x28
 800616e:	d871      	bhi.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006170:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006176:	bf00      	nop
 8006178:	0800625d 	.word	0x0800625d
 800617c:	08006255 	.word	0x08006255
 8006180:	08006255 	.word	0x08006255
 8006184:	08006255 	.word	0x08006255
 8006188:	08006255 	.word	0x08006255
 800618c:	08006255 	.word	0x08006255
 8006190:	08006255 	.word	0x08006255
 8006194:	08006255 	.word	0x08006255
 8006198:	08006229 	.word	0x08006229
 800619c:	08006255 	.word	0x08006255
 80061a0:	08006255 	.word	0x08006255
 80061a4:	08006255 	.word	0x08006255
 80061a8:	08006255 	.word	0x08006255
 80061ac:	08006255 	.word	0x08006255
 80061b0:	08006255 	.word	0x08006255
 80061b4:	08006255 	.word	0x08006255
 80061b8:	0800623f 	.word	0x0800623f
 80061bc:	08006255 	.word	0x08006255
 80061c0:	08006255 	.word	0x08006255
 80061c4:	08006255 	.word	0x08006255
 80061c8:	08006255 	.word	0x08006255
 80061cc:	08006255 	.word	0x08006255
 80061d0:	08006255 	.word	0x08006255
 80061d4:	08006255 	.word	0x08006255
 80061d8:	0800625d 	.word	0x0800625d
 80061dc:	08006255 	.word	0x08006255
 80061e0:	08006255 	.word	0x08006255
 80061e4:	08006255 	.word	0x08006255
 80061e8:	08006255 	.word	0x08006255
 80061ec:	08006255 	.word	0x08006255
 80061f0:	08006255 	.word	0x08006255
 80061f4:	08006255 	.word	0x08006255
 80061f8:	0800625d 	.word	0x0800625d
 80061fc:	08006255 	.word	0x08006255
 8006200:	08006255 	.word	0x08006255
 8006204:	08006255 	.word	0x08006255
 8006208:	08006255 	.word	0x08006255
 800620c:	08006255 	.word	0x08006255
 8006210:	08006255 	.word	0x08006255
 8006214:	08006255 	.word	0x08006255
 8006218:	0800625d 	.word	0x0800625d
 800621c:	58024400 	.word	0x58024400
 8006220:	58024800 	.word	0x58024800
 8006224:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622c:	3308      	adds	r3, #8
 800622e:	2101      	movs	r1, #1
 8006230:	4618      	mov	r0, r3
 8006232:	f000 ffa7 	bl	8007184 <RCCEx_PLL2_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800623c:	e00f      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006242:	3328      	adds	r3, #40	@ 0x28
 8006244:	2101      	movs	r1, #1
 8006246:	4618      	mov	r0, r3
 8006248:	f001 f84e 	bl	80072e8 <RCCEx_PLL3_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006252:	e004      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800625c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006266:	4bbf      	ldr	r3, [pc, #764]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006274:	4abb      	ldr	r2, [pc, #748]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006276:	430b      	orrs	r3, r1
 8006278:	6553      	str	r3, [r2, #84]	@ 0x54
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006280:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	f002 0302 	and.w	r3, r2, #2
 8006290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006294:	2300      	movs	r3, #0
 8006296:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800629a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d041      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d824      	bhi.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80062ae:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	08006301 	.word	0x08006301
 80062b8:	080062cd 	.word	0x080062cd
 80062bc:	080062e3 	.word	0x080062e3
 80062c0:	08006301 	.word	0x08006301
 80062c4:	08006301 	.word	0x08006301
 80062c8:	08006301 	.word	0x08006301
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d0:	3308      	adds	r3, #8
 80062d2:	2101      	movs	r1, #1
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 ff55 	bl	8007184 <RCCEx_PLL2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062e0:	e00f      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e6:	3328      	adds	r3, #40	@ 0x28
 80062e8:	2101      	movs	r1, #1
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fffc 	bl	80072e8 <RCCEx_PLL3_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062f6:	e004      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062fe:	e000      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006302:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800630a:	4b96      	ldr	r3, [pc, #600]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800630c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630e:	f023 0107 	bic.w	r1, r3, #7
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006318:	4a92      	ldr	r2, [pc, #584]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800631a:	430b      	orrs	r3, r1
 800631c:	6553      	str	r3, [r2, #84]	@ 0x54
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006324:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f002 0304 	and.w	r3, r2, #4
 8006334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800633e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006342:	460b      	mov	r3, r1
 8006344:	4313      	orrs	r3, r2
 8006346:	d044      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006350:	2b05      	cmp	r3, #5
 8006352:	d825      	bhi.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006354:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	080063a9 	.word	0x080063a9
 8006360:	08006375 	.word	0x08006375
 8006364:	0800638b 	.word	0x0800638b
 8006368:	080063a9 	.word	0x080063a9
 800636c:	080063a9 	.word	0x080063a9
 8006370:	080063a9 	.word	0x080063a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006378:	3308      	adds	r3, #8
 800637a:	2101      	movs	r1, #1
 800637c:	4618      	mov	r0, r3
 800637e:	f000 ff01 	bl	8007184 <RCCEx_PLL2_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006388:	e00f      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	3328      	adds	r3, #40	@ 0x28
 8006390:	2101      	movs	r1, #1
 8006392:	4618      	mov	r0, r3
 8006394:	f000 ffa8 	bl	80072e8 <RCCEx_PLL3_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800639e:	e004      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063a6:	e000      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80063a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80063b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b6:	f023 0107 	bic.w	r1, r3, #7
 80063ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c2:	4a68      	ldr	r2, [pc, #416]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c8:	e003      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	f002 0320 	and.w	r3, r2, #32
 80063de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063e2:	2300      	movs	r3, #0
 80063e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4313      	orrs	r3, r2
 80063f0:	d055      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063fe:	d033      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006400:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006404:	d82c      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640a:	d02f      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800640c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006410:	d826      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006412:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006416:	d02b      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006418:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800641c:	d820      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800641e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006422:	d012      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006428:	d81a      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d022      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800642e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006432:	d115      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	3308      	adds	r3, #8
 800643a:	2100      	movs	r1, #0
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fea1 	bl	8007184 <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006448:	e015      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644e:	3328      	adds	r3, #40	@ 0x28
 8006450:	2102      	movs	r1, #2
 8006452:	4618      	mov	r0, r3
 8006454:	f000 ff48 	bl	80072e8 <RCCEx_PLL3_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800645e:	e00a      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006466:	e006      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006468:	bf00      	nop
 800646a:	e004      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800646c:	bf00      	nop
 800646e:	e002      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006470:	bf00      	nop
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006476:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800647e:	4b39      	ldr	r3, [pc, #228]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006482:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800648e:	4a35      	ldr	r2, [pc, #212]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006490:	430b      	orrs	r3, r1
 8006492:	6553      	str	r3, [r2, #84]	@ 0x54
 8006494:	e003      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006496:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800649a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80064aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064ae:	2300      	movs	r3, #0
 80064b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80064b8:	460b      	mov	r3, r1
 80064ba:	4313      	orrs	r3, r2
 80064bc:	d058      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80064be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80064ca:	d033      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80064cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80064d0:	d82c      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d6:	d02f      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80064d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064dc:	d826      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e2:	d02b      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80064e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e8:	d820      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ee:	d012      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80064f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f4:	d81a      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d022      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80064fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fe:	d115      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006504:	3308      	adds	r3, #8
 8006506:	2100      	movs	r1, #0
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fe3b 	bl	8007184 <RCCEx_PLL2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006514:	e015      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	3328      	adds	r3, #40	@ 0x28
 800651c:	2102      	movs	r1, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fee2 	bl	80072e8 <RCCEx_PLL3_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800652a:	e00a      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006532:	e006      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006534:	bf00      	nop
 8006536:	e004      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006538:	bf00      	nop
 800653a:	e002      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800653c:	bf00      	nop
 800653e:	e000      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006542:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10e      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800654a:	4b06      	ldr	r3, [pc, #24]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800654c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006556:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800655a:	4a02      	ldr	r2, [pc, #8]	@ (8006564 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800655c:	430b      	orrs	r3, r1
 800655e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006560:	e006      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006562:	bf00      	nop
 8006564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800656c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800657c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006586:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800658a:	460b      	mov	r3, r1
 800658c:	4313      	orrs	r3, r2
 800658e:	d055      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006594:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006598:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800659c:	d033      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800659e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065a2:	d82c      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a8:	d02f      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80065aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ae:	d826      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065b4:	d02b      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80065b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065ba:	d820      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c0:	d012      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80065c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c6:	d81a      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d022      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80065cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d0:	d115      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	3308      	adds	r3, #8
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fdd2 	bl	8007184 <RCCEx_PLL2_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065e6:	e015      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	3328      	adds	r3, #40	@ 0x28
 80065ee:	2102      	movs	r1, #2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fe79 	bl	80072e8 <RCCEx_PLL3_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065fc:	e00a      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006606:	bf00      	nop
 8006608:	e004      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006614:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800661c:	4ba0      	ldr	r3, [pc, #640]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800661e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006620:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006628:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800662c:	4a9c      	ldr	r2, [pc, #624]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800662e:	430b      	orrs	r3, r1
 8006630:	6593      	str	r3, [r2, #88]	@ 0x58
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006638:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f002 0308 	and.w	r3, r2, #8
 8006648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800664c:	2300      	movs	r3, #0
 800664e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006652:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006656:	460b      	mov	r3, r1
 8006658:	4313      	orrs	r3, r2
 800665a:	d01e      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006668:	d10c      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	3328      	adds	r3, #40	@ 0x28
 8006670:	2102      	movs	r1, #2
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fe38 	bl	80072e8 <RCCEx_PLL3_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006684:	4b86      	ldr	r3, [pc, #536]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006688:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006694:	4a82      	ldr	r2, [pc, #520]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006696:	430b      	orrs	r3, r1
 8006698:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800669a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f002 0310 	and.w	r3, r2, #16
 80066a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066aa:	2300      	movs	r3, #0
 80066ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066b0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80066b4:	460b      	mov	r3, r1
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d01e      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066c6:	d10c      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066cc:	3328      	adds	r3, #40	@ 0x28
 80066ce:	2102      	movs	r1, #2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fe09 	bl	80072e8 <RCCEx_PLL3_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066e2:	4b6f      	ldr	r3, [pc, #444]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066f2:	4a6b      	ldr	r2, [pc, #428]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006704:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006706:	2300      	movs	r3, #0
 8006708:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800670a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800670e:	460b      	mov	r3, r1
 8006710:	4313      	orrs	r3, r2
 8006712:	d03e      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006718:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800671c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006720:	d022      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006722:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006726:	d81b      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800672c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006730:	d00b      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006732:	e015      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	3308      	adds	r3, #8
 800673a:	2100      	movs	r1, #0
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fd21 	bl	8007184 <RCCEx_PLL2_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006748:	e00f      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	3328      	adds	r3, #40	@ 0x28
 8006750:	2102      	movs	r1, #2
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fdc8 	bl	80072e8 <RCCEx_PLL3_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800675e:	e004      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006766:	e000      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10b      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006772:	4b4b      	ldr	r3, [pc, #300]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006776:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800677a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006782:	4a47      	ldr	r2, [pc, #284]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006784:	430b      	orrs	r3, r1
 8006786:	6593      	str	r3, [r2, #88]	@ 0x58
 8006788:	e003      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800678e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800679e:	673b      	str	r3, [r7, #112]	@ 0x70
 80067a0:	2300      	movs	r3, #0
 80067a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80067a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80067a8:	460b      	mov	r3, r1
 80067aa:	4313      	orrs	r3, r2
 80067ac:	d03b      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067ba:	d01f      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80067bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067c0:	d818      	bhi.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80067c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067c6:	d003      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80067c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067cc:	d007      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80067ce:	e011      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d0:	4b33      	ldr	r3, [pc, #204]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	4a32      	ldr	r2, [pc, #200]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80067dc:	e00f      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	3328      	adds	r3, #40	@ 0x28
 80067e4:	2101      	movs	r1, #1
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fd7e 	bl	80072e8 <RCCEx_PLL3_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80067f2:	e004      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067fa:	e000      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80067fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006806:	4b26      	ldr	r3, [pc, #152]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006816:	4a22      	ldr	r2, [pc, #136]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006818:	430b      	orrs	r3, r1
 800681a:	6553      	str	r3, [r2, #84]	@ 0x54
 800681c:	e003      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006822:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006832:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006834:	2300      	movs	r3, #0
 8006836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006838:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800683c:	460b      	mov	r3, r1
 800683e:	4313      	orrs	r3, r2
 8006840:	d034      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800684c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006850:	d007      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006852:	e011      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006854:	4b12      	ldr	r3, [pc, #72]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	4a11      	ldr	r2, [pc, #68]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800685a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800685e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006860:	e00e      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006866:	3308      	adds	r3, #8
 8006868:	2102      	movs	r1, #2
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fc8a 	bl	8007184 <RCCEx_PLL2_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006876:	e003      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800687e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10d      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006888:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800688a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800688c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006896:	4a02      	ldr	r2, [pc, #8]	@ (80068a0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006898:	430b      	orrs	r3, r1
 800689a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800689c:	e006      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800689e:	bf00      	nop
 80068a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80068b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80068ba:	2300      	movs	r3, #0
 80068bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80068be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80068c2:	460b      	mov	r3, r1
 80068c4:	4313      	orrs	r3, r2
 80068c6:	d00c      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068cc:	3328      	adds	r3, #40	@ 0x28
 80068ce:	2102      	movs	r1, #2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fd09 	bl	80072e8 <RCCEx_PLL3_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80068ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068f0:	2300      	movs	r3, #0
 80068f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80068f8:	460b      	mov	r3, r1
 80068fa:	4313      	orrs	r3, r2
 80068fc:	d036      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006908:	d018      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800690a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800690e:	d811      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006914:	d014      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691a:	d80b      	bhi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d011      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006924:	d106      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006926:	4bb7      	ldr	r3, [pc, #732]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	4ab6      	ldr	r2, [pc, #728]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800692c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006930:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006932:	e008      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800693a:	e004      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800693c:	bf00      	nop
 800693e:	e002      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006940:	bf00      	nop
 8006942:	e000      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800694e:	4bad      	ldr	r3, [pc, #692]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006952:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800695c:	4aa9      	ldr	r2, [pc, #676]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800695e:	430b      	orrs	r3, r1
 8006960:	6553      	str	r3, [r2, #84]	@ 0x54
 8006962:	e003      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006968:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006978:	653b      	str	r3, [r7, #80]	@ 0x50
 800697a:	2300      	movs	r3, #0
 800697c:	657b      	str	r3, [r7, #84]	@ 0x54
 800697e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006982:	460b      	mov	r3, r1
 8006984:	4313      	orrs	r3, r2
 8006986:	d009      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006988:	4b9e      	ldr	r3, [pc, #632]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800698a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800698c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006996:	4a9b      	ldr	r2, [pc, #620]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006998:	430b      	orrs	r3, r1
 800699a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80069a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069aa:	2300      	movs	r3, #0
 80069ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80069b2:	460b      	mov	r3, r1
 80069b4:	4313      	orrs	r3, r2
 80069b6:	d009      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069b8:	4b92      	ldr	r3, [pc, #584]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069bc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069c6:	4a8f      	ldr	r2, [pc, #572]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069c8:	430b      	orrs	r3, r1
 80069ca:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80069d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80069da:	2300      	movs	r3, #0
 80069dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80069de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80069e2:	460b      	mov	r3, r1
 80069e4:	4313      	orrs	r3, r2
 80069e6:	d00e      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069e8:	4b86      	ldr	r3, [pc, #536]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	4a85      	ldr	r2, [pc, #532]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069f2:	6113      	str	r3, [r2, #16]
 80069f4:	4b83      	ldr	r3, [pc, #524]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069f6:	6919      	ldr	r1, [r3, #16]
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a00:	4a80      	ldr	r2, [pc, #512]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a14:	2300      	movs	r3, #0
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a18:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	d009      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a22:	4b78      	ldr	r3, [pc, #480]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a26:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a30:	4a74      	ldr	r2, [pc, #464]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a32:	430b      	orrs	r3, r1
 8006a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a44:	2300      	movs	r3, #0
 8006a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a48:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	d00a      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a52:	4b6c      	ldr	r3, [pc, #432]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a56:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a62:	4a68      	ldr	r2, [pc, #416]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	2100      	movs	r1, #0
 8006a72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4313      	orrs	r3, r2
 8006a82:	d011      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a88:	3308      	adds	r3, #8
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fb79 	bl	8007184 <RCCEx_PLL2_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	6239      	str	r1, [r7, #32]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d011      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac8:	3308      	adds	r3, #8
 8006aca:	2101      	movs	r1, #1
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fb59 	bl	8007184 <RCCEx_PLL2_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	2100      	movs	r1, #0
 8006af2:	61b9      	str	r1, [r7, #24]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006afe:	460b      	mov	r3, r1
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d011      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	3308      	adds	r3, #8
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fb39 	bl	8007184 <RCCEx_PLL2_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	2100      	movs	r1, #0
 8006b32:	6139      	str	r1, [r7, #16]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d011      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b48:	3328      	adds	r3, #40	@ 0x28
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fbcb 	bl	80072e8 <RCCEx_PLL3_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	2100      	movs	r1, #0
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	60fb      	str	r3, [r7, #12]
 8006b7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4313      	orrs	r3, r2
 8006b82:	d011      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b88:	3328      	adds	r3, #40	@ 0x28
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fbab 	bl	80072e8 <RCCEx_PLL3_Config>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6039      	str	r1, [r7, #0]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	d011      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc8:	3328      	adds	r3, #40	@ 0x28
 8006bca:	2102      	movs	r1, #2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fb8b 	bl	80072e8 <RCCEx_PLL3_Config>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006be8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c02:	bf00      	nop
 8006c04:	58024400 	.word	0x58024400

08006c08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c0c:	f7fe fdbe 	bl	800578c <HAL_RCC_GetHCLKFreq>
 8006c10:	4602      	mov	r2, r0
 8006c12:	4b06      	ldr	r3, [pc, #24]	@ (8006c2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	091b      	lsrs	r3, r3, #4
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	4904      	ldr	r1, [pc, #16]	@ (8006c30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c1e:	5ccb      	ldrb	r3, [r1, r3]
 8006c20:	f003 031f 	and.w	r3, r3, #31
 8006c24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	0800db14 	.word	0x0800db14

08006c34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b089      	sub	sp, #36	@ 0x24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c3c:	4ba1      	ldr	r3, [pc, #644]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006c46:	4b9f      	ldr	r3, [pc, #636]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4a:	0b1b      	lsrs	r3, r3, #12
 8006c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c52:	4b9c      	ldr	r3, [pc, #624]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c56:	091b      	lsrs	r3, r3, #4
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c5e:	4b99      	ldr	r3, [pc, #612]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c62:	08db      	lsrs	r3, r3, #3
 8006c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8111 	beq.w	8006ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	f000 8083 	beq.w	8006d90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	f200 80a1 	bhi.w	8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d056      	beq.n	8006d4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c9e:	e099      	b.n	8006dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca0:	4b88      	ldr	r3, [pc, #544]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d02d      	beq.n	8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cac:	4b85      	ldr	r3, [pc, #532]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	08db      	lsrs	r3, r3, #3
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	4a84      	ldr	r2, [pc, #528]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	4b7b      	ldr	r3, [pc, #492]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d06:	e087      	b.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d4a:	e065      	b.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5e:	4b59      	ldr	r3, [pc, #356]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d8e:	e043      	b.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da2:	4b48      	ldr	r3, [pc, #288]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd2:	e021      	b.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de6:	4b37      	ldr	r3, [pc, #220]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e18:	4b2a      	ldr	r3, [pc, #168]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1c:	0a5b      	lsrs	r3, r3, #9
 8006e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e3e:	ee17 2a90 	vmov	r2, s15
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006e46:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e50:	ee07 3a90 	vmov	s15, r3
 8006e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e6c:	ee17 2a90 	vmov	r2, s15
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006e74:	4b13      	ldr	r3, [pc, #76]	@ (8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	0e1b      	lsrs	r3, r3, #24
 8006e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9a:	ee17 2a90 	vmov	r2, s15
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	609a      	str	r2, [r3, #8]
}
 8006eb6:	bf00      	nop
 8006eb8:	3724      	adds	r7, #36	@ 0x24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	58024400 	.word	0x58024400
 8006ec8:	03d09000 	.word	0x03d09000
 8006ecc:	46000000 	.word	0x46000000
 8006ed0:	4c742400 	.word	0x4c742400
 8006ed4:	4a742400 	.word	0x4a742400
 8006ed8:	4bbebc20 	.word	0x4bbebc20

08006edc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b089      	sub	sp, #36	@ 0x24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ee4:	4ba1      	ldr	r3, [pc, #644]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006eee:	4b9f      	ldr	r3, [pc, #636]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef2:	0d1b      	lsrs	r3, r3, #20
 8006ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006efa:	4b9c      	ldr	r3, [pc, #624]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	0a1b      	lsrs	r3, r3, #8
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f06:	4b99      	ldr	r3, [pc, #612]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f0a:	08db      	lsrs	r3, r3, #3
 8006f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 8111 	beq.w	800714c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	f000 8083 	beq.w	8007038 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	f200 80a1 	bhi.w	800707c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d056      	beq.n	8006ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006f46:	e099      	b.n	800707c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f48:	4b88      	ldr	r3, [pc, #544]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d02d      	beq.n	8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f54:	4b85      	ldr	r3, [pc, #532]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	08db      	lsrs	r3, r3, #3
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	4a84      	ldr	r2, [pc, #528]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
 8006f64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	ee07 3a90 	vmov	s15, r3
 8006f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7e:	4b7b      	ldr	r3, [pc, #492]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006faa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fae:	e087      	b.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007178 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff2:	e065      	b.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800717c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007006:	4b59      	ldr	r3, [pc, #356]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007016:	ed97 6a03 	vldr	s12, [r7, #12]
 800701a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800701e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800702a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007036:	e043      	b.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007180 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704a:	4b48      	ldr	r3, [pc, #288]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705a:	ed97 6a03 	vldr	s12, [r7, #12]
 800705e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800706e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800707a:	e021      	b.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800717c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b37      	ldr	r3, [pc, #220]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709e:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80070c0:	4b2a      	ldr	r3, [pc, #168]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c4:	0a5b      	lsrs	r3, r3, #9
 80070c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070da:	edd7 6a07 	vldr	s13, [r7, #28]
 80070de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070e6:	ee17 2a90 	vmov	r2, s15
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80070ee:	4b1f      	ldr	r3, [pc, #124]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f2:	0c1b      	lsrs	r3, r3, #16
 80070f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070f8:	ee07 3a90 	vmov	s15, r3
 80070fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007100:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007104:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007108:	edd7 6a07 	vldr	s13, [r7, #28]
 800710c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007114:	ee17 2a90 	vmov	r2, s15
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800711c:	4b13      	ldr	r3, [pc, #76]	@ (800716c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007120:	0e1b      	lsrs	r3, r3, #24
 8007122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007136:	edd7 6a07 	vldr	s13, [r7, #28]
 800713a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800713e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007142:	ee17 2a90 	vmov	r2, s15
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800714a:	e008      	b.n	800715e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	609a      	str	r2, [r3, #8]
}
 800715e:	bf00      	nop
 8007160:	3724      	adds	r7, #36	@ 0x24
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	58024400 	.word	0x58024400
 8007170:	03d09000 	.word	0x03d09000
 8007174:	46000000 	.word	0x46000000
 8007178:	4c742400 	.word	0x4c742400
 800717c:	4a742400 	.word	0x4a742400
 8007180:	4bbebc20 	.word	0x4bbebc20

08007184 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007192:	4b53      	ldr	r3, [pc, #332]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b03      	cmp	r3, #3
 800719c:	d101      	bne.n	80071a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e099      	b.n	80072d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80071a2:	4b4f      	ldr	r3, [pc, #316]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a4e      	ldr	r2, [pc, #312]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 80071a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ae:	f7fa fa39 	bl	8001624 <HAL_GetTick>
 80071b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071b4:	e008      	b.n	80071c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071b6:	f7fa fa35 	bl	8001624 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e086      	b.n	80072d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071c8:	4b45      	ldr	r3, [pc, #276]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1f0      	bne.n	80071b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80071d4:	4b42      	ldr	r3, [pc, #264]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 80071d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	031b      	lsls	r3, r3, #12
 80071e2:	493f      	ldr	r1, [pc, #252]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	025b      	lsls	r3, r3, #9
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	3b01      	subs	r3, #1
 8007204:	041b      	lsls	r3, r3, #16
 8007206:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	3b01      	subs	r3, #1
 8007212:	061b      	lsls	r3, r3, #24
 8007214:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007218:	4931      	ldr	r1, [pc, #196]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 800721a:	4313      	orrs	r3, r2
 800721c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800721e:	4b30      	ldr	r3, [pc, #192]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	492d      	ldr	r1, [pc, #180]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 800722c:	4313      	orrs	r3, r2
 800722e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007230:	4b2b      	ldr	r3, [pc, #172]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007234:	f023 0220 	bic.w	r2, r3, #32
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	4928      	ldr	r1, [pc, #160]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 800723e:	4313      	orrs	r3, r2
 8007240:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007242:	4b27      	ldr	r3, [pc, #156]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	4a26      	ldr	r2, [pc, #152]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007248:	f023 0310 	bic.w	r3, r3, #16
 800724c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800724e:	4b24      	ldr	r3, [pc, #144]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007252:	4b24      	ldr	r3, [pc, #144]	@ (80072e4 <RCCEx_PLL2_Config+0x160>)
 8007254:	4013      	ands	r3, r2
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	69d2      	ldr	r2, [r2, #28]
 800725a:	00d2      	lsls	r2, r2, #3
 800725c:	4920      	ldr	r1, [pc, #128]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 800725e:	4313      	orrs	r3, r2
 8007260:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007262:	4b1f      	ldr	r3, [pc, #124]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007266:	4a1e      	ldr	r2, [pc, #120]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007268:	f043 0310 	orr.w	r3, r3, #16
 800726c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d106      	bne.n	8007282 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007274:	4b1a      	ldr	r3, [pc, #104]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007278:	4a19      	ldr	r2, [pc, #100]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 800727a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800727e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007280:	e00f      	b.n	80072a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d106      	bne.n	8007296 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007288:	4b15      	ldr	r3, [pc, #84]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 800728a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728c:	4a14      	ldr	r2, [pc, #80]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 800728e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007292:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007294:	e005      	b.n	80072a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007296:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 8007298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729a:	4a11      	ldr	r2, [pc, #68]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 800729c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80072a2:	4b0f      	ldr	r3, [pc, #60]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a0e      	ldr	r2, [pc, #56]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 80072a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ae:	f7fa f9b9 	bl	8001624 <HAL_GetTick>
 80072b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072b4:	e008      	b.n	80072c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072b6:	f7fa f9b5 	bl	8001624 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e006      	b.n	80072d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072c8:	4b05      	ldr	r3, [pc, #20]	@ (80072e0 <RCCEx_PLL2_Config+0x15c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0f0      	beq.n	80072b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	58024400 	.word	0x58024400
 80072e4:	ffff0007 	.word	0xffff0007

080072e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072f6:	4b53      	ldr	r3, [pc, #332]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d101      	bne.n	8007306 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e099      	b.n	800743a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007306:	4b4f      	ldr	r3, [pc, #316]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a4e      	ldr	r2, [pc, #312]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 800730c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007312:	f7fa f987 	bl	8001624 <HAL_GetTick>
 8007316:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007318:	e008      	b.n	800732c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800731a:	f7fa f983 	bl	8001624 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d901      	bls.n	800732c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e086      	b.n	800743a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800732c:	4b45      	ldr	r3, [pc, #276]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f0      	bne.n	800731a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007338:	4b42      	ldr	r3, [pc, #264]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 800733a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	051b      	lsls	r3, r3, #20
 8007346:	493f      	ldr	r1, [pc, #252]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 8007348:	4313      	orrs	r3, r2
 800734a:	628b      	str	r3, [r1, #40]	@ 0x28
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	3b01      	subs	r3, #1
 8007352:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	3b01      	subs	r3, #1
 800735c:	025b      	lsls	r3, r3, #9
 800735e:	b29b      	uxth	r3, r3
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	3b01      	subs	r3, #1
 8007368:	041b      	lsls	r3, r3, #16
 800736a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800736e:	431a      	orrs	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	3b01      	subs	r3, #1
 8007376:	061b      	lsls	r3, r3, #24
 8007378:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800737c:	4931      	ldr	r1, [pc, #196]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 800737e:	4313      	orrs	r3, r2
 8007380:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007382:	4b30      	ldr	r3, [pc, #192]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 8007384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007386:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	492d      	ldr	r1, [pc, #180]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 8007390:	4313      	orrs	r3, r2
 8007392:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007394:	4b2b      	ldr	r3, [pc, #172]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 8007396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007398:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	4928      	ldr	r1, [pc, #160]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80073a6:	4b27      	ldr	r3, [pc, #156]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073aa:	4a26      	ldr	r2, [pc, #152]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073b2:	4b24      	ldr	r3, [pc, #144]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073b6:	4b24      	ldr	r3, [pc, #144]	@ (8007448 <RCCEx_PLL3_Config+0x160>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	69d2      	ldr	r2, [r2, #28]
 80073be:	00d2      	lsls	r2, r2, #3
 80073c0:	4920      	ldr	r1, [pc, #128]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80073c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80073d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073dc:	4a19      	ldr	r2, [pc, #100]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80073e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073e4:	e00f      	b.n	8007406 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d106      	bne.n	80073fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80073ec:	4b15      	ldr	r3, [pc, #84]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f0:	4a14      	ldr	r2, [pc, #80]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073f8:	e005      	b.n	8007406 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80073fa:	4b12      	ldr	r3, [pc, #72]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fe:	4a11      	ldr	r2, [pc, #68]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 8007400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007404:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007406:	4b0f      	ldr	r3, [pc, #60]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a0e      	ldr	r2, [pc, #56]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 800740c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007412:	f7fa f907 	bl	8001624 <HAL_GetTick>
 8007416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007418:	e008      	b.n	800742c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800741a:	f7fa f903 	bl	8001624 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e006      	b.n	800743a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800742c:	4b05      	ldr	r3, [pc, #20]	@ (8007444 <RCCEx_PLL3_Config+0x15c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
 8007448:	ffff0007 	.word	0xffff0007

0800744c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e10f      	b.n	800767e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a87      	ldr	r2, [pc, #540]	@ (8007688 <HAL_SPI_Init+0x23c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00f      	beq.n	800748e <HAL_SPI_Init+0x42>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a86      	ldr	r2, [pc, #536]	@ (800768c <HAL_SPI_Init+0x240>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00a      	beq.n	800748e <HAL_SPI_Init+0x42>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a84      	ldr	r2, [pc, #528]	@ (8007690 <HAL_SPI_Init+0x244>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d005      	beq.n	800748e <HAL_SPI_Init+0x42>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	2b0f      	cmp	r3, #15
 8007488:	d901      	bls.n	800748e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e0f7      	b.n	800767e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fec0 	bl	8008214 <SPI_GetPacketSize>
 8007494:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a7b      	ldr	r2, [pc, #492]	@ (8007688 <HAL_SPI_Init+0x23c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00c      	beq.n	80074ba <HAL_SPI_Init+0x6e>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a79      	ldr	r2, [pc, #484]	@ (800768c <HAL_SPI_Init+0x240>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d007      	beq.n	80074ba <HAL_SPI_Init+0x6e>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a78      	ldr	r2, [pc, #480]	@ (8007690 <HAL_SPI_Init+0x244>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d002      	beq.n	80074ba <HAL_SPI_Init+0x6e>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b08      	cmp	r3, #8
 80074b8:	d811      	bhi.n	80074de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074be:	4a72      	ldr	r2, [pc, #456]	@ (8007688 <HAL_SPI_Init+0x23c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d009      	beq.n	80074d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a70      	ldr	r2, [pc, #448]	@ (800768c <HAL_SPI_Init+0x240>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d004      	beq.n	80074d8 <HAL_SPI_Init+0x8c>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a6f      	ldr	r2, [pc, #444]	@ (8007690 <HAL_SPI_Init+0x244>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d104      	bne.n	80074e2 <HAL_SPI_Init+0x96>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d901      	bls.n	80074e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e0cd      	b.n	800767e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d106      	bne.n	80074fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7f9 fd66 	bl	8000fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0201 	bic.w	r2, r2, #1
 8007512:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800751e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007528:	d119      	bne.n	800755e <HAL_SPI_Init+0x112>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007532:	d103      	bne.n	800753c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10c      	bne.n	800755e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007548:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800754c:	d107      	bne.n	800755e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800755c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00f      	beq.n	800758a <HAL_SPI_Init+0x13e>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	2b06      	cmp	r3, #6
 8007570:	d90b      	bls.n	800758a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	e007      	b.n	800759a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007598:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a2:	431a      	orrs	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ac:	ea42 0103 	orr.w	r1, r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	431a      	orrs	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075fa:	ea42 0103 	orr.w	r1, r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d113      	bne.n	800763a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007624:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007638:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0201 	bic.w	r2, r2, #1
 8007648:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	40013000 	.word	0x40013000
 800768c:	40003800 	.word	0x40003800
 8007690:	40003c00 	.word	0x40003c00

08007694 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d001      	beq.n	80076b2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80076ae:	2302      	movs	r3, #2
 80076b0:	e126      	b.n	8007900 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_Transmit_DMA+0x2a>
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e11e      	b.n	8007900 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_SPI_Transmit_DMA+0x3c>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e117      	b.n	8007900 <HAL_SPI_Transmit_DMA+0x26c>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2203      	movs	r2, #3
 80076dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	88fa      	ldrh	r2, [r7, #6]
 80076f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	88fa      	ldrh	r2, [r7, #6]
 80076fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007728:	d108      	bne.n	800773c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e009      	b.n	8007750 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800774e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	2b0f      	cmp	r3, #15
 8007756:	d905      	bls.n	8007764 <HAL_SPI_Transmit_DMA+0xd0>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007762:	d10f      	bne.n	8007784 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007768:	2b07      	cmp	r3, #7
 800776a:	d911      	bls.n	8007790 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007776:	d00b      	beq.n	8007790 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800777c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800777e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007782:	d005      	beq.n	8007790 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e0b7      	b.n	8007900 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	2b07      	cmp	r3, #7
 8007796:	d820      	bhi.n	80077da <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077a2:	d109      	bne.n	80077b8 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3301      	adds	r3, #1
 80077ae:	105b      	asrs	r3, r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077c2:	d11e      	bne.n	8007802 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3303      	adds	r3, #3
 80077ce:	109b      	asrs	r3, r3, #2
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80077d8:	e013      	b.n	8007802 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	2b0f      	cmp	r3, #15
 80077e0:	d80f      	bhi.n	8007802 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ec:	d109      	bne.n	8007802 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3301      	adds	r3, #1
 80077f8:	105b      	asrs	r3, r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007806:	4a40      	ldr	r2, [pc, #256]	@ (8007908 <HAL_SPI_Transmit_DMA+0x274>)
 8007808:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800780e:	4a3f      	ldr	r2, [pc, #252]	@ (800790c <HAL_SPI_Transmit_DMA+0x278>)
 8007810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007816:	4a3e      	ldr	r2, [pc, #248]	@ (8007910 <HAL_SPI_Transmit_DMA+0x27c>)
 8007818:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800781e:	2200      	movs	r2, #0
 8007820:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007830:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800783a:	4619      	mov	r1, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3320      	adds	r3, #32
 8007842:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800784a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800784c:	f7fa fba6 	bl	8001f9c <HAL_DMA_Start_IT>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d011      	beq.n	800787a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800785c:	f043 0210 	orr.w	r2, r3, #16
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e042      	b.n	8007900 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007884:	d108      	bne.n	8007898 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6859      	ldr	r1, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b20      	ldr	r3, [pc, #128]	@ (8007914 <HAL_SPI_Transmit_DMA+0x280>)
 8007892:	400b      	ands	r3, r1
 8007894:	6053      	str	r3, [r2, #4]
 8007896:	e009      	b.n	80078ac <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	4b1d      	ldr	r3, [pc, #116]	@ (8007914 <HAL_SPI_Transmit_DMA+0x280>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	88f9      	ldrh	r1, [r7, #6]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	430b      	orrs	r3, r1
 80078aa:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689a      	ldr	r2, [r3, #8]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078ba:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80078ca:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078e4:	d107      	bne.n	80078f6 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078f4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	08008021 	.word	0x08008021
 800790c:	08007f95 	.word	0x08007f95
 8007910:	08008059 	.word	0x08008059
 8007914:	ffff0000 	.word	0xffff0000

08007918 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b01      	cmp	r3, #1
 8007930:	d005      	beq.n	800793e <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_BUSY;
 800793a:	2302      	movs	r3, #2
 800793c:	e127      	b.n	8007b8e <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_SPI_Receive_DMA+0x32>
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e11b      	b.n	8007b8e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800795c:	2b01      	cmp	r3, #1
 800795e:	d101      	bne.n	8007964 <HAL_SPI_Receive_DMA+0x4c>
 8007960:	2302      	movs	r3, #2
 8007962:	e114      	b.n	8007b8e <HAL_SPI_Receive_DMA+0x276>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2204      	movs	r2, #4
 8007970:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80079b6:	d108      	bne.n	80079ca <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	e009      	b.n	80079de <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80079dc:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	2b0f      	cmp	r3, #15
 80079e4:	d905      	bls.n	80079f2 <HAL_SPI_Receive_DMA+0xda>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079f0:	d10f      	bne.n	8007a12 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80079f6:	2b07      	cmp	r3, #7
 80079f8:	d911      	bls.n	8007a1e <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a04:	d00b      	beq.n	8007a1e <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a0a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007a0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a10:	d005      	beq.n	8007a1e <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e0b7      	b.n	8007b8e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a2c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2b07      	cmp	r3, #7
 8007a34:	d820      	bhi.n	8007a78 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a40:	d109      	bne.n	8007a56 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	105b      	asrs	r3, r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a60:	d11e      	bne.n	8007aa0 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3303      	adds	r3, #3
 8007a6c:	109b      	asrs	r3, r3, #2
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a76:	e013      	b.n	8007aa0 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b0f      	cmp	r3, #15
 8007a7e:	d80f      	bhi.n	8007aa0 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a8a:	d109      	bne.n	8007aa0 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3301      	adds	r3, #1
 8007a96:	105b      	asrs	r3, r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8007b98 <HAL_SPI_Receive_DMA+0x280>)
 8007aa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aac:	4a3b      	ldr	r2, [pc, #236]	@ (8007b9c <HAL_SPI_Receive_DMA+0x284>)
 8007aae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ab4:	4a3a      	ldr	r2, [pc, #232]	@ (8007ba0 <HAL_SPI_Receive_DMA+0x288>)
 8007ab6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007abc:	2200      	movs	r2, #0
 8007abe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3330      	adds	r3, #48	@ 0x30
 8007aca:	4619      	mov	r1, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ad8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007ada:	f7fa fa5f 	bl	8001f9c <HAL_DMA_Start_IT>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d011      	beq.n	8007b08 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aea:	f043 0210 	orr.w	r2, r3, #16
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e042      	b.n	8007b8e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b12:	d108      	bne.n	8007b26 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6859      	ldr	r1, [r3, #4]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b21      	ldr	r3, [pc, #132]	@ (8007ba4 <HAL_SPI_Receive_DMA+0x28c>)
 8007b20:	400b      	ands	r3, r1
 8007b22:	6053      	str	r3, [r2, #4]
 8007b24:	e009      	b.n	8007b3a <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba4 <HAL_SPI_Receive_DMA+0x28c>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	88f9      	ldrh	r1, [r7, #6]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	6812      	ldr	r2, [r2, #0]
 8007b36:	430b      	orrs	r3, r1
 8007b38:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b48:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 7250 	orr.w	r2, r2, #832	@ 0x340
 8007b58:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 0201 	orr.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b72:	d107      	bne.n	8007b84 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b82:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	0800803d 	.word	0x0800803d
 8007b9c:	08007fdb 	.word	0x08007fdb
 8007ba0:	08008059 	.word	0x08008059
 8007ba4:	ffff0000 	.word	0xffff0000

08007ba8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	@ 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007bc0:	6a3a      	ldr	r2, [r7, #32]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007bda:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3330      	adds	r3, #48	@ 0x30
 8007be2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d010      	beq.n	8007c10 <HAL_SPI_IRQHandler+0x68>
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c06:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f9b9 	bl	8007f80 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007c0e:	e192      	b.n	8007f36 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d113      	bne.n	8007c42 <HAL_SPI_IRQHandler+0x9a>
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10e      	bne.n	8007c42 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
    handled = 1UL;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10f      	bne.n	8007c6c <HAL_SPI_IRQHandler+0xc4>
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d105      	bne.n	8007c6c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
    handled = 1UL;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10f      	bne.n	8007c96 <HAL_SPI_IRQHandler+0xee>
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
    handled = 1UL;
 8007c92:	2301      	movs	r3, #1
 8007c94:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f040 8147 	bne.w	8007f2c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 808b 	beq.w	8007dc0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	699a      	ldr	r2, [r3, #24]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0208 	orr.w	r2, r2, #8
 8007cb8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	699a      	ldr	r2, [r3, #24]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0210 	orr.w	r2, r2, #16
 8007cc8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cd8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0208 	bic.w	r2, r2, #8
 8007ce8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d13d      	bne.n	8007d74 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007cf8:	e036      	b.n	8007d68 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	2b0f      	cmp	r3, #15
 8007d00:	d90b      	bls.n	8007d1a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d0a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007d0c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d12:	1d1a      	adds	r2, r3, #4
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	665a      	str	r2, [r3, #100]	@ 0x64
 8007d18:	e01d      	b.n	8007d56 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	2b07      	cmp	r3, #7
 8007d20:	d90b      	bls.n	8007d3a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	8812      	ldrh	r2, [r2, #0]
 8007d2a:	b292      	uxth	r2, r2
 8007d2c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d32:	1c9a      	adds	r2, r3, #2
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	665a      	str	r2, [r3, #100]	@ 0x64
 8007d38:	e00d      	b.n	8007d56 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d46:	7812      	ldrb	r2, [r2, #0]
 8007d48:	b2d2      	uxtb	r2, r2
 8007d4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1c2      	bne.n	8007cfa <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9ad 	bl	80080d4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f8ed 	bl	8007f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d92:	e0d0      	b.n	8007f36 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007d94:	7cfb      	ldrb	r3, [r7, #19]
 8007d96:	2b05      	cmp	r3, #5
 8007d98:	d103      	bne.n	8007da2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f8d2 	bl	8007f44 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007da0:	e0c6      	b.n	8007f30 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007da2:	7cfb      	ldrb	r3, [r7, #19]
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d103      	bne.n	8007db0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7f8 fd9b 	bl	80008e4 <HAL_SPI_RxCpltCallback>
    return;
 8007dae:	e0bf      	b.n	8007f30 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007db0:	7cfb      	ldrb	r3, [r7, #19]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	f040 80bc 	bne.w	8007f30 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7f8 fd7d 	bl	80008b8 <HAL_SPI_TxCpltCallback>
    return;
 8007dbe:	e0b7      	b.n	8007f30 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80b5 	beq.w	8007f36 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00f      	beq.n	8007df6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ddc:	f043 0204 	orr.w	r2, r3, #4
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699a      	ldr	r2, [r3, #24]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007df4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00f      	beq.n	8007e20 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e06:	f043 0201 	orr.w	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e1e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00f      	beq.n	8007e4a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e30:	f043 0208 	orr.w	r2, r3, #8
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e48:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00f      	beq.n	8007e74 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0220 	orr.w	r2, r2, #32
 8007e72:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d05a      	beq.n	8007f34 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0201 	bic.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6919      	ldr	r1, [r3, #16]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	4b28      	ldr	r3, [pc, #160]	@ (8007f3c <HAL_SPI_IRQHandler+0x394>)
 8007e9a:	400b      	ands	r3, r1
 8007e9c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007ea4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007ea8:	d138      	bne.n	8007f1c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007eb8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d013      	beq.n	8007eea <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f40 <HAL_SPI_IRQHandler+0x398>)
 8007ec8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fa fdec 	bl	8002aac <HAL_DMA_Abort_IT>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ee0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d020      	beq.n	8007f34 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ef6:	4a12      	ldr	r2, [pc, #72]	@ (8007f40 <HAL_SPI_IRQHandler+0x398>)
 8007ef8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fa fdd4 	bl	8002aac <HAL_DMA_Abort_IT>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d014      	beq.n	8007f34 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f1a:	e00b      	b.n	8007f34 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f821 	bl	8007f6c <HAL_SPI_ErrorCallback>
    return;
 8007f2a:	e003      	b.n	8007f34 <HAL_SPI_IRQHandler+0x38c>
    return;
 8007f2c:	bf00      	nop
 8007f2e:	e002      	b.n	8007f36 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007f30:	bf00      	nop
 8007f32:	e000      	b.n	8007f36 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007f34:	bf00      	nop
  }
}
 8007f36:	3728      	adds	r7, #40	@ 0x28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	fffffc94 	.word	0xfffffc94
 8007f40:	0800809f 	.word	0x0800809f

08007f44 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b07      	cmp	r3, #7
 8007fac:	d011      	beq.n	8007fd2 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fb8:	d103      	bne.n	8007fc2 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7f8 fc7c 	bl	80008b8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8007fc0:	e007      	b.n	8007fd2 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f042 0208 	orr.w	r2, r2, #8
 8007fd0:	611a      	str	r2, [r3, #16]
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe6:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b07      	cmp	r3, #7
 8007ff2:	d011      	beq.n	8008018 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ffe:	d103      	bne.n	8008008 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7f8 fc6f 	bl	80008e4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008006:	e007      	b.n	8008018 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691a      	ldr	r2, [r3, #16]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f042 0208 	orr.w	r2, r2, #8
 8008016:	611a      	str	r2, [r3, #16]
}
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802c:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff ff92 	bl	8007f58 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008048:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7f8 fc78 	bl	8000940 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008064:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7fb fe90 	bl	8003d8c <HAL_DMA_GetError>
 800806c:	4603      	mov	r3, r0
 800806e:	2b02      	cmp	r3, #2
 8008070:	d011      	beq.n	8008096 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 f82e 	bl	80080d4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800807e:	f043 0210 	orr.w	r2, r3, #16
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f7ff ff6b 	bl	8007f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080aa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff ff51 	bl	8007f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0208 	orr.w	r2, r2, #8
 80080f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	699a      	ldr	r2, [r3, #24]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0210 	orr.w	r2, r2, #16
 8008102:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0201 	bic.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6919      	ldr	r1, [r3, #16]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b3c      	ldr	r3, [pc, #240]	@ (8008210 <SPI_CloseTransfer+0x13c>)
 8008120:	400b      	ands	r3, r1
 8008122:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008132:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b04      	cmp	r3, #4
 800813e:	d014      	beq.n	800816a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00f      	beq.n	800816a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008150:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	699a      	ldr	r2, [r3, #24]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f042 0220 	orr.w	r2, r2, #32
 8008168:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008170:	b2db      	uxtb	r3, r3
 8008172:	2b03      	cmp	r3, #3
 8008174:	d014      	beq.n	80081a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00f      	beq.n	80081a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008186:	f043 0204 	orr.w	r2, r3, #4
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800819e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00f      	beq.n	80081ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081b0:	f043 0201 	orr.w	r2, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00f      	beq.n	80081f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081da:	f043 0208 	orr.w	r2, r3, #8
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008204:	bf00      	nop
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	fffffc90 	.word	0xfffffc90

08008214 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008220:	095b      	lsrs	r3, r3, #5
 8008222:	3301      	adds	r3, #1
 8008224:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	3301      	adds	r3, #1
 800822c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	3307      	adds	r3, #7
 8008232:	08db      	lsrs	r3, r3, #3
 8008234:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	fb02 f303 	mul.w	r3, r2, r3
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e049      	b.n	80082f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d106      	bne.n	8008276 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f841 	bl	80082f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3304      	adds	r3, #4
 8008286:	4619      	mov	r1, r3
 8008288:	4610      	mov	r0, r2
 800828a:	f000 f9f5 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b01      	cmp	r3, #1
 800831e:	d001      	beq.n	8008324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e05e      	b.n	80083e2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a2b      	ldr	r2, [pc, #172]	@ (80083f0 <HAL_TIM_Base_Start_IT+0xe4>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d02c      	beq.n	80083a0 <HAL_TIM_Base_Start_IT+0x94>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800834e:	d027      	beq.n	80083a0 <HAL_TIM_Base_Start_IT+0x94>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a27      	ldr	r2, [pc, #156]	@ (80083f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d022      	beq.n	80083a0 <HAL_TIM_Base_Start_IT+0x94>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a26      	ldr	r2, [pc, #152]	@ (80083f8 <HAL_TIM_Base_Start_IT+0xec>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d01d      	beq.n	80083a0 <HAL_TIM_Base_Start_IT+0x94>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a24      	ldr	r2, [pc, #144]	@ (80083fc <HAL_TIM_Base_Start_IT+0xf0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d018      	beq.n	80083a0 <HAL_TIM_Base_Start_IT+0x94>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a23      	ldr	r2, [pc, #140]	@ (8008400 <HAL_TIM_Base_Start_IT+0xf4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d013      	beq.n	80083a0 <HAL_TIM_Base_Start_IT+0x94>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a21      	ldr	r2, [pc, #132]	@ (8008404 <HAL_TIM_Base_Start_IT+0xf8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00e      	beq.n	80083a0 <HAL_TIM_Base_Start_IT+0x94>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a20      	ldr	r2, [pc, #128]	@ (8008408 <HAL_TIM_Base_Start_IT+0xfc>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d009      	beq.n	80083a0 <HAL_TIM_Base_Start_IT+0x94>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a1e      	ldr	r2, [pc, #120]	@ (800840c <HAL_TIM_Base_Start_IT+0x100>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d004      	beq.n	80083a0 <HAL_TIM_Base_Start_IT+0x94>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1d      	ldr	r2, [pc, #116]	@ (8008410 <HAL_TIM_Base_Start_IT+0x104>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d115      	bne.n	80083cc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008414 <HAL_TIM_Base_Start_IT+0x108>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b06      	cmp	r3, #6
 80083b0:	d015      	beq.n	80083de <HAL_TIM_Base_Start_IT+0xd2>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b8:	d011      	beq.n	80083de <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0201 	orr.w	r2, r2, #1
 80083c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ca:	e008      	b.n	80083de <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0201 	orr.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	e000      	b.n	80083e0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40010000 	.word	0x40010000
 80083f4:	40000400 	.word	0x40000400
 80083f8:	40000800 	.word	0x40000800
 80083fc:	40000c00 	.word	0x40000c00
 8008400:	40010400 	.word	0x40010400
 8008404:	40001800 	.word	0x40001800
 8008408:	40014000 	.word	0x40014000
 800840c:	4000e000 	.word	0x4000e000
 8008410:	4000e400 	.word	0x4000e400
 8008414:	00010007 	.word	0x00010007

08008418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d020      	beq.n	800847c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01b      	beq.n	800847c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0202 	mvn.w	r2, #2
 800844c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	f003 0303 	and.w	r3, r3, #3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f8e9 	bl	800863a <HAL_TIM_IC_CaptureCallback>
 8008468:	e005      	b.n	8008476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f8db 	bl	8008626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f8ec 	bl	800864e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f003 0304 	and.w	r3, r3, #4
 8008482:	2b00      	cmp	r3, #0
 8008484:	d020      	beq.n	80084c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01b      	beq.n	80084c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f06f 0204 	mvn.w	r2, #4
 8008498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f8c3 	bl	800863a <HAL_TIM_IC_CaptureCallback>
 80084b4:	e005      	b.n	80084c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f8b5 	bl	8008626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f8c6 	bl	800864e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d020      	beq.n	8008514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f003 0308 	and.w	r3, r3, #8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01b      	beq.n	8008514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f06f 0208 	mvn.w	r2, #8
 80084e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2204      	movs	r2, #4
 80084ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f89d 	bl	800863a <HAL_TIM_IC_CaptureCallback>
 8008500:	e005      	b.n	800850e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f88f 	bl	8008626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f8a0 	bl	800864e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f003 0310 	and.w	r3, r3, #16
 800851a:	2b00      	cmp	r3, #0
 800851c:	d020      	beq.n	8008560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01b      	beq.n	8008560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0210 	mvn.w	r2, #16
 8008530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2208      	movs	r2, #8
 8008536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f877 	bl	800863a <HAL_TIM_IC_CaptureCallback>
 800854c:	e005      	b.n	800855a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f869 	bl	8008626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f87a 	bl	800864e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00c      	beq.n	8008584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d007      	beq.n	8008584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f06f 0201 	mvn.w	r2, #1
 800857c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7f8 fcec 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00c      	beq.n	80085b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d007      	beq.n	80085b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80085aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f91f 	bl	80087f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00c      	beq.n	80085d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80085ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f917 	bl	8008804 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00c      	beq.n	80085fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d007      	beq.n	80085fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f834 	bl	8008662 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f003 0320 	and.w	r3, r3, #32
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00c      	beq.n	800861e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f06f 0220 	mvn.w	r2, #32
 8008616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f8df 	bl	80087dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800861e:	bf00      	nop
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800862e:	bf00      	nop
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008642:	bf00      	nop
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
	...

08008678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a4a      	ldr	r2, [pc, #296]	@ (80087b4 <TIM_Base_SetConfig+0x13c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008696:	d00f      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a47      	ldr	r2, [pc, #284]	@ (80087b8 <TIM_Base_SetConfig+0x140>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00b      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a46      	ldr	r2, [pc, #280]	@ (80087bc <TIM_Base_SetConfig+0x144>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d007      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a45      	ldr	r2, [pc, #276]	@ (80087c0 <TIM_Base_SetConfig+0x148>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a44      	ldr	r2, [pc, #272]	@ (80087c4 <TIM_Base_SetConfig+0x14c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d108      	bne.n	80086ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a39      	ldr	r2, [pc, #228]	@ (80087b4 <TIM_Base_SetConfig+0x13c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d027      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d8:	d023      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a36      	ldr	r2, [pc, #216]	@ (80087b8 <TIM_Base_SetConfig+0x140>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d01f      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a35      	ldr	r2, [pc, #212]	@ (80087bc <TIM_Base_SetConfig+0x144>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01b      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a34      	ldr	r2, [pc, #208]	@ (80087c0 <TIM_Base_SetConfig+0x148>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d017      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a33      	ldr	r2, [pc, #204]	@ (80087c4 <TIM_Base_SetConfig+0x14c>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d013      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a32      	ldr	r2, [pc, #200]	@ (80087c8 <TIM_Base_SetConfig+0x150>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00f      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a31      	ldr	r2, [pc, #196]	@ (80087cc <TIM_Base_SetConfig+0x154>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00b      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a30      	ldr	r2, [pc, #192]	@ (80087d0 <TIM_Base_SetConfig+0x158>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d007      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a2f      	ldr	r2, [pc, #188]	@ (80087d4 <TIM_Base_SetConfig+0x15c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a2e      	ldr	r2, [pc, #184]	@ (80087d8 <TIM_Base_SetConfig+0x160>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d108      	bne.n	8008734 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a16      	ldr	r2, [pc, #88]	@ (80087b4 <TIM_Base_SetConfig+0x13c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00f      	beq.n	8008780 <TIM_Base_SetConfig+0x108>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a18      	ldr	r2, [pc, #96]	@ (80087c4 <TIM_Base_SetConfig+0x14c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00b      	beq.n	8008780 <TIM_Base_SetConfig+0x108>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a17      	ldr	r2, [pc, #92]	@ (80087c8 <TIM_Base_SetConfig+0x150>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d007      	beq.n	8008780 <TIM_Base_SetConfig+0x108>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a16      	ldr	r2, [pc, #88]	@ (80087cc <TIM_Base_SetConfig+0x154>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_Base_SetConfig+0x108>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <TIM_Base_SetConfig+0x158>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d103      	bne.n	8008788 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	691a      	ldr	r2, [r3, #16]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b01      	cmp	r3, #1
 8008798:	d105      	bne.n	80087a6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f023 0201 	bic.w	r2, r3, #1
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	611a      	str	r2, [r3, #16]
  }
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40000400 	.word	0x40000400
 80087bc:	40000800 	.word	0x40000800
 80087c0:	40000c00 	.word	0x40000c00
 80087c4:	40010400 	.word	0x40010400
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40014400 	.word	0x40014400
 80087d0:	40014800 	.word	0x40014800
 80087d4:	4000e000 	.word	0x4000e000
 80087d8:	4000e400 	.word	0x4000e400

080087dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e042      	b.n	80088b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008830:	2b00      	cmp	r3, #0
 8008832:	d106      	bne.n	8008842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7f8 fc79 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2224      	movs	r2, #36	@ 0x24
 8008846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0201 	bic.w	r2, r2, #1
 8008858:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fb3a 	bl	8009edc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fccb 	bl	8009204 <UART_SetConfig>
 800886e:	4603      	mov	r3, r0
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e01b      	b.n	80088b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f042 0201 	orr.w	r2, r2, #1
 80088a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 fbb9 	bl	800a020 <UART_CheckIdleState>
 80088ae:	4603      	mov	r3, r0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	@ 0x28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d167      	bne.n	80089a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <HAL_UART_Transmit_DMA+0x24>
 80088d6:	88fb      	ldrh	r3, [r7, #6]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e060      	b.n	80089a2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	88fa      	ldrh	r2, [r7, #6]
 80088ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	88fa      	ldrh	r2, [r7, #6]
 80088f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2221      	movs	r2, #33	@ 0x21
 8008902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d028      	beq.n	8008960 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008912:	4a26      	ldr	r2, [pc, #152]	@ (80089ac <HAL_UART_Transmit_DMA+0xf4>)
 8008914:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800891a:	4a25      	ldr	r2, [pc, #148]	@ (80089b0 <HAL_UART_Transmit_DMA+0xf8>)
 800891c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008922:	4a24      	ldr	r2, [pc, #144]	@ (80089b4 <HAL_UART_Transmit_DMA+0xfc>)
 8008924:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800892a:	2200      	movs	r2, #0
 800892c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008936:	4619      	mov	r1, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3328      	adds	r3, #40	@ 0x28
 800893e:	461a      	mov	r2, r3
 8008940:	88fb      	ldrh	r3, [r7, #6]
 8008942:	f7f9 fb2b 	bl	8001f9c <HAL_DMA_Start_IT>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2210      	movs	r2, #16
 8008950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2220      	movs	r2, #32
 8008958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e020      	b.n	80089a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2240      	movs	r2, #64	@ 0x40
 8008966:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3308      	adds	r3, #8
 800896e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	613b      	str	r3, [r7, #16]
   return(result);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800897e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3308      	adds	r3, #8
 8008986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008988:	623a      	str	r2, [r7, #32]
 800898a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	69f9      	ldr	r1, [r7, #28]
 800898e:	6a3a      	ldr	r2, [r7, #32]
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	61bb      	str	r3, [r7, #24]
   return(result);
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e5      	bne.n	8008968 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	e000      	b.n	80089a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80089a0:	2302      	movs	r3, #2
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3728      	adds	r7, #40	@ 0x28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	0800a4ed 	.word	0x0800a4ed
 80089b0:	0800a583 	.word	0x0800a583
 80089b4:	0800a705 	.word	0x0800a705

080089b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b08a      	sub	sp, #40	@ 0x28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d137      	bne.n	8008a40 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d002      	beq.n	80089dc <HAL_UART_Receive_DMA+0x24>
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e030      	b.n	8008a42 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a18      	ldr	r2, [pc, #96]	@ (8008a4c <HAL_UART_Receive_DMA+0x94>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d01f      	beq.n	8008a30 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d018      	beq.n	8008a30 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	623b      	str	r3, [r7, #32]
 8008a1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	69f9      	ldr	r1, [r7, #28]
 8008a22:	6a3a      	ldr	r2, [r7, #32]
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e6      	bne.n	80089fe <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a30:	88fb      	ldrh	r3, [r7, #6]
 8008a32:	461a      	mov	r2, r3
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f001 fc0a 	bl	800a250 <UART_Start_Receive_DMA>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	e000      	b.n	8008a42 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a40:	2302      	movs	r3, #2
  }
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3728      	adds	r7, #40	@ 0x28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	58000c00 	.word	0x58000c00

08008a50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b0ba      	sub	sp, #232	@ 0xe8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a7e:	4013      	ands	r3, r2
 8008a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d11b      	bne.n	8008ac4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d015      	beq.n	8008ac4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d105      	bne.n	8008ab0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d009      	beq.n	8008ac4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 8377 	beq.w	80091a8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	4798      	blx	r3
      }
      return;
 8008ac2:	e371      	b.n	80091a8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8123 	beq.w	8008d14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ace:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8008d08 <HAL_UART_IRQHandler+0x2b8>)
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d106      	bne.n	8008ae8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ada:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008ade:	4b8b      	ldr	r3, [pc, #556]	@ (8008d0c <HAL_UART_IRQHandler+0x2bc>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 8116 	beq.w	8008d14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d011      	beq.n	8008b18 <HAL_UART_IRQHandler+0xc8>
 8008af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2201      	movs	r2, #1
 8008b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0e:	f043 0201 	orr.w	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d011      	beq.n	8008b48 <HAL_UART_IRQHandler+0xf8>
 8008b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2202      	movs	r2, #2
 8008b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3e:	f043 0204 	orr.w	r2, r3, #4
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d011      	beq.n	8008b78 <HAL_UART_IRQHandler+0x128>
 8008b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2204      	movs	r2, #4
 8008b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b6e:	f043 0202 	orr.w	r2, r3, #2
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d017      	beq.n	8008bb4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d105      	bne.n	8008b9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b94:	4b5c      	ldr	r3, [pc, #368]	@ (8008d08 <HAL_UART_IRQHandler+0x2b8>)
 8008b96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008baa:	f043 0208 	orr.w	r2, r3, #8
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d012      	beq.n	8008be6 <HAL_UART_IRQHandler+0x196>
 8008bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00c      	beq.n	8008be6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bdc:	f043 0220 	orr.w	r2, r3, #32
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 82dd 	beq.w	80091ac <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d013      	beq.n	8008c26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c02:	f003 0320 	and.w	r3, r3, #32
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d105      	bne.n	8008c16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c3a:	2b40      	cmp	r3, #64	@ 0x40
 8008c3c:	d005      	beq.n	8008c4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d054      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 fbe8 	bl	800a420 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c5a:	2b40      	cmp	r3, #64	@ 0x40
 8008c5c:	d146      	bne.n	8008cec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3308      	adds	r3, #8
 8008c64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3308      	adds	r3, #8
 8008c86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1d9      	bne.n	8008c5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d017      	beq.n	8008ce4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cba:	4a15      	ldr	r2, [pc, #84]	@ (8008d10 <HAL_UART_IRQHandler+0x2c0>)
 8008cbc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7f9 fef1 	bl	8002aac <HAL_DMA_Abort_IT>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d019      	beq.n	8008d04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008cde:	4610      	mov	r0, r2
 8008ce0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce2:	e00f      	b.n	8008d04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fa77 	bl	80091d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cea:	e00b      	b.n	8008d04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fa73 	bl	80091d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf2:	e007      	b.n	8008d04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa6f 	bl	80091d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008d02:	e253      	b.n	80091ac <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d04:	bf00      	nop
    return;
 8008d06:	e251      	b.n	80091ac <HAL_UART_IRQHandler+0x75c>
 8008d08:	10000001 	.word	0x10000001
 8008d0c:	04000120 	.word	0x04000120
 8008d10:	0800a785 	.word	0x0800a785

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	f040 81e7 	bne.w	80090ec <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d22:	f003 0310 	and.w	r3, r3, #16
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 81e0 	beq.w	80090ec <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 81d9 	beq.w	80090ec <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2210      	movs	r2, #16
 8008d40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4c:	2b40      	cmp	r3, #64	@ 0x40
 8008d4e:	f040 8151 	bne.w	8008ff4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a96      	ldr	r2, [pc, #600]	@ (8008fb4 <HAL_UART_IRQHandler+0x564>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d068      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a93      	ldr	r2, [pc, #588]	@ (8008fb8 <HAL_UART_IRQHandler+0x568>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d061      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a91      	ldr	r2, [pc, #580]	@ (8008fbc <HAL_UART_IRQHandler+0x56c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d05a      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a8e      	ldr	r2, [pc, #568]	@ (8008fc0 <HAL_UART_IRQHandler+0x570>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d053      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a8c      	ldr	r2, [pc, #560]	@ (8008fc4 <HAL_UART_IRQHandler+0x574>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d04c      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a89      	ldr	r2, [pc, #548]	@ (8008fc8 <HAL_UART_IRQHandler+0x578>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d045      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a87      	ldr	r2, [pc, #540]	@ (8008fcc <HAL_UART_IRQHandler+0x57c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d03e      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a84      	ldr	r2, [pc, #528]	@ (8008fd0 <HAL_UART_IRQHandler+0x580>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d037      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a82      	ldr	r2, [pc, #520]	@ (8008fd4 <HAL_UART_IRQHandler+0x584>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d030      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a7f      	ldr	r2, [pc, #508]	@ (8008fd8 <HAL_UART_IRQHandler+0x588>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d029      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a7d      	ldr	r2, [pc, #500]	@ (8008fdc <HAL_UART_IRQHandler+0x58c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d022      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a7a      	ldr	r2, [pc, #488]	@ (8008fe0 <HAL_UART_IRQHandler+0x590>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d01b      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a78      	ldr	r2, [pc, #480]	@ (8008fe4 <HAL_UART_IRQHandler+0x594>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d014      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a75      	ldr	r2, [pc, #468]	@ (8008fe8 <HAL_UART_IRQHandler+0x598>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d00d      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a73      	ldr	r2, [pc, #460]	@ (8008fec <HAL_UART_IRQHandler+0x59c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d006      	beq.n	8008e32 <HAL_UART_IRQHandler+0x3e2>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a70      	ldr	r2, [pc, #448]	@ (8008ff0 <HAL_UART_IRQHandler+0x5a0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d106      	bne.n	8008e40 <HAL_UART_IRQHandler+0x3f0>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	e005      	b.n	8008e4c <HAL_UART_IRQHandler+0x3fc>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 81ab 	beq.w	80091b0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e64:	429a      	cmp	r2, r3
 8008e66:	f080 81a3 	bcs.w	80091b0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e80:	f000 8087 	beq.w	8008f92 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008eb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1da      	bne.n	8008e84 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ed8:	e853 3f00 	ldrex	r3, [r3]
 8008edc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ee0:	f023 0301 	bic.w	r3, r3, #1
 8008ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3308      	adds	r3, #8
 8008eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ef2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e1      	bne.n	8008ece <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3308      	adds	r3, #8
 8008f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e3      	bne.n	8008f0a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f58:	e853 3f00 	ldrex	r3, [r3]
 8008f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f60:	f023 0310 	bic.w	r3, r3, #16
 8008f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e4      	bne.n	8008f50 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7f9 fa6f 	bl	8002470 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2202      	movs	r2, #2
 8008f96:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f91d 	bl	80091ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fb2:	e0fd      	b.n	80091b0 <HAL_UART_IRQHandler+0x760>
 8008fb4:	40020010 	.word	0x40020010
 8008fb8:	40020028 	.word	0x40020028
 8008fbc:	40020040 	.word	0x40020040
 8008fc0:	40020058 	.word	0x40020058
 8008fc4:	40020070 	.word	0x40020070
 8008fc8:	40020088 	.word	0x40020088
 8008fcc:	400200a0 	.word	0x400200a0
 8008fd0:	400200b8 	.word	0x400200b8
 8008fd4:	40020410 	.word	0x40020410
 8008fd8:	40020428 	.word	0x40020428
 8008fdc:	40020440 	.word	0x40020440
 8008fe0:	40020458 	.word	0x40020458
 8008fe4:	40020470 	.word	0x40020470
 8008fe8:	40020488 	.word	0x40020488
 8008fec:	400204a0 	.word	0x400204a0
 8008ff0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009000:	b29b      	uxth	r3, r3
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800900e:	b29b      	uxth	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80cf 	beq.w	80091b4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009016:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80ca 	beq.w	80091b4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800902e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009034:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009042:	647b      	str	r3, [r7, #68]	@ 0x44
 8009044:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009046:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009048:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e4      	bne.n	8009020 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3308      	adds	r3, #8
 800905c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	e853 3f00 	ldrex	r3, [r3]
 8009064:	623b      	str	r3, [r7, #32]
   return(result);
 8009066:	6a3a      	ldr	r2, [r7, #32]
 8009068:	4b55      	ldr	r3, [pc, #340]	@ (80091c0 <HAL_UART_IRQHandler+0x770>)
 800906a:	4013      	ands	r3, r2
 800906c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3308      	adds	r3, #8
 8009076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800907a:	633a      	str	r2, [r7, #48]	@ 0x30
 800907c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e3      	bne.n	8009056 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f023 0310 	bic.w	r3, r3, #16
 80090b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	69b9      	ldr	r1, [r7, #24]
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	617b      	str	r3, [r7, #20]
   return(result);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e4      	bne.n	80090a2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2202      	movs	r2, #2
 80090dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f881 	bl	80091ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090ea:	e063      	b.n	80091b4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00e      	beq.n	8009116 <HAL_UART_IRQHandler+0x6c6>
 80090f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d008      	beq.n	8009116 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800910c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f001 fb79 	bl	800a806 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009114:	e051      	b.n	80091ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800911a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800911e:	2b00      	cmp	r3, #0
 8009120:	d014      	beq.n	800914c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912a:	2b00      	cmp	r3, #0
 800912c:	d105      	bne.n	800913a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800912e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d008      	beq.n	800914c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800913e:	2b00      	cmp	r3, #0
 8009140:	d03a      	beq.n	80091b8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	4798      	blx	r3
    }
    return;
 800914a:	e035      	b.n	80091b8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800914c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	d009      	beq.n	800916c <HAL_UART_IRQHandler+0x71c>
 8009158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800915c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 fb23 	bl	800a7b0 <UART_EndTransmit_IT>
    return;
 800916a:	e026      	b.n	80091ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800916c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d009      	beq.n	800918c <HAL_UART_IRQHandler+0x73c>
 8009178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800917c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fb52 	bl	800a82e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800918a:	e016      	b.n	80091ba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800918c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d010      	beq.n	80091ba <HAL_UART_IRQHandler+0x76a>
 8009198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800919c:	2b00      	cmp	r3, #0
 800919e:	da0c      	bge.n	80091ba <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 fb3a 	bl	800a81a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091a6:	e008      	b.n	80091ba <HAL_UART_IRQHandler+0x76a>
      return;
 80091a8:	bf00      	nop
 80091aa:	e006      	b.n	80091ba <HAL_UART_IRQHandler+0x76a>
    return;
 80091ac:	bf00      	nop
 80091ae:	e004      	b.n	80091ba <HAL_UART_IRQHandler+0x76a>
      return;
 80091b0:	bf00      	nop
 80091b2:	e002      	b.n	80091ba <HAL_UART_IRQHandler+0x76a>
      return;
 80091b4:	bf00      	nop
 80091b6:	e000      	b.n	80091ba <HAL_UART_IRQHandler+0x76a>
    return;
 80091b8:	bf00      	nop
  }
}
 80091ba:	37e8      	adds	r7, #232	@ 0xe8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	effffffe 	.word	0xeffffffe

080091c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009208:	b092      	sub	sp, #72	@ 0x48
 800920a:	af00      	add	r7, sp, #0
 800920c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	689a      	ldr	r2, [r3, #8]
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	431a      	orrs	r2, r3
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	431a      	orrs	r2, r3
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	4313      	orrs	r3, r2
 800922a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4bbe      	ldr	r3, [pc, #760]	@ (800952c <UART_SetConfig+0x328>)
 8009234:	4013      	ands	r3, r2
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	6812      	ldr	r2, [r2, #0]
 800923a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800923c:	430b      	orrs	r3, r1
 800923e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4ab3      	ldr	r2, [pc, #716]	@ (8009530 <UART_SetConfig+0x32c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d004      	beq.n	8009270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800926c:	4313      	orrs	r3, r2
 800926e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689a      	ldr	r2, [r3, #8]
 8009276:	4baf      	ldr	r3, [pc, #700]	@ (8009534 <UART_SetConfig+0x330>)
 8009278:	4013      	ands	r3, r2
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	6812      	ldr	r2, [r2, #0]
 800927e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009280:	430b      	orrs	r3, r1
 8009282:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928a:	f023 010f 	bic.w	r1, r3, #15
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4aa6      	ldr	r2, [pc, #664]	@ (8009538 <UART_SetConfig+0x334>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d177      	bne.n	8009394 <UART_SetConfig+0x190>
 80092a4:	4ba5      	ldr	r3, [pc, #660]	@ (800953c <UART_SetConfig+0x338>)
 80092a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092ac:	2b28      	cmp	r3, #40	@ 0x28
 80092ae:	d86d      	bhi.n	800938c <UART_SetConfig+0x188>
 80092b0:	a201      	add	r2, pc, #4	@ (adr r2, 80092b8 <UART_SetConfig+0xb4>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	0800935d 	.word	0x0800935d
 80092bc:	0800938d 	.word	0x0800938d
 80092c0:	0800938d 	.word	0x0800938d
 80092c4:	0800938d 	.word	0x0800938d
 80092c8:	0800938d 	.word	0x0800938d
 80092cc:	0800938d 	.word	0x0800938d
 80092d0:	0800938d 	.word	0x0800938d
 80092d4:	0800938d 	.word	0x0800938d
 80092d8:	08009365 	.word	0x08009365
 80092dc:	0800938d 	.word	0x0800938d
 80092e0:	0800938d 	.word	0x0800938d
 80092e4:	0800938d 	.word	0x0800938d
 80092e8:	0800938d 	.word	0x0800938d
 80092ec:	0800938d 	.word	0x0800938d
 80092f0:	0800938d 	.word	0x0800938d
 80092f4:	0800938d 	.word	0x0800938d
 80092f8:	0800936d 	.word	0x0800936d
 80092fc:	0800938d 	.word	0x0800938d
 8009300:	0800938d 	.word	0x0800938d
 8009304:	0800938d 	.word	0x0800938d
 8009308:	0800938d 	.word	0x0800938d
 800930c:	0800938d 	.word	0x0800938d
 8009310:	0800938d 	.word	0x0800938d
 8009314:	0800938d 	.word	0x0800938d
 8009318:	08009375 	.word	0x08009375
 800931c:	0800938d 	.word	0x0800938d
 8009320:	0800938d 	.word	0x0800938d
 8009324:	0800938d 	.word	0x0800938d
 8009328:	0800938d 	.word	0x0800938d
 800932c:	0800938d 	.word	0x0800938d
 8009330:	0800938d 	.word	0x0800938d
 8009334:	0800938d 	.word	0x0800938d
 8009338:	0800937d 	.word	0x0800937d
 800933c:	0800938d 	.word	0x0800938d
 8009340:	0800938d 	.word	0x0800938d
 8009344:	0800938d 	.word	0x0800938d
 8009348:	0800938d 	.word	0x0800938d
 800934c:	0800938d 	.word	0x0800938d
 8009350:	0800938d 	.word	0x0800938d
 8009354:	0800938d 	.word	0x0800938d
 8009358:	08009385 	.word	0x08009385
 800935c:	2301      	movs	r3, #1
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009362:	e326      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009364:	2304      	movs	r3, #4
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800936a:	e322      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800936c:	2308      	movs	r3, #8
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009372:	e31e      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009374:	2310      	movs	r3, #16
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937a:	e31a      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800937c:	2320      	movs	r3, #32
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009382:	e316      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009384:	2340      	movs	r3, #64	@ 0x40
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938a:	e312      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800938c:	2380      	movs	r3, #128	@ 0x80
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009392:	e30e      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a69      	ldr	r2, [pc, #420]	@ (8009540 <UART_SetConfig+0x33c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d130      	bne.n	8009400 <UART_SetConfig+0x1fc>
 800939e:	4b67      	ldr	r3, [pc, #412]	@ (800953c <UART_SetConfig+0x338>)
 80093a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a2:	f003 0307 	and.w	r3, r3, #7
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	d826      	bhi.n	80093f8 <UART_SetConfig+0x1f4>
 80093aa:	a201      	add	r2, pc, #4	@ (adr r2, 80093b0 <UART_SetConfig+0x1ac>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	080093c9 	.word	0x080093c9
 80093b4:	080093d1 	.word	0x080093d1
 80093b8:	080093d9 	.word	0x080093d9
 80093bc:	080093e1 	.word	0x080093e1
 80093c0:	080093e9 	.word	0x080093e9
 80093c4:	080093f1 	.word	0x080093f1
 80093c8:	2300      	movs	r3, #0
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ce:	e2f0      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80093d0:	2304      	movs	r3, #4
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d6:	e2ec      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80093d8:	2308      	movs	r3, #8
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e2e8      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80093e0:	2310      	movs	r3, #16
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e2e4      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80093e8:	2320      	movs	r3, #32
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e2e0      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80093f0:	2340      	movs	r3, #64	@ 0x40
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e2dc      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80093f8:	2380      	movs	r3, #128	@ 0x80
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e2d8      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a4f      	ldr	r2, [pc, #316]	@ (8009544 <UART_SetConfig+0x340>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d130      	bne.n	800946c <UART_SetConfig+0x268>
 800940a:	4b4c      	ldr	r3, [pc, #304]	@ (800953c <UART_SetConfig+0x338>)
 800940c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	2b05      	cmp	r3, #5
 8009414:	d826      	bhi.n	8009464 <UART_SetConfig+0x260>
 8009416:	a201      	add	r2, pc, #4	@ (adr r2, 800941c <UART_SetConfig+0x218>)
 8009418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941c:	08009435 	.word	0x08009435
 8009420:	0800943d 	.word	0x0800943d
 8009424:	08009445 	.word	0x08009445
 8009428:	0800944d 	.word	0x0800944d
 800942c:	08009455 	.word	0x08009455
 8009430:	0800945d 	.word	0x0800945d
 8009434:	2300      	movs	r3, #0
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943a:	e2ba      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800943c:	2304      	movs	r3, #4
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009442:	e2b6      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009444:	2308      	movs	r3, #8
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e2b2      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800944c:	2310      	movs	r3, #16
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e2ae      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009454:	2320      	movs	r3, #32
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e2aa      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800945c:	2340      	movs	r3, #64	@ 0x40
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e2a6      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009464:	2380      	movs	r3, #128	@ 0x80
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e2a2      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a35      	ldr	r2, [pc, #212]	@ (8009548 <UART_SetConfig+0x344>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d130      	bne.n	80094d8 <UART_SetConfig+0x2d4>
 8009476:	4b31      	ldr	r3, [pc, #196]	@ (800953c <UART_SetConfig+0x338>)
 8009478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800947a:	f003 0307 	and.w	r3, r3, #7
 800947e:	2b05      	cmp	r3, #5
 8009480:	d826      	bhi.n	80094d0 <UART_SetConfig+0x2cc>
 8009482:	a201      	add	r2, pc, #4	@ (adr r2, 8009488 <UART_SetConfig+0x284>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	080094a1 	.word	0x080094a1
 800948c:	080094a9 	.word	0x080094a9
 8009490:	080094b1 	.word	0x080094b1
 8009494:	080094b9 	.word	0x080094b9
 8009498:	080094c1 	.word	0x080094c1
 800949c:	080094c9 	.word	0x080094c9
 80094a0:	2300      	movs	r3, #0
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a6:	e284      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80094a8:	2304      	movs	r3, #4
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ae:	e280      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80094b0:	2308      	movs	r3, #8
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e27c      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80094b8:	2310      	movs	r3, #16
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e278      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80094c0:	2320      	movs	r3, #32
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e274      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80094c8:	2340      	movs	r3, #64	@ 0x40
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e270      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80094d0:	2380      	movs	r3, #128	@ 0x80
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e26c      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a1b      	ldr	r2, [pc, #108]	@ (800954c <UART_SetConfig+0x348>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d142      	bne.n	8009568 <UART_SetConfig+0x364>
 80094e2:	4b16      	ldr	r3, [pc, #88]	@ (800953c <UART_SetConfig+0x338>)
 80094e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d838      	bhi.n	8009560 <UART_SetConfig+0x35c>
 80094ee:	a201      	add	r2, pc, #4	@ (adr r2, 80094f4 <UART_SetConfig+0x2f0>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	0800950d 	.word	0x0800950d
 80094f8:	08009515 	.word	0x08009515
 80094fc:	0800951d 	.word	0x0800951d
 8009500:	08009525 	.word	0x08009525
 8009504:	08009551 	.word	0x08009551
 8009508:	08009559 	.word	0x08009559
 800950c:	2300      	movs	r3, #0
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009512:	e24e      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009514:	2304      	movs	r3, #4
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951a:	e24a      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800951c:	2308      	movs	r3, #8
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e246      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009524:	2310      	movs	r3, #16
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e242      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800952c:	cfff69f3 	.word	0xcfff69f3
 8009530:	58000c00 	.word	0x58000c00
 8009534:	11fff4ff 	.word	0x11fff4ff
 8009538:	40011000 	.word	0x40011000
 800953c:	58024400 	.word	0x58024400
 8009540:	40004400 	.word	0x40004400
 8009544:	40004800 	.word	0x40004800
 8009548:	40004c00 	.word	0x40004c00
 800954c:	40005000 	.word	0x40005000
 8009550:	2320      	movs	r3, #32
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009556:	e22c      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009558:	2340      	movs	r3, #64	@ 0x40
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e228      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009560:	2380      	movs	r3, #128	@ 0x80
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009566:	e224      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4ab1      	ldr	r2, [pc, #708]	@ (8009834 <UART_SetConfig+0x630>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d176      	bne.n	8009660 <UART_SetConfig+0x45c>
 8009572:	4bb1      	ldr	r3, [pc, #708]	@ (8009838 <UART_SetConfig+0x634>)
 8009574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800957a:	2b28      	cmp	r3, #40	@ 0x28
 800957c:	d86c      	bhi.n	8009658 <UART_SetConfig+0x454>
 800957e:	a201      	add	r2, pc, #4	@ (adr r2, 8009584 <UART_SetConfig+0x380>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	08009629 	.word	0x08009629
 8009588:	08009659 	.word	0x08009659
 800958c:	08009659 	.word	0x08009659
 8009590:	08009659 	.word	0x08009659
 8009594:	08009659 	.word	0x08009659
 8009598:	08009659 	.word	0x08009659
 800959c:	08009659 	.word	0x08009659
 80095a0:	08009659 	.word	0x08009659
 80095a4:	08009631 	.word	0x08009631
 80095a8:	08009659 	.word	0x08009659
 80095ac:	08009659 	.word	0x08009659
 80095b0:	08009659 	.word	0x08009659
 80095b4:	08009659 	.word	0x08009659
 80095b8:	08009659 	.word	0x08009659
 80095bc:	08009659 	.word	0x08009659
 80095c0:	08009659 	.word	0x08009659
 80095c4:	08009639 	.word	0x08009639
 80095c8:	08009659 	.word	0x08009659
 80095cc:	08009659 	.word	0x08009659
 80095d0:	08009659 	.word	0x08009659
 80095d4:	08009659 	.word	0x08009659
 80095d8:	08009659 	.word	0x08009659
 80095dc:	08009659 	.word	0x08009659
 80095e0:	08009659 	.word	0x08009659
 80095e4:	08009641 	.word	0x08009641
 80095e8:	08009659 	.word	0x08009659
 80095ec:	08009659 	.word	0x08009659
 80095f0:	08009659 	.word	0x08009659
 80095f4:	08009659 	.word	0x08009659
 80095f8:	08009659 	.word	0x08009659
 80095fc:	08009659 	.word	0x08009659
 8009600:	08009659 	.word	0x08009659
 8009604:	08009649 	.word	0x08009649
 8009608:	08009659 	.word	0x08009659
 800960c:	08009659 	.word	0x08009659
 8009610:	08009659 	.word	0x08009659
 8009614:	08009659 	.word	0x08009659
 8009618:	08009659 	.word	0x08009659
 800961c:	08009659 	.word	0x08009659
 8009620:	08009659 	.word	0x08009659
 8009624:	08009651 	.word	0x08009651
 8009628:	2301      	movs	r3, #1
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e1c0      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009630:	2304      	movs	r3, #4
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e1bc      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009638:	2308      	movs	r3, #8
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800963e:	e1b8      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009640:	2310      	movs	r3, #16
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009646:	e1b4      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009648:	2320      	movs	r3, #32
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800964e:	e1b0      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009650:	2340      	movs	r3, #64	@ 0x40
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e1ac      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009658:	2380      	movs	r3, #128	@ 0x80
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e1a8      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a75      	ldr	r2, [pc, #468]	@ (800983c <UART_SetConfig+0x638>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d130      	bne.n	80096cc <UART_SetConfig+0x4c8>
 800966a:	4b73      	ldr	r3, [pc, #460]	@ (8009838 <UART_SetConfig+0x634>)
 800966c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	2b05      	cmp	r3, #5
 8009674:	d826      	bhi.n	80096c4 <UART_SetConfig+0x4c0>
 8009676:	a201      	add	r2, pc, #4	@ (adr r2, 800967c <UART_SetConfig+0x478>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	08009695 	.word	0x08009695
 8009680:	0800969d 	.word	0x0800969d
 8009684:	080096a5 	.word	0x080096a5
 8009688:	080096ad 	.word	0x080096ad
 800968c:	080096b5 	.word	0x080096b5
 8009690:	080096bd 	.word	0x080096bd
 8009694:	2300      	movs	r3, #0
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969a:	e18a      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800969c:	2304      	movs	r3, #4
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a2:	e186      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80096a4:	2308      	movs	r3, #8
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e182      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80096ac:	2310      	movs	r3, #16
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e17e      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80096b4:	2320      	movs	r3, #32
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e17a      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80096bc:	2340      	movs	r3, #64	@ 0x40
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e176      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80096c4:	2380      	movs	r3, #128	@ 0x80
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e172      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a5b      	ldr	r2, [pc, #364]	@ (8009840 <UART_SetConfig+0x63c>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d130      	bne.n	8009738 <UART_SetConfig+0x534>
 80096d6:	4b58      	ldr	r3, [pc, #352]	@ (8009838 <UART_SetConfig+0x634>)
 80096d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096da:	f003 0307 	and.w	r3, r3, #7
 80096de:	2b05      	cmp	r3, #5
 80096e0:	d826      	bhi.n	8009730 <UART_SetConfig+0x52c>
 80096e2:	a201      	add	r2, pc, #4	@ (adr r2, 80096e8 <UART_SetConfig+0x4e4>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	08009701 	.word	0x08009701
 80096ec:	08009709 	.word	0x08009709
 80096f0:	08009711 	.word	0x08009711
 80096f4:	08009719 	.word	0x08009719
 80096f8:	08009721 	.word	0x08009721
 80096fc:	08009729 	.word	0x08009729
 8009700:	2300      	movs	r3, #0
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009706:	e154      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009708:	2304      	movs	r3, #4
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970e:	e150      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009710:	2308      	movs	r3, #8
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e14c      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009718:	2310      	movs	r3, #16
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e148      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009720:	2320      	movs	r3, #32
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e144      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009728:	2340      	movs	r3, #64	@ 0x40
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e140      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009730:	2380      	movs	r3, #128	@ 0x80
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e13c      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a41      	ldr	r2, [pc, #260]	@ (8009844 <UART_SetConfig+0x640>)
 800973e:	4293      	cmp	r3, r2
 8009740:	f040 8082 	bne.w	8009848 <UART_SetConfig+0x644>
 8009744:	4b3c      	ldr	r3, [pc, #240]	@ (8009838 <UART_SetConfig+0x634>)
 8009746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009748:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800974c:	2b28      	cmp	r3, #40	@ 0x28
 800974e:	d86d      	bhi.n	800982c <UART_SetConfig+0x628>
 8009750:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <UART_SetConfig+0x554>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	080097fd 	.word	0x080097fd
 800975c:	0800982d 	.word	0x0800982d
 8009760:	0800982d 	.word	0x0800982d
 8009764:	0800982d 	.word	0x0800982d
 8009768:	0800982d 	.word	0x0800982d
 800976c:	0800982d 	.word	0x0800982d
 8009770:	0800982d 	.word	0x0800982d
 8009774:	0800982d 	.word	0x0800982d
 8009778:	08009805 	.word	0x08009805
 800977c:	0800982d 	.word	0x0800982d
 8009780:	0800982d 	.word	0x0800982d
 8009784:	0800982d 	.word	0x0800982d
 8009788:	0800982d 	.word	0x0800982d
 800978c:	0800982d 	.word	0x0800982d
 8009790:	0800982d 	.word	0x0800982d
 8009794:	0800982d 	.word	0x0800982d
 8009798:	0800980d 	.word	0x0800980d
 800979c:	0800982d 	.word	0x0800982d
 80097a0:	0800982d 	.word	0x0800982d
 80097a4:	0800982d 	.word	0x0800982d
 80097a8:	0800982d 	.word	0x0800982d
 80097ac:	0800982d 	.word	0x0800982d
 80097b0:	0800982d 	.word	0x0800982d
 80097b4:	0800982d 	.word	0x0800982d
 80097b8:	08009815 	.word	0x08009815
 80097bc:	0800982d 	.word	0x0800982d
 80097c0:	0800982d 	.word	0x0800982d
 80097c4:	0800982d 	.word	0x0800982d
 80097c8:	0800982d 	.word	0x0800982d
 80097cc:	0800982d 	.word	0x0800982d
 80097d0:	0800982d 	.word	0x0800982d
 80097d4:	0800982d 	.word	0x0800982d
 80097d8:	0800981d 	.word	0x0800981d
 80097dc:	0800982d 	.word	0x0800982d
 80097e0:	0800982d 	.word	0x0800982d
 80097e4:	0800982d 	.word	0x0800982d
 80097e8:	0800982d 	.word	0x0800982d
 80097ec:	0800982d 	.word	0x0800982d
 80097f0:	0800982d 	.word	0x0800982d
 80097f4:	0800982d 	.word	0x0800982d
 80097f8:	08009825 	.word	0x08009825
 80097fc:	2301      	movs	r3, #1
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009802:	e0d6      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009804:	2304      	movs	r3, #4
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980a:	e0d2      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800980c:	2308      	movs	r3, #8
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009812:	e0ce      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009814:	2310      	movs	r3, #16
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981a:	e0ca      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800981c:	2320      	movs	r3, #32
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009822:	e0c6      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009824:	2340      	movs	r3, #64	@ 0x40
 8009826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982a:	e0c2      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800982c:	2380      	movs	r3, #128	@ 0x80
 800982e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009832:	e0be      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009834:	40011400 	.word	0x40011400
 8009838:	58024400 	.word	0x58024400
 800983c:	40007800 	.word	0x40007800
 8009840:	40007c00 	.word	0x40007c00
 8009844:	40011800 	.word	0x40011800
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4aad      	ldr	r2, [pc, #692]	@ (8009b04 <UART_SetConfig+0x900>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d176      	bne.n	8009940 <UART_SetConfig+0x73c>
 8009852:	4bad      	ldr	r3, [pc, #692]	@ (8009b08 <UART_SetConfig+0x904>)
 8009854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800985a:	2b28      	cmp	r3, #40	@ 0x28
 800985c:	d86c      	bhi.n	8009938 <UART_SetConfig+0x734>
 800985e:	a201      	add	r2, pc, #4	@ (adr r2, 8009864 <UART_SetConfig+0x660>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	08009909 	.word	0x08009909
 8009868:	08009939 	.word	0x08009939
 800986c:	08009939 	.word	0x08009939
 8009870:	08009939 	.word	0x08009939
 8009874:	08009939 	.word	0x08009939
 8009878:	08009939 	.word	0x08009939
 800987c:	08009939 	.word	0x08009939
 8009880:	08009939 	.word	0x08009939
 8009884:	08009911 	.word	0x08009911
 8009888:	08009939 	.word	0x08009939
 800988c:	08009939 	.word	0x08009939
 8009890:	08009939 	.word	0x08009939
 8009894:	08009939 	.word	0x08009939
 8009898:	08009939 	.word	0x08009939
 800989c:	08009939 	.word	0x08009939
 80098a0:	08009939 	.word	0x08009939
 80098a4:	08009919 	.word	0x08009919
 80098a8:	08009939 	.word	0x08009939
 80098ac:	08009939 	.word	0x08009939
 80098b0:	08009939 	.word	0x08009939
 80098b4:	08009939 	.word	0x08009939
 80098b8:	08009939 	.word	0x08009939
 80098bc:	08009939 	.word	0x08009939
 80098c0:	08009939 	.word	0x08009939
 80098c4:	08009921 	.word	0x08009921
 80098c8:	08009939 	.word	0x08009939
 80098cc:	08009939 	.word	0x08009939
 80098d0:	08009939 	.word	0x08009939
 80098d4:	08009939 	.word	0x08009939
 80098d8:	08009939 	.word	0x08009939
 80098dc:	08009939 	.word	0x08009939
 80098e0:	08009939 	.word	0x08009939
 80098e4:	08009929 	.word	0x08009929
 80098e8:	08009939 	.word	0x08009939
 80098ec:	08009939 	.word	0x08009939
 80098f0:	08009939 	.word	0x08009939
 80098f4:	08009939 	.word	0x08009939
 80098f8:	08009939 	.word	0x08009939
 80098fc:	08009939 	.word	0x08009939
 8009900:	08009939 	.word	0x08009939
 8009904:	08009931 	.word	0x08009931
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990e:	e050      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009910:	2304      	movs	r3, #4
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e04c      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009918:	2308      	movs	r3, #8
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e048      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009920:	2310      	movs	r3, #16
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e044      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009928:	2320      	movs	r3, #32
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e040      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009930:	2340      	movs	r3, #64	@ 0x40
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e03c      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009938:	2380      	movs	r3, #128	@ 0x80
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e038      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a71      	ldr	r2, [pc, #452]	@ (8009b0c <UART_SetConfig+0x908>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d130      	bne.n	80099ac <UART_SetConfig+0x7a8>
 800994a:	4b6f      	ldr	r3, [pc, #444]	@ (8009b08 <UART_SetConfig+0x904>)
 800994c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	2b05      	cmp	r3, #5
 8009954:	d826      	bhi.n	80099a4 <UART_SetConfig+0x7a0>
 8009956:	a201      	add	r2, pc, #4	@ (adr r2, 800995c <UART_SetConfig+0x758>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	08009975 	.word	0x08009975
 8009960:	0800997d 	.word	0x0800997d
 8009964:	08009985 	.word	0x08009985
 8009968:	0800998d 	.word	0x0800998d
 800996c:	08009995 	.word	0x08009995
 8009970:	0800999d 	.word	0x0800999d
 8009974:	2302      	movs	r3, #2
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997a:	e01a      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800997c:	2304      	movs	r3, #4
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e016      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009984:	2308      	movs	r3, #8
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e012      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800998c:	2310      	movs	r3, #16
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e00e      	b.n	80099b2 <UART_SetConfig+0x7ae>
 8009994:	2320      	movs	r3, #32
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999a:	e00a      	b.n	80099b2 <UART_SetConfig+0x7ae>
 800999c:	2340      	movs	r3, #64	@ 0x40
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a2:	e006      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80099a4:	2380      	movs	r3, #128	@ 0x80
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099aa:	e002      	b.n	80099b2 <UART_SetConfig+0x7ae>
 80099ac:	2380      	movs	r3, #128	@ 0x80
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a55      	ldr	r2, [pc, #340]	@ (8009b0c <UART_SetConfig+0x908>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	f040 80f8 	bne.w	8009bae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	dc46      	bgt.n	8009a54 <UART_SetConfig+0x850>
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	db75      	blt.n	8009ab6 <UART_SetConfig+0x8b2>
 80099ca:	3b02      	subs	r3, #2
 80099cc:	2b1e      	cmp	r3, #30
 80099ce:	d872      	bhi.n	8009ab6 <UART_SetConfig+0x8b2>
 80099d0:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <UART_SetConfig+0x7d4>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a5b 	.word	0x08009a5b
 80099dc:	08009ab7 	.word	0x08009ab7
 80099e0:	08009a63 	.word	0x08009a63
 80099e4:	08009ab7 	.word	0x08009ab7
 80099e8:	08009ab7 	.word	0x08009ab7
 80099ec:	08009ab7 	.word	0x08009ab7
 80099f0:	08009a73 	.word	0x08009a73
 80099f4:	08009ab7 	.word	0x08009ab7
 80099f8:	08009ab7 	.word	0x08009ab7
 80099fc:	08009ab7 	.word	0x08009ab7
 8009a00:	08009ab7 	.word	0x08009ab7
 8009a04:	08009ab7 	.word	0x08009ab7
 8009a08:	08009ab7 	.word	0x08009ab7
 8009a0c:	08009ab7 	.word	0x08009ab7
 8009a10:	08009a83 	.word	0x08009a83
 8009a14:	08009ab7 	.word	0x08009ab7
 8009a18:	08009ab7 	.word	0x08009ab7
 8009a1c:	08009ab7 	.word	0x08009ab7
 8009a20:	08009ab7 	.word	0x08009ab7
 8009a24:	08009ab7 	.word	0x08009ab7
 8009a28:	08009ab7 	.word	0x08009ab7
 8009a2c:	08009ab7 	.word	0x08009ab7
 8009a30:	08009ab7 	.word	0x08009ab7
 8009a34:	08009ab7 	.word	0x08009ab7
 8009a38:	08009ab7 	.word	0x08009ab7
 8009a3c:	08009ab7 	.word	0x08009ab7
 8009a40:	08009ab7 	.word	0x08009ab7
 8009a44:	08009ab7 	.word	0x08009ab7
 8009a48:	08009ab7 	.word	0x08009ab7
 8009a4c:	08009ab7 	.word	0x08009ab7
 8009a50:	08009aa9 	.word	0x08009aa9
 8009a54:	2b40      	cmp	r3, #64	@ 0x40
 8009a56:	d02a      	beq.n	8009aae <UART_SetConfig+0x8aa>
 8009a58:	e02d      	b.n	8009ab6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a5a:	f7fd f8d5 	bl	8006c08 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a60:	e02f      	b.n	8009ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fd f8e4 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a70:	e027      	b.n	8009ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a72:	f107 0318 	add.w	r3, r7, #24
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd fa30 	bl	8006edc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a80:	e01f      	b.n	8009ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a82:	4b21      	ldr	r3, [pc, #132]	@ (8009b08 <UART_SetConfig+0x904>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d009      	beq.n	8009aa2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8009b08 <UART_SetConfig+0x904>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	08db      	lsrs	r3, r3, #3
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	4a1d      	ldr	r2, [pc, #116]	@ (8009b10 <UART_SetConfig+0x90c>)
 8009a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aa0:	e00f      	b.n	8009ac2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8009b10 <UART_SetConfig+0x90c>)
 8009aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa6:	e00c      	b.n	8009ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b14 <UART_SetConfig+0x910>)
 8009aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aac:	e009      	b.n	8009ac2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab4:	e005      	b.n	8009ac2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ac0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 81ee 	beq.w	8009ea6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ace:	4a12      	ldr	r2, [pc, #72]	@ (8009b18 <UART_SetConfig+0x914>)
 8009ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009adc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4413      	add	r3, r2
 8009ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d305      	bcc.n	8009afa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d910      	bls.n	8009b1c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b00:	e1d1      	b.n	8009ea6 <UART_SetConfig+0xca2>
 8009b02:	bf00      	nop
 8009b04:	40011c00 	.word	0x40011c00
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	58000c00 	.word	0x58000c00
 8009b10:	03d09000 	.word	0x03d09000
 8009b14:	003d0900 	.word	0x003d0900
 8009b18:	0800db2c 	.word	0x0800db2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1e:	2200      	movs	r2, #0
 8009b20:	60bb      	str	r3, [r7, #8]
 8009b22:	60fa      	str	r2, [r7, #12]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b28:	4ac0      	ldr	r2, [pc, #768]	@ (8009e2c <UART_SetConfig+0xc28>)
 8009b2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	2200      	movs	r2, #0
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	607a      	str	r2, [r7, #4]
 8009b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b3e:	f7f6 fbe7 	bl	8000310 <__aeabi_uldivmod>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	4610      	mov	r0, r2
 8009b48:	4619      	mov	r1, r3
 8009b4a:	f04f 0200 	mov.w	r2, #0
 8009b4e:	f04f 0300 	mov.w	r3, #0
 8009b52:	020b      	lsls	r3, r1, #8
 8009b54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b58:	0202      	lsls	r2, r0, #8
 8009b5a:	6979      	ldr	r1, [r7, #20]
 8009b5c:	6849      	ldr	r1, [r1, #4]
 8009b5e:	0849      	lsrs	r1, r1, #1
 8009b60:	2000      	movs	r0, #0
 8009b62:	460c      	mov	r4, r1
 8009b64:	4605      	mov	r5, r0
 8009b66:	eb12 0804 	adds.w	r8, r2, r4
 8009b6a:	eb43 0905 	adc.w	r9, r3, r5
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	469a      	mov	sl, r3
 8009b76:	4693      	mov	fp, r2
 8009b78:	4652      	mov	r2, sl
 8009b7a:	465b      	mov	r3, fp
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	4649      	mov	r1, r9
 8009b80:	f7f6 fbc6 	bl	8000310 <__aeabi_uldivmod>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	4613      	mov	r3, r2
 8009b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b92:	d308      	bcc.n	8009ba6 <UART_SetConfig+0x9a2>
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b9a:	d204      	bcs.n	8009ba6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ba2:	60da      	str	r2, [r3, #12]
 8009ba4:	e17f      	b.n	8009ea6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bac:	e17b      	b.n	8009ea6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb6:	f040 80bd 	bne.w	8009d34 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009bba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bbe:	2b20      	cmp	r3, #32
 8009bc0:	dc48      	bgt.n	8009c54 <UART_SetConfig+0xa50>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	db7b      	blt.n	8009cbe <UART_SetConfig+0xaba>
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d879      	bhi.n	8009cbe <UART_SetConfig+0xaba>
 8009bca:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd0 <UART_SetConfig+0x9cc>)
 8009bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd0:	08009c5b 	.word	0x08009c5b
 8009bd4:	08009c63 	.word	0x08009c63
 8009bd8:	08009cbf 	.word	0x08009cbf
 8009bdc:	08009cbf 	.word	0x08009cbf
 8009be0:	08009c6b 	.word	0x08009c6b
 8009be4:	08009cbf 	.word	0x08009cbf
 8009be8:	08009cbf 	.word	0x08009cbf
 8009bec:	08009cbf 	.word	0x08009cbf
 8009bf0:	08009c7b 	.word	0x08009c7b
 8009bf4:	08009cbf 	.word	0x08009cbf
 8009bf8:	08009cbf 	.word	0x08009cbf
 8009bfc:	08009cbf 	.word	0x08009cbf
 8009c00:	08009cbf 	.word	0x08009cbf
 8009c04:	08009cbf 	.word	0x08009cbf
 8009c08:	08009cbf 	.word	0x08009cbf
 8009c0c:	08009cbf 	.word	0x08009cbf
 8009c10:	08009c8b 	.word	0x08009c8b
 8009c14:	08009cbf 	.word	0x08009cbf
 8009c18:	08009cbf 	.word	0x08009cbf
 8009c1c:	08009cbf 	.word	0x08009cbf
 8009c20:	08009cbf 	.word	0x08009cbf
 8009c24:	08009cbf 	.word	0x08009cbf
 8009c28:	08009cbf 	.word	0x08009cbf
 8009c2c:	08009cbf 	.word	0x08009cbf
 8009c30:	08009cbf 	.word	0x08009cbf
 8009c34:	08009cbf 	.word	0x08009cbf
 8009c38:	08009cbf 	.word	0x08009cbf
 8009c3c:	08009cbf 	.word	0x08009cbf
 8009c40:	08009cbf 	.word	0x08009cbf
 8009c44:	08009cbf 	.word	0x08009cbf
 8009c48:	08009cbf 	.word	0x08009cbf
 8009c4c:	08009cbf 	.word	0x08009cbf
 8009c50:	08009cb1 	.word	0x08009cb1
 8009c54:	2b40      	cmp	r3, #64	@ 0x40
 8009c56:	d02e      	beq.n	8009cb6 <UART_SetConfig+0xab2>
 8009c58:	e031      	b.n	8009cbe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c5a:	f7fb fdc7 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 8009c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c60:	e033      	b.n	8009cca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c62:	f7fb fdd9 	bl	8005818 <HAL_RCC_GetPCLK2Freq>
 8009c66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c68:	e02f      	b.n	8009cca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fc ffe0 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c78:	e027      	b.n	8009cca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c7a:	f107 0318 	add.w	r3, r7, #24
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fd f92c 	bl	8006edc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c88:	e01f      	b.n	8009cca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c8a:	4b69      	ldr	r3, [pc, #420]	@ (8009e30 <UART_SetConfig+0xc2c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d009      	beq.n	8009caa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c96:	4b66      	ldr	r3, [pc, #408]	@ (8009e30 <UART_SetConfig+0xc2c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	08db      	lsrs	r3, r3, #3
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	4a64      	ldr	r2, [pc, #400]	@ (8009e34 <UART_SetConfig+0xc30>)
 8009ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ca8:	e00f      	b.n	8009cca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009caa:	4b62      	ldr	r3, [pc, #392]	@ (8009e34 <UART_SetConfig+0xc30>)
 8009cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cae:	e00c      	b.n	8009cca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cb0:	4b61      	ldr	r3, [pc, #388]	@ (8009e38 <UART_SetConfig+0xc34>)
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb4:	e009      	b.n	8009cca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cbc:	e005      	b.n	8009cca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 80ea 	beq.w	8009ea6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd6:	4a55      	ldr	r2, [pc, #340]	@ (8009e2c <UART_SetConfig+0xc28>)
 8009cd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ce4:	005a      	lsls	r2, r3, #1
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	085b      	lsrs	r3, r3, #1
 8009cec:	441a      	add	r2, r3
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfa:	2b0f      	cmp	r3, #15
 8009cfc:	d916      	bls.n	8009d2c <UART_SetConfig+0xb28>
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d04:	d212      	bcs.n	8009d2c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	f023 030f 	bic.w	r3, r3, #15
 8009d0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d12:	085b      	lsrs	r3, r3, #1
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d28:	60da      	str	r2, [r3, #12]
 8009d2a:	e0bc      	b.n	8009ea6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d32:	e0b8      	b.n	8009ea6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d34:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	dc4b      	bgt.n	8009dd4 <UART_SetConfig+0xbd0>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f2c0 8087 	blt.w	8009e50 <UART_SetConfig+0xc4c>
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	f200 8084 	bhi.w	8009e50 <UART_SetConfig+0xc4c>
 8009d48:	a201      	add	r2, pc, #4	@ (adr r2, 8009d50 <UART_SetConfig+0xb4c>)
 8009d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4e:	bf00      	nop
 8009d50:	08009ddb 	.word	0x08009ddb
 8009d54:	08009de3 	.word	0x08009de3
 8009d58:	08009e51 	.word	0x08009e51
 8009d5c:	08009e51 	.word	0x08009e51
 8009d60:	08009deb 	.word	0x08009deb
 8009d64:	08009e51 	.word	0x08009e51
 8009d68:	08009e51 	.word	0x08009e51
 8009d6c:	08009e51 	.word	0x08009e51
 8009d70:	08009dfb 	.word	0x08009dfb
 8009d74:	08009e51 	.word	0x08009e51
 8009d78:	08009e51 	.word	0x08009e51
 8009d7c:	08009e51 	.word	0x08009e51
 8009d80:	08009e51 	.word	0x08009e51
 8009d84:	08009e51 	.word	0x08009e51
 8009d88:	08009e51 	.word	0x08009e51
 8009d8c:	08009e51 	.word	0x08009e51
 8009d90:	08009e0b 	.word	0x08009e0b
 8009d94:	08009e51 	.word	0x08009e51
 8009d98:	08009e51 	.word	0x08009e51
 8009d9c:	08009e51 	.word	0x08009e51
 8009da0:	08009e51 	.word	0x08009e51
 8009da4:	08009e51 	.word	0x08009e51
 8009da8:	08009e51 	.word	0x08009e51
 8009dac:	08009e51 	.word	0x08009e51
 8009db0:	08009e51 	.word	0x08009e51
 8009db4:	08009e51 	.word	0x08009e51
 8009db8:	08009e51 	.word	0x08009e51
 8009dbc:	08009e51 	.word	0x08009e51
 8009dc0:	08009e51 	.word	0x08009e51
 8009dc4:	08009e51 	.word	0x08009e51
 8009dc8:	08009e51 	.word	0x08009e51
 8009dcc:	08009e51 	.word	0x08009e51
 8009dd0:	08009e43 	.word	0x08009e43
 8009dd4:	2b40      	cmp	r3, #64	@ 0x40
 8009dd6:	d037      	beq.n	8009e48 <UART_SetConfig+0xc44>
 8009dd8:	e03a      	b.n	8009e50 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dda:	f7fb fd07 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 8009dde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009de0:	e03c      	b.n	8009e5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009de2:	f7fb fd19 	bl	8005818 <HAL_RCC_GetPCLK2Freq>
 8009de6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009de8:	e038      	b.n	8009e5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fc ff20 	bl	8006c34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df8:	e030      	b.n	8009e5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dfa:	f107 0318 	add.w	r3, r7, #24
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fd f86c 	bl	8006edc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e08:	e028      	b.n	8009e5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e0a:	4b09      	ldr	r3, [pc, #36]	@ (8009e30 <UART_SetConfig+0xc2c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d012      	beq.n	8009e3c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e16:	4b06      	ldr	r3, [pc, #24]	@ (8009e30 <UART_SetConfig+0xc2c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	08db      	lsrs	r3, r3, #3
 8009e1c:	f003 0303 	and.w	r3, r3, #3
 8009e20:	4a04      	ldr	r2, [pc, #16]	@ (8009e34 <UART_SetConfig+0xc30>)
 8009e22:	fa22 f303 	lsr.w	r3, r2, r3
 8009e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e28:	e018      	b.n	8009e5c <UART_SetConfig+0xc58>
 8009e2a:	bf00      	nop
 8009e2c:	0800db2c 	.word	0x0800db2c
 8009e30:	58024400 	.word	0x58024400
 8009e34:	03d09000 	.word	0x03d09000
 8009e38:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009e3c:	4b24      	ldr	r3, [pc, #144]	@ (8009ed0 <UART_SetConfig+0xccc>)
 8009e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e40:	e00c      	b.n	8009e5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e42:	4b24      	ldr	r3, [pc, #144]	@ (8009ed4 <UART_SetConfig+0xcd0>)
 8009e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e46:	e009      	b.n	8009e5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e4e:	e005      	b.n	8009e5c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e5a:	bf00      	nop
    }

    if (pclk != 0U)
 8009e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d021      	beq.n	8009ea6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e66:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed8 <UART_SetConfig+0xcd4>)
 8009e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e70:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	085b      	lsrs	r3, r3, #1
 8009e7a:	441a      	add	r2, r3
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e84:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e88:	2b0f      	cmp	r3, #15
 8009e8a:	d909      	bls.n	8009ea0 <UART_SetConfig+0xc9c>
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e92:	d205      	bcs.n	8009ea0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	60da      	str	r2, [r3, #12]
 8009e9e:	e002      	b.n	8009ea6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ec2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3748      	adds	r7, #72	@ 0x48
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ed0:	03d09000 	.word	0x03d09000
 8009ed4:	003d0900 	.word	0x003d0900
 8009ed8:	0800db2c 	.word	0x0800db2c

08009edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee8:	f003 0308 	and.w	r3, r3, #8
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4e:	f003 0304 	and.w	r3, r3, #4
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00a      	beq.n	8009f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	430a      	orrs	r2, r1
 8009fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01a      	beq.n	8009ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fda:	d10a      	bne.n	8009ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	605a      	str	r2, [r3, #4]
  }
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b098      	sub	sp, #96	@ 0x60
 800a024:	af02      	add	r7, sp, #8
 800a026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a030:	f7f7 faf8 	bl	8001624 <HAL_GetTick>
 800a034:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0308 	and.w	r3, r3, #8
 800a040:	2b08      	cmp	r3, #8
 800a042:	d12f      	bne.n	800a0a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a044:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a04c:	2200      	movs	r2, #0
 800a04e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f88e 	bl	800a174 <UART_WaitOnFlagUntilTimeout>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d022      	beq.n	800a0a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a072:	653b      	str	r3, [r7, #80]	@ 0x50
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a07c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a07e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e6      	bne.n	800a05e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e063      	b.n	800a16c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d149      	bne.n	800a146 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f857 	bl	800a174 <UART_WaitOnFlagUntilTimeout>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d03c      	beq.n	800a146 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e6      	bne.n	800a0cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3308      	adds	r3, #8
 800a104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f023 0301 	bic.w	r3, r3, #1
 800a114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3308      	adds	r3, #8
 800a11c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a11e:	61fa      	str	r2, [r7, #28]
 800a120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	69b9      	ldr	r1, [r7, #24]
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	617b      	str	r3, [r7, #20]
   return(result);
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e5      	bne.n	800a0fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2220      	movs	r2, #32
 800a136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a142:	2303      	movs	r3, #3
 800a144:	e012      	b.n	800a16c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2220      	movs	r2, #32
 800a152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3758      	adds	r7, #88	@ 0x58
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	603b      	str	r3, [r7, #0]
 800a180:	4613      	mov	r3, r2
 800a182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a184:	e04f      	b.n	800a226 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18c:	d04b      	beq.n	800a226 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a18e:	f7f7 fa49 	bl	8001624 <HAL_GetTick>
 800a192:	4602      	mov	r2, r0
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d302      	bcc.n	800a1a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e04e      	b.n	800a246 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d037      	beq.n	800a226 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b80      	cmp	r3, #128	@ 0x80
 800a1ba:	d034      	beq.n	800a226 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	2b40      	cmp	r3, #64	@ 0x40
 800a1c0:	d031      	beq.n	800a226 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d110      	bne.n	800a1f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2208      	movs	r2, #8
 800a1d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 f921 	bl	800a420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e029      	b.n	800a246 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a200:	d111      	bne.n	800a226 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a20a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 f907 	bl	800a420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2220      	movs	r2, #32
 800a216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	e00f      	b.n	800a246 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	69da      	ldr	r2, [r3, #28]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	4013      	ands	r3, r2
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	429a      	cmp	r2, r3
 800a234:	bf0c      	ite	eq
 800a236:	2301      	moveq	r3, #1
 800a238:	2300      	movne	r3, #0
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	461a      	mov	r2, r3
 800a23e:	79fb      	ldrb	r3, [r7, #7]
 800a240:	429a      	cmp	r2, r3
 800a242:	d0a0      	beq.n	800a186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b096      	sub	sp, #88	@ 0x58
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	4613      	mov	r3, r2
 800a25c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	88fa      	ldrh	r2, [r7, #6]
 800a268:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2222      	movs	r2, #34	@ 0x22
 800a278:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a282:	2b00      	cmp	r3, #0
 800a284:	d02d      	beq.n	800a2e2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a28c:	4a40      	ldr	r2, [pc, #256]	@ (800a390 <UART_Start_Receive_DMA+0x140>)
 800a28e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a296:	4a3f      	ldr	r2, [pc, #252]	@ (800a394 <UART_Start_Receive_DMA+0x144>)
 800a298:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a0:	4a3d      	ldr	r2, [pc, #244]	@ (800a398 <UART_Start_Receive_DMA+0x148>)
 800a2a2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3324      	adds	r3, #36	@ 0x24
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	88fb      	ldrh	r3, [r7, #6]
 800a2c4:	f7f7 fe6a 	bl	8001f9c <HAL_DMA_Start_IT>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d009      	beq.n	800a2e2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2210      	movs	r2, #16
 800a2d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e051      	b.n	800a386 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d018      	beq.n	800a31c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	461a      	mov	r2, r3
 800a306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a30a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a30e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e6      	bne.n	800a2ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3308      	adds	r3, #8
 800a322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	f043 0301 	orr.w	r3, r3, #1
 800a332:	653b      	str	r3, [r7, #80]	@ 0x50
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3308      	adds	r3, #8
 800a33a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a33c:	637a      	str	r2, [r7, #52]	@ 0x34
 800a33e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e5      	bne.n	800a31c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	613b      	str	r3, [r7, #16]
   return(result);
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3308      	adds	r3, #8
 800a36e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a370:	623a      	str	r2, [r7, #32]
 800a372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	69f9      	ldr	r1, [r7, #28]
 800a376:	6a3a      	ldr	r2, [r7, #32]
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e5      	bne.n	800a350 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3758      	adds	r7, #88	@ 0x58
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	0800a59f 	.word	0x0800a59f
 800a394:	0800a6c7 	.word	0x0800a6c7
 800a398:	0800a705 	.word	0x0800a705

0800a39c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b08f      	sub	sp, #60	@ 0x3c
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	e853 3f00 	ldrex	r3, [r3]
 800a3b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a3b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e6      	bne.n	800a3a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3308      	adds	r3, #8
 800a3dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	e853 3f00 	ldrex	r3, [r3]
 800a3e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a3ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3308      	adds	r3, #8
 800a3f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3f6:	61ba      	str	r2, [r7, #24]
 800a3f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fa:	6979      	ldr	r1, [r7, #20]
 800a3fc:	69ba      	ldr	r2, [r7, #24]
 800a3fe:	e841 2300 	strex	r3, r2, [r1]
 800a402:	613b      	str	r3, [r7, #16]
   return(result);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1e5      	bne.n	800a3d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a412:	bf00      	nop
 800a414:	373c      	adds	r7, #60	@ 0x3c
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
	...

0800a420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a420:	b480      	push	{r7}
 800a422:	b095      	sub	sp, #84	@ 0x54
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a43c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a446:	643b      	str	r3, [r7, #64]	@ 0x40
 800a448:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a44c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e6      	bne.n	800a428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3308      	adds	r3, #8
 800a460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	61fb      	str	r3, [r7, #28]
   return(result);
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	4b1e      	ldr	r3, [pc, #120]	@ (800a4e8 <UART_EndRxTransfer+0xc8>)
 800a46e:	4013      	ands	r3, r2
 800a470:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3308      	adds	r3, #8
 800a478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a47a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a47c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a482:	e841 2300 	strex	r3, r2, [r1]
 800a486:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e5      	bne.n	800a45a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a492:	2b01      	cmp	r3, #1
 800a494:	d118      	bne.n	800a4c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	e853 3f00 	ldrex	r3, [r3]
 800a4a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f023 0310 	bic.w	r3, r3, #16
 800a4aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4b4:	61bb      	str	r3, [r7, #24]
 800a4b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b8:	6979      	ldr	r1, [r7, #20]
 800a4ba:	69ba      	ldr	r2, [r7, #24]
 800a4bc:	e841 2300 	strex	r3, r2, [r1]
 800a4c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1e6      	bne.n	800a496 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a4dc:	bf00      	nop
 800a4de:	3754      	adds	r7, #84	@ 0x54
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	effffffe 	.word	0xeffffffe

0800a4ec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b090      	sub	sp, #64	@ 0x40
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a502:	d037      	beq.n	800a574 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a506:	2200      	movs	r2, #0
 800a508:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3308      	adds	r3, #8
 800a512:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a516:	e853 3f00 	ldrex	r3, [r3]
 800a51a:	623b      	str	r3, [r7, #32]
   return(result);
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a522:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3308      	adds	r3, #8
 800a52a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a52c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a52e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a530:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a534:	e841 2300 	strex	r3, r2, [r1]
 800a538:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1e5      	bne.n	800a50c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a554:	637b      	str	r3, [r7, #52]	@ 0x34
 800a556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55e:	61fb      	str	r3, [r7, #28]
 800a560:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a562:	69b9      	ldr	r1, [r7, #24]
 800a564:	69fa      	ldr	r2, [r7, #28]
 800a566:	e841 2300 	strex	r3, r2, [r1]
 800a56a:	617b      	str	r3, [r7, #20]
   return(result);
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1e6      	bne.n	800a540 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a572:	e002      	b.n	800a57a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a574:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a576:	f7f6 fa11 	bl	800099c <HAL_UART_TxCpltCallback>
}
 800a57a:	bf00      	nop
 800a57c:	3740      	adds	r7, #64	@ 0x40
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a58e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7fe fe17 	bl	80091c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a596:	bf00      	nop
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b09c      	sub	sp, #112	@ 0x70
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5b4:	d071      	beq.n	800a69a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a5b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5c6:	e853 3f00 	ldrex	r3, [r3]
 800a5ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5de:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a5e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5e4:	e841 2300 	strex	r3, r2, [r1]
 800a5e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a5ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e6      	bne.n	800a5be <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fa:	e853 3f00 	ldrex	r3, [r3]
 800a5fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a602:	f023 0301 	bic.w	r3, r3, #1
 800a606:	667b      	str	r3, [r7, #100]	@ 0x64
 800a608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3308      	adds	r3, #8
 800a60e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a610:	647a      	str	r2, [r7, #68]	@ 0x44
 800a612:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a614:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a618:	e841 2300 	strex	r3, r2, [r1]
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1e5      	bne.n	800a5f0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	3308      	adds	r3, #8
 800a62a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62e:	e853 3f00 	ldrex	r3, [r3]
 800a632:	623b      	str	r3, [r7, #32]
   return(result);
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a63a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a63c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3308      	adds	r3, #8
 800a642:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a644:	633a      	str	r2, [r7, #48]	@ 0x30
 800a646:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a64a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a64c:	e841 2300 	strex	r3, r2, [r1]
 800a650:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e5      	bne.n	800a624 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a65a:	2220      	movs	r2, #32
 800a65c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a664:	2b01      	cmp	r3, #1
 800a666:	d118      	bne.n	800a69a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	60fb      	str	r3, [r7, #12]
   return(result);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f023 0310 	bic.w	r3, r3, #16
 800a67c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a67e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a686:	61fb      	str	r3, [r7, #28]
 800a688:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	69b9      	ldr	r1, [r7, #24]
 800a68c:	69fa      	ldr	r2, [r7, #28]
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	617b      	str	r3, [r7, #20]
   return(result);
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e6      	bne.n	800a668 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a69a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a69c:	2200      	movs	r2, #0
 800a69e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d107      	bne.n	800a6b8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6b2:	f7fe fd9b 	bl	80091ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6b6:	e002      	b.n	800a6be <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a6b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6ba:	f7f6 f985 	bl	80009c8 <HAL_UART_RxCpltCallback>
}
 800a6be:	bf00      	nop
 800a6c0:	3770      	adds	r7, #112	@ 0x70
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d109      	bne.n	800a6f6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6e8:	085b      	lsrs	r3, r3, #1
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f7fe fd7c 	bl	80091ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6f4:	e002      	b.n	800a6fc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7f6 f994 	bl	8000a24 <HAL_UART_RxHalfCpltCallback>
}
 800a6fc:	bf00      	nop
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a710:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a718:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a720:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a72c:	2b80      	cmp	r3, #128	@ 0x80
 800a72e:	d109      	bne.n	800a744 <UART_DMAError+0x40>
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	2b21      	cmp	r3, #33	@ 0x21
 800a734:	d106      	bne.n	800a744 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2200      	movs	r2, #0
 800a73a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a73e:	6978      	ldr	r0, [r7, #20]
 800a740:	f7ff fe2c 	bl	800a39c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a74e:	2b40      	cmp	r3, #64	@ 0x40
 800a750:	d109      	bne.n	800a766 <UART_DMAError+0x62>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b22      	cmp	r3, #34	@ 0x22
 800a756:	d106      	bne.n	800a766 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a760:	6978      	ldr	r0, [r7, #20]
 800a762:	f7ff fe5d 	bl	800a420 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a76c:	f043 0210 	orr.w	r2, r3, #16
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a776:	6978      	ldr	r0, [r7, #20]
 800a778:	f7fe fd2e 	bl	80091d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a77c:	bf00      	nop
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a790:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f7fe fd18 	bl	80091d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a8:	bf00      	nop
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b088      	sub	sp, #32
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	61bb      	str	r3, [r7, #24]
 800a7d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	6979      	ldr	r1, [r7, #20]
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	e841 2300 	strex	r3, r2, [r1]
 800a7e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e6      	bne.n	800a7b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7f6 f8cf 	bl	800099c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7fe:	bf00      	nop
 800a800:	3720      	adds	r7, #32
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a806:	b480      	push	{r7}
 800a808:	b083      	sub	sp, #12
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a80e:	bf00      	nop
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a822:	bf00      	nop
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a842:	b480      	push	{r7}
 800a844:	b085      	sub	sp, #20
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a850:	2b01      	cmp	r3, #1
 800a852:	d101      	bne.n	800a858 <HAL_UARTEx_DisableFifoMode+0x16>
 800a854:	2302      	movs	r3, #2
 800a856:	e027      	b.n	800a8a8 <HAL_UARTEx_DisableFifoMode+0x66>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2224      	movs	r2, #36	@ 0x24
 800a864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f022 0201 	bic.w	r2, r2, #1
 800a87e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a886:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2220      	movs	r2, #32
 800a89a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d101      	bne.n	800a8cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e02d      	b.n	800a928 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2224      	movs	r2, #36	@ 0x24
 800a8d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 0201 	bic.w	r2, r2, #1
 800a8f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	430a      	orrs	r2, r1
 800a906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f84f 	bl	800a9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2220      	movs	r2, #32
 800a91a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a940:	2b01      	cmp	r3, #1
 800a942:	d101      	bne.n	800a948 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a944:	2302      	movs	r3, #2
 800a946:	e02d      	b.n	800a9a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2224      	movs	r2, #36	@ 0x24
 800a954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f022 0201 	bic.w	r2, r2, #1
 800a96e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f811 	bl	800a9ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2220      	movs	r2, #32
 800a996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d108      	bne.n	800a9ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9cc:	e031      	b.n	800aa32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9ce:	2310      	movs	r3, #16
 800a9d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9d2:	2310      	movs	r3, #16
 800a9d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	0e5b      	lsrs	r3, r3, #25
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 0307 	and.w	r3, r3, #7
 800a9e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	0f5b      	lsrs	r3, r3, #29
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	f003 0307 	and.w	r3, r3, #7
 800a9f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	7b3a      	ldrb	r2, [r7, #12]
 800a9fa:	4911      	ldr	r1, [pc, #68]	@ (800aa40 <UARTEx_SetNbDataToProcess+0x94>)
 800a9fc:	5c8a      	ldrb	r2, [r1, r2]
 800a9fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa02:	7b3a      	ldrb	r2, [r7, #12]
 800aa04:	490f      	ldr	r1, [pc, #60]	@ (800aa44 <UARTEx_SetNbDataToProcess+0x98>)
 800aa06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa08:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
 800aa16:	7b7a      	ldrb	r2, [r7, #13]
 800aa18:	4909      	ldr	r1, [pc, #36]	@ (800aa40 <UARTEx_SetNbDataToProcess+0x94>)
 800aa1a:	5c8a      	ldrb	r2, [r1, r2]
 800aa1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa20:	7b7a      	ldrb	r2, [r7, #13]
 800aa22:	4908      	ldr	r1, [pc, #32]	@ (800aa44 <UARTEx_SetNbDataToProcess+0x98>)
 800aa24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa26:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa32:	bf00      	nop
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	0800db44 	.word	0x0800db44
 800aa44:	0800db4c 	.word	0x0800db4c

0800aa48 <__NVIC_SetPriority>:
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	6039      	str	r1, [r7, #0]
 800aa52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800aa54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	db0a      	blt.n	800aa72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	490c      	ldr	r1, [pc, #48]	@ (800aa94 <__NVIC_SetPriority+0x4c>)
 800aa62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa66:	0112      	lsls	r2, r2, #4
 800aa68:	b2d2      	uxtb	r2, r2
 800aa6a:	440b      	add	r3, r1
 800aa6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aa70:	e00a      	b.n	800aa88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	4908      	ldr	r1, [pc, #32]	@ (800aa98 <__NVIC_SetPriority+0x50>)
 800aa78:	88fb      	ldrh	r3, [r7, #6]
 800aa7a:	f003 030f 	and.w	r3, r3, #15
 800aa7e:	3b04      	subs	r3, #4
 800aa80:	0112      	lsls	r2, r2, #4
 800aa82:	b2d2      	uxtb	r2, r2
 800aa84:	440b      	add	r3, r1
 800aa86:	761a      	strb	r2, [r3, #24]
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	e000e100 	.word	0xe000e100
 800aa98:	e000ed00 	.word	0xe000ed00

0800aa9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aaa0:	4b05      	ldr	r3, [pc, #20]	@ (800aab8 <SysTick_Handler+0x1c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aaa4:	f001 fe88 	bl	800c7b8 <xTaskGetSchedulerState>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d001      	beq.n	800aab2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aaae:	f002 fc83 	bl	800d3b8 <xPortSysTickHandler>
  }
}
 800aab2:	bf00      	nop
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	e000e010 	.word	0xe000e010

0800aabc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aac0:	2100      	movs	r1, #0
 800aac2:	f06f 0004 	mvn.w	r0, #4
 800aac6:	f7ff ffbf 	bl	800aa48 <__NVIC_SetPriority>
#endif
}
 800aaca:	bf00      	nop
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aad6:	f3ef 8305 	mrs	r3, IPSR
 800aada:	603b      	str	r3, [r7, #0]
  return(result);
 800aadc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aae2:	f06f 0305 	mvn.w	r3, #5
 800aae6:	607b      	str	r3, [r7, #4]
 800aae8:	e00c      	b.n	800ab04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aaea:	4b0a      	ldr	r3, [pc, #40]	@ (800ab14 <osKernelInitialize+0x44>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d105      	bne.n	800aafe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aaf2:	4b08      	ldr	r3, [pc, #32]	@ (800ab14 <osKernelInitialize+0x44>)
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	607b      	str	r3, [r7, #4]
 800aafc:	e002      	b.n	800ab04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aafe:	f04f 33ff 	mov.w	r3, #4294967295
 800ab02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab04:	687b      	ldr	r3, [r7, #4]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	240005ec 	.word	0x240005ec

0800ab18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab1e:	f3ef 8305 	mrs	r3, IPSR
 800ab22:	603b      	str	r3, [r7, #0]
  return(result);
 800ab24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ab2a:	f06f 0305 	mvn.w	r3, #5
 800ab2e:	607b      	str	r3, [r7, #4]
 800ab30:	e010      	b.n	800ab54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab32:	4b0b      	ldr	r3, [pc, #44]	@ (800ab60 <osKernelStart+0x48>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d109      	bne.n	800ab4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab3a:	f7ff ffbf 	bl	800aabc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab3e:	4b08      	ldr	r3, [pc, #32]	@ (800ab60 <osKernelStart+0x48>)
 800ab40:	2202      	movs	r2, #2
 800ab42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ab44:	f001 f9d4 	bl	800bef0 <vTaskStartScheduler>
      stat = osOK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	607b      	str	r3, [r7, #4]
 800ab4c:	e002      	b.n	800ab54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ab4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab54:	687b      	ldr	r3, [r7, #4]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	240005ec 	.word	0x240005ec

0800ab64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08e      	sub	sp, #56	@ 0x38
 800ab68:	af04      	add	r7, sp, #16
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ab70:	2300      	movs	r3, #0
 800ab72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab74:	f3ef 8305 	mrs	r3, IPSR
 800ab78:	617b      	str	r3, [r7, #20]
  return(result);
 800ab7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d17e      	bne.n	800ac7e <osThreadNew+0x11a>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d07b      	beq.n	800ac7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ab86:	2380      	movs	r3, #128	@ 0x80
 800ab88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ab8a:	2318      	movs	r3, #24
 800ab8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ab92:	f04f 33ff 	mov.w	r3, #4294967295
 800ab96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d045      	beq.n	800ac2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <osThreadNew+0x48>
        name = attr->name;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d008      	beq.n	800abd2 <osThreadNew+0x6e>
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	2b38      	cmp	r3, #56	@ 0x38
 800abc4:	d805      	bhi.n	800abd2 <osThreadNew+0x6e>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <osThreadNew+0x72>
        return (NULL);
 800abd2:	2300      	movs	r3, #0
 800abd4:	e054      	b.n	800ac80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	089b      	lsrs	r3, r3, #2
 800abe4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00e      	beq.n	800ac0c <osThreadNew+0xa8>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	2bb7      	cmp	r3, #183	@ 0xb7
 800abf4:	d90a      	bls.n	800ac0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d006      	beq.n	800ac0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d002      	beq.n	800ac0c <osThreadNew+0xa8>
        mem = 1;
 800ac06:	2301      	movs	r3, #1
 800ac08:	61bb      	str	r3, [r7, #24]
 800ac0a:	e010      	b.n	800ac2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10c      	bne.n	800ac2e <osThreadNew+0xca>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d108      	bne.n	800ac2e <osThreadNew+0xca>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d104      	bne.n	800ac2e <osThreadNew+0xca>
          mem = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	61bb      	str	r3, [r7, #24]
 800ac28:	e001      	b.n	800ac2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d110      	bne.n	800ac56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac3c:	9202      	str	r2, [sp, #8]
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6a3a      	ldr	r2, [r7, #32]
 800ac48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 ff5c 	bl	800bb08 <xTaskCreateStatic>
 800ac50:	4603      	mov	r3, r0
 800ac52:	613b      	str	r3, [r7, #16]
 800ac54:	e013      	b.n	800ac7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d110      	bne.n	800ac7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac5c:	6a3b      	ldr	r3, [r7, #32]
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	f107 0310 	add.w	r3, r7, #16
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f000 ffaa 	bl	800bbc8 <xTaskCreate>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d001      	beq.n	800ac7e <osThreadNew+0x11a>
            hTask = NULL;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ac7e:	693b      	ldr	r3, [r7, #16]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3728      	adds	r7, #40	@ 0x28
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac90:	f3ef 8305 	mrs	r3, IPSR
 800ac94:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d003      	beq.n	800aca4 <osDelay+0x1c>
    stat = osErrorISR;
 800ac9c:	f06f 0305 	mvn.w	r3, #5
 800aca0:	60fb      	str	r3, [r7, #12]
 800aca2:	e007      	b.n	800acb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d002      	beq.n	800acb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f001 f8e8 	bl	800be84 <vTaskDelay>
    }
  }

  return (stat);
 800acb4:	68fb      	ldr	r3, [r7, #12]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4a07      	ldr	r2, [pc, #28]	@ (800acec <vApplicationGetIdleTaskMemory+0x2c>)
 800acd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	4a06      	ldr	r2, [pc, #24]	@ (800acf0 <vApplicationGetIdleTaskMemory+0x30>)
 800acd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2280      	movs	r2, #128	@ 0x80
 800acdc:	601a      	str	r2, [r3, #0]
}
 800acde:	bf00      	nop
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	240005f0 	.word	0x240005f0
 800acf0:	240006a8 	.word	0x240006a8

0800acf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4a07      	ldr	r2, [pc, #28]	@ (800ad20 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	4a06      	ldr	r2, [pc, #24]	@ (800ad24 <vApplicationGetTimerTaskMemory+0x30>)
 800ad0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad12:	601a      	str	r2, [r3, #0]
}
 800ad14:	bf00      	nop
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	240008a8 	.word	0x240008a8
 800ad24:	24000960 	.word	0x24000960

0800ad28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f103 0208 	add.w	r2, r3, #8
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f103 0208 	add.w	r2, r3, #8
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f103 0208 	add.w	r2, r3, #8
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad76:	bf00      	nop
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad82:	b480      	push	{r7}
 800ad84:	b085      	sub	sp, #20
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	689a      	ldr	r2, [r3, #8]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	601a      	str	r2, [r3, #0]
}
 800adbe:	bf00      	nop
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adca:	b480      	push	{r7}
 800adcc:	b085      	sub	sp, #20
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade0:	d103      	bne.n	800adea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	e00c      	b.n	800ae04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3308      	adds	r3, #8
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	e002      	b.n	800adf8 <vListInsert+0x2e>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d2f6      	bcs.n	800adf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	685a      	ldr	r2, [r3, #4]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	1c5a      	adds	r2, r3, #1
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	601a      	str	r2, [r3, #0]
}
 800ae30:	bf00      	nop
 800ae32:	3714      	adds	r7, #20
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6892      	ldr	r2, [r2, #8]
 800ae52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	6852      	ldr	r2, [r2, #4]
 800ae5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d103      	bne.n	800ae70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	1e5a      	subs	r2, r3, #1
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10b      	bne.n	800aebc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	e7fd      	b.n	800aeb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aebc:	f002 f9ec 	bl	800d298 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aec8:	68f9      	ldr	r1, [r7, #12]
 800aeca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aecc:	fb01 f303 	mul.w	r3, r1, r3
 800aed0:	441a      	add	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeec:	3b01      	subs	r3, #1
 800aeee:	68f9      	ldr	r1, [r7, #12]
 800aef0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aef2:	fb01 f303 	mul.w	r3, r1, r3
 800aef6:	441a      	add	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	22ff      	movs	r2, #255	@ 0xff
 800af00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	22ff      	movs	r2, #255	@ 0xff
 800af08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d114      	bne.n	800af3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d01a      	beq.n	800af50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3310      	adds	r3, #16
 800af1e:	4618      	mov	r0, r3
 800af20:	f001 fa84 	bl	800c42c <xTaskRemoveFromEventList>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d012      	beq.n	800af50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af2a:	4b0d      	ldr	r3, [pc, #52]	@ (800af60 <xQueueGenericReset+0xd0>)
 800af2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	e009      	b.n	800af50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3310      	adds	r3, #16
 800af40:	4618      	mov	r0, r3
 800af42:	f7ff fef1 	bl	800ad28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3324      	adds	r3, #36	@ 0x24
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff feec 	bl	800ad28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af50:	f002 f9d4 	bl	800d2fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af54:	2301      	movs	r3, #1
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	e000ed04 	.word	0xe000ed04

0800af64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af64:	b580      	push	{r7, lr}
 800af66:	b08e      	sub	sp, #56	@ 0x38
 800af68:	af02      	add	r7, sp, #8
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10b      	bne.n	800af90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af8a:	bf00      	nop
 800af8c:	bf00      	nop
 800af8e:	e7fd      	b.n	800af8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10b      	bne.n	800afae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afa8:	bf00      	nop
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <xQueueGenericCreateStatic+0x56>
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <xQueueGenericCreateStatic+0x5a>
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <xQueueGenericCreateStatic+0x5c>
 800afbe:	2300      	movs	r3, #0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10b      	bne.n	800afdc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	623b      	str	r3, [r7, #32]
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	e7fd      	b.n	800afd8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d102      	bne.n	800afe8 <xQueueGenericCreateStatic+0x84>
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <xQueueGenericCreateStatic+0x88>
 800afe8:	2301      	movs	r3, #1
 800afea:	e000      	b.n	800afee <xQueueGenericCreateStatic+0x8a>
 800afec:	2300      	movs	r3, #0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10b      	bne.n	800b00a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	61fb      	str	r3, [r7, #28]
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	e7fd      	b.n	800b006 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b00a:	2354      	movs	r3, #84	@ 0x54
 800b00c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b54      	cmp	r3, #84	@ 0x54
 800b012:	d00b      	beq.n	800b02c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	61bb      	str	r3, [r7, #24]
}
 800b026:	bf00      	nop
 800b028:	bf00      	nop
 800b02a:	e7fd      	b.n	800b028 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b02c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00d      	beq.n	800b054 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b040:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	4613      	mov	r3, r2
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	68b9      	ldr	r1, [r7, #8]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 f840 	bl	800b0d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b056:	4618      	mov	r0, r3
 800b058:	3730      	adds	r7, #48	@ 0x30
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b08a      	sub	sp, #40	@ 0x28
 800b062:	af02      	add	r7, sp, #8
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	60b9      	str	r1, [r7, #8]
 800b068:	4613      	mov	r3, r2
 800b06a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10b      	bne.n	800b08a <xQueueGenericCreate+0x2c>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	613b      	str	r3, [r7, #16]
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	e7fd      	b.n	800b086 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
 800b092:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	3354      	adds	r3, #84	@ 0x54
 800b098:	4618      	mov	r0, r3
 800b09a:	f002 fa1f 	bl	800d4dc <pvPortMalloc>
 800b09e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d011      	beq.n	800b0ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	3354      	adds	r3, #84	@ 0x54
 800b0ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0b8:	79fa      	ldrb	r2, [r7, #7]
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	68b9      	ldr	r1, [r7, #8]
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f000 f805 	bl	800b0d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0ca:	69bb      	ldr	r3, [r7, #24]
	}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3720      	adds	r7, #32
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d103      	bne.n	800b0f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	69ba      	ldr	r2, [r7, #24]
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	e002      	b.n	800b0f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b102:	2101      	movs	r1, #1
 800b104:	69b8      	ldr	r0, [r7, #24]
 800b106:	f7ff fec3 	bl	800ae90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	78fa      	ldrb	r2, [r7, #3]
 800b10e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	2200      	movs	r2, #0
 800b116:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b118:	bf00      	nop
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08e      	sub	sp, #56	@ 0x38
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b12e:	2300      	movs	r3, #0
 800b130:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10b      	bne.n	800b154 <xQueueGenericSend+0x34>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b14e:	bf00      	nop
 800b150:	bf00      	nop
 800b152:	e7fd      	b.n	800b150 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d103      	bne.n	800b162 <xQueueGenericSend+0x42>
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <xQueueGenericSend+0x46>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <xQueueGenericSend+0x48>
 800b166:	2300      	movs	r3, #0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10b      	bne.n	800b184 <xQueueGenericSend+0x64>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	623b      	str	r3, [r7, #32]
}
 800b17e:	bf00      	nop
 800b180:	bf00      	nop
 800b182:	e7fd      	b.n	800b180 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b02      	cmp	r3, #2
 800b188:	d103      	bne.n	800b192 <xQueueGenericSend+0x72>
 800b18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d101      	bne.n	800b196 <xQueueGenericSend+0x76>
 800b192:	2301      	movs	r3, #1
 800b194:	e000      	b.n	800b198 <xQueueGenericSend+0x78>
 800b196:	2300      	movs	r3, #0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10b      	bne.n	800b1b4 <xQueueGenericSend+0x94>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	61fb      	str	r3, [r7, #28]
}
 800b1ae:	bf00      	nop
 800b1b0:	bf00      	nop
 800b1b2:	e7fd      	b.n	800b1b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1b4:	f001 fb00 	bl	800c7b8 <xTaskGetSchedulerState>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d102      	bne.n	800b1c4 <xQueueGenericSend+0xa4>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <xQueueGenericSend+0xa8>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e000      	b.n	800b1ca <xQueueGenericSend+0xaa>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10b      	bne.n	800b1e6 <xQueueGenericSend+0xc6>
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	61bb      	str	r3, [r7, #24]
}
 800b1e0:	bf00      	nop
 800b1e2:	bf00      	nop
 800b1e4:	e7fd      	b.n	800b1e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1e6:	f002 f857 	bl	800d298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d302      	bcc.n	800b1fc <xQueueGenericSend+0xdc>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d145      	bne.n	800b288 <xQueueGenericSend+0x168>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b200:	62fb      	str	r3, [r7, #44]	@ 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	68b9      	ldr	r1, [r7, #8]
 800b206:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b208:	f000 fa64 	bl	800b6d4 <prvCopyDataToQueue>
 800b20c:	62b8      	str	r0, [r7, #40]	@ 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b212:	2b00      	cmp	r3, #0
 800b214:	d014      	beq.n	800b240 <xQueueGenericSend+0x120>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d102      	bne.n	800b222 <xQueueGenericSend+0x102>
 800b21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d12e      	bne.n	800b280 <xQueueGenericSend+0x160>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800b222:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b224:	f000 fc15 	bl	800ba52 <prvNotifyQueueSetContainer>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d028      	beq.n	800b280 <xQueueGenericSend+0x160>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 800b22e:	4b4a      	ldr	r3, [pc, #296]	@ (800b358 <xQueueGenericSend+0x238>)
 800b230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	e01f      	b.n	800b280 <xQueueGenericSend+0x160>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	d010      	beq.n	800b26a <xQueueGenericSend+0x14a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	3324      	adds	r3, #36	@ 0x24
 800b24c:	4618      	mov	r0, r3
 800b24e:	f001 f8ed 	bl	800c42c <xTaskRemoveFromEventList>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d013      	beq.n	800b280 <xQueueGenericSend+0x160>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 800b258:	4b3f      	ldr	r3, [pc, #252]	@ (800b358 <xQueueGenericSend+0x238>)
 800b25a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b25e:	601a      	str	r2, [r3, #0]
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	e00a      	b.n	800b280 <xQueueGenericSend+0x160>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 800b26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d007      	beq.n	800b280 <xQueueGenericSend+0x160>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 800b270:	4b39      	ldr	r3, [pc, #228]	@ (800b358 <xQueueGenericSend+0x238>)
 800b272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b280:	f002 f83c 	bl	800d2fc <vPortExitCritical>
				return pdPASS;
 800b284:	2301      	movs	r3, #1
 800b286:	e063      	b.n	800b350 <xQueueGenericSend+0x230>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d103      	bne.n	800b296 <xQueueGenericSend+0x176>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b28e:	f002 f835 	bl	800d2fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b292:	2300      	movs	r3, #0
 800b294:	e05c      	b.n	800b350 <xQueueGenericSend+0x230>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d106      	bne.n	800b2aa <xQueueGenericSend+0x18a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b29c:	f107 0310 	add.w	r3, r7, #16
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f001 f927 	bl	800c4f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b2aa:	f002 f827 	bl	800d2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b2ae:	f000 fe8f 	bl	800bfd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2b2:	f001 fff1 	bl	800d298 <vPortEnterCritical>
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2bc:	b25b      	sxtb	r3, r3
 800b2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c2:	d103      	bne.n	800b2cc <xQueueGenericSend+0x1ac>
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2d2:	b25b      	sxtb	r3, r3
 800b2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d8:	d103      	bne.n	800b2e2 <xQueueGenericSend+0x1c2>
 800b2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2e2:	f002 f80b 	bl	800d2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2e6:	1d3a      	adds	r2, r7, #4
 800b2e8:	f107 0310 	add.w	r3, r7, #16
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f001 f916 	bl	800c520 <xTaskCheckForTimeOut>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d124      	bne.n	800b344 <xQueueGenericSend+0x224>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b2fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2fc:	f000 faef 	bl	800b8de <prvIsQueueFull>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d018      	beq.n	800b338 <xQueueGenericSend+0x218>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	3310      	adds	r3, #16
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	4611      	mov	r1, r2
 800b30e:	4618      	mov	r0, r3
 800b310:	f001 f83a 	bl	800c388 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b316:	f000 fa6d 	bl	800b7f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b31a:	f000 fe67 	bl	800bfec <xTaskResumeAll>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	f47f af60 	bne.w	800b1e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b326:	4b0c      	ldr	r3, [pc, #48]	@ (800b358 <xQueueGenericSend+0x238>)
 800b328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b32c:	601a      	str	r2, [r3, #0]
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	e756      	b.n	800b1e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b33a:	f000 fa5b 	bl	800b7f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b33e:	f000 fe55 	bl	800bfec <xTaskResumeAll>
 800b342:	e750      	b.n	800b1e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b346:	f000 fa55 	bl	800b7f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b34a:	f000 fe4f 	bl	800bfec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b34e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b350:	4618      	mov	r0, r3
 800b352:	3738      	adds	r7, #56	@ 0x38
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	e000ed04 	.word	0xe000ed04

0800b35c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b090      	sub	sp, #64	@ 0x40
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
 800b368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10b      	bne.n	800b38c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b386:	bf00      	nop
 800b388:	bf00      	nop
 800b38a:	e7fd      	b.n	800b388 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d103      	bne.n	800b39a <xQueueGenericSendFromISR+0x3e>
 800b392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b396:	2b00      	cmp	r3, #0
 800b398:	d101      	bne.n	800b39e <xQueueGenericSendFromISR+0x42>
 800b39a:	2301      	movs	r3, #1
 800b39c:	e000      	b.n	800b3a0 <xQueueGenericSendFromISR+0x44>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10b      	bne.n	800b3bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b3b6:	bf00      	nop
 800b3b8:	bf00      	nop
 800b3ba:	e7fd      	b.n	800b3b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d103      	bne.n	800b3ca <xQueueGenericSendFromISR+0x6e>
 800b3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d101      	bne.n	800b3ce <xQueueGenericSendFromISR+0x72>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e000      	b.n	800b3d0 <xQueueGenericSendFromISR+0x74>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10b      	bne.n	800b3ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d8:	f383 8811 	msr	BASEPRI, r3
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	623b      	str	r3, [r7, #32]
}
 800b3e6:	bf00      	nop
 800b3e8:	bf00      	nop
 800b3ea:	e7fd      	b.n	800b3e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3ec:	f002 f834 	bl	800d458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b3f0:	f3ef 8211 	mrs	r2, BASEPRI
 800b3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	61fa      	str	r2, [r7, #28]
 800b406:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b408:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b40a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b414:	429a      	cmp	r2, r3
 800b416:	d302      	bcc.n	800b41e <xQueueGenericSendFromISR+0xc2>
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	2b02      	cmp	r3, #2
 800b41c:	d146      	bne.n	800b4ac <xQueueGenericSendFromISR+0x150>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b420:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b424:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b42c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	68b9      	ldr	r1, [r7, #8]
 800b432:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b434:	f000 f94e 	bl	800b6d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b438:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b440:	d129      	bne.n	800b496 <xQueueGenericSendFromISR+0x13a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b446:	2b00      	cmp	r3, #0
 800b448:	d012      	beq.n	800b470 <xQueueGenericSendFromISR+0x114>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	d102      	bne.n	800b456 <xQueueGenericSendFromISR+0xfa>
 800b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b452:	2b00      	cmp	r3, #0
 800b454:	d127      	bne.n	800b4a6 <xQueueGenericSendFromISR+0x14a>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800b456:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b458:	f000 fafb 	bl	800ba52 <prvNotifyQueueSetContainer>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d021      	beq.n	800b4a6 <xQueueGenericSendFromISR+0x14a>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d01e      	beq.n	800b4a6 <xQueueGenericSendFromISR+0x14a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	e01a      	b.n	800b4a6 <xQueueGenericSendFromISR+0x14a>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b474:	2b00      	cmp	r3, #0
 800b476:	d016      	beq.n	800b4a6 <xQueueGenericSendFromISR+0x14a>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47a:	3324      	adds	r3, #36	@ 0x24
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 ffd5 	bl	800c42c <xTaskRemoveFromEventList>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00e      	beq.n	800b4a6 <xQueueGenericSendFromISR+0x14a>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00b      	beq.n	800b4a6 <xQueueGenericSendFromISR+0x14a>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	e007      	b.n	800b4a6 <xQueueGenericSendFromISR+0x14a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b496:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b49a:	3301      	adds	r3, #1
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	b25a      	sxtb	r2, r3
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b4aa:	e001      	b.n	800b4b0 <xQueueGenericSendFromISR+0x154>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b4ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b4bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3740      	adds	r7, #64	@ 0x40
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08c      	sub	sp, #48	@ 0x30
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10b      	bne.n	800b4fa <xQueueReceive+0x32>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	623b      	str	r3, [r7, #32]
}
 800b4f4:	bf00      	nop
 800b4f6:	bf00      	nop
 800b4f8:	e7fd      	b.n	800b4f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d103      	bne.n	800b508 <xQueueReceive+0x40>
 800b500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <xQueueReceive+0x44>
 800b508:	2301      	movs	r3, #1
 800b50a:	e000      	b.n	800b50e <xQueueReceive+0x46>
 800b50c:	2300      	movs	r3, #0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10b      	bne.n	800b52a <xQueueReceive+0x62>
	__asm volatile
 800b512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	61fb      	str	r3, [r7, #28]
}
 800b524:	bf00      	nop
 800b526:	bf00      	nop
 800b528:	e7fd      	b.n	800b526 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b52a:	f001 f945 	bl	800c7b8 <xTaskGetSchedulerState>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <xQueueReceive+0x72>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <xQueueReceive+0x76>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <xQueueReceive+0x78>
 800b53e:	2300      	movs	r3, #0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10b      	bne.n	800b55c <xQueueReceive+0x94>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	61bb      	str	r3, [r7, #24]
}
 800b556:	bf00      	nop
 800b558:	bf00      	nop
 800b55a:	e7fd      	b.n	800b558 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b55c:	f001 fe9c 	bl	800d298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b564:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d01f      	beq.n	800b5ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b570:	f000 f91a 	bl	800b7a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b576:	1e5a      	subs	r2, r3, #1
 800b578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00f      	beq.n	800b5a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b586:	3310      	adds	r3, #16
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 ff4f 	bl	800c42c <xTaskRemoveFromEventList>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d007      	beq.n	800b5a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b594:	4b3c      	ldr	r3, [pc, #240]	@ (800b688 <xQueueReceive+0x1c0>)
 800b596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b5a4:	f001 feaa 	bl	800d2fc <vPortExitCritical>
				return pdPASS;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e069      	b.n	800b680 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d103      	bne.n	800b5ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5b2:	f001 fea3 	bl	800d2fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	e062      	b.n	800b680 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d106      	bne.n	800b5ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5c0:	f107 0310 	add.w	r3, r7, #16
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 ff95 	bl	800c4f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5ce:	f001 fe95 	bl	800d2fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5d2:	f000 fcfd 	bl	800bfd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5d6:	f001 fe5f 	bl	800d298 <vPortEnterCritical>
 800b5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b5e0:	b25b      	sxtb	r3, r3
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e6:	d103      	bne.n	800b5f0 <xQueueReceive+0x128>
 800b5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5f6:	b25b      	sxtb	r3, r3
 800b5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fc:	d103      	bne.n	800b606 <xQueueReceive+0x13e>
 800b5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b606:	f001 fe79 	bl	800d2fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b60a:	1d3a      	adds	r2, r7, #4
 800b60c:	f107 0310 	add.w	r3, r7, #16
 800b610:	4611      	mov	r1, r2
 800b612:	4618      	mov	r0, r3
 800b614:	f000 ff84 	bl	800c520 <xTaskCheckForTimeOut>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d123      	bne.n	800b666 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b61e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b620:	f000 f947 	bl	800b8b2 <prvIsQueueEmpty>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d017      	beq.n	800b65a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62c:	3324      	adds	r3, #36	@ 0x24
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	4611      	mov	r1, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f000 fea8 	bl	800c388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b63a:	f000 f8db 	bl	800b7f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b63e:	f000 fcd5 	bl	800bfec <xTaskResumeAll>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d189      	bne.n	800b55c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b648:	4b0f      	ldr	r3, [pc, #60]	@ (800b688 <xQueueReceive+0x1c0>)
 800b64a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	e780      	b.n	800b55c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b65a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b65c:	f000 f8ca 	bl	800b7f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b660:	f000 fcc4 	bl	800bfec <xTaskResumeAll>
 800b664:	e77a      	b.n	800b55c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b668:	f000 f8c4 	bl	800b7f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b66c:	f000 fcbe 	bl	800bfec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b672:	f000 f91e 	bl	800b8b2 <prvIsQueueEmpty>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f43f af6f 	beq.w	800b55c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b67e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b680:	4618      	mov	r0, r3
 800b682:	3730      	adds	r7, #48	@ 0x30
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	e000ed04 	.word	0xe000ed04

0800b68c <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10b      	bne.n	800b6b6 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	60fb      	str	r3, [r7, #12]
}
 800b6b0:	bf00      	nop
 800b6b2:	bf00      	nop
 800b6b4:	e7fd      	b.n	800b6b2 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800b6b6:	f001 fdef 	bl	800d298 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b6c6:	f001 fe19 	bl	800d2fc <vPortExitCritical>

	return uxReturn;
 800b6ca:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3718      	adds	r7, #24
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10d      	bne.n	800b70e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d14d      	bne.n	800b796 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f001 f878 	bl	800c7f4 <xTaskPriorityDisinherit>
 800b704:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	609a      	str	r2, [r3, #8]
 800b70c:	e043      	b.n	800b796 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d119      	bne.n	800b748 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6858      	ldr	r0, [r3, #4]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b71c:	461a      	mov	r2, r3
 800b71e:	68b9      	ldr	r1, [r7, #8]
 800b720:	f002 f94e 	bl	800d9c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b72c:	441a      	add	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d32b      	bcc.n	800b796 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	605a      	str	r2, [r3, #4]
 800b746:	e026      	b.n	800b796 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	68d8      	ldr	r0, [r3, #12]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b750:	461a      	mov	r2, r3
 800b752:	68b9      	ldr	r1, [r7, #8]
 800b754:	f002 f934 	bl	800d9c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	68da      	ldr	r2, [r3, #12]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b760:	425b      	negs	r3, r3
 800b762:	441a      	add	r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	429a      	cmp	r2, r3
 800b772:	d207      	bcs.n	800b784 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	689a      	ldr	r2, [r3, #8]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b77c:	425b      	negs	r3, r3
 800b77e:	441a      	add	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b02      	cmp	r3, #2
 800b788:	d105      	bne.n	800b796 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	3b01      	subs	r3, #1
 800b794:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	1c5a      	adds	r2, r3, #1
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b79e:	697b      	ldr	r3, [r7, #20]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d018      	beq.n	800b7ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68da      	ldr	r2, [r3, #12]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7c2:	441a      	add	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68da      	ldr	r2, [r3, #12]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d303      	bcc.n	800b7dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68d9      	ldr	r1, [r3, #12]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	6838      	ldr	r0, [r7, #0]
 800b7e8:	f002 f8ea 	bl	800d9c0 <memcpy>
	}
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b7fc:	f001 fd4c 	bl	800d298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b806:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b808:	e01e      	b.n	800b848 <prvUnlockQueue+0x54>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d008      	beq.n	800b824 <prvUnlockQueue+0x30>
				{
					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f91d 	bl	800ba52 <prvNotifyQueueSetContainer>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d010      	beq.n	800b840 <prvUnlockQueue+0x4c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 800b81e:	f000 fee3 	bl	800c5e8 <vTaskMissedYield>
 800b822:	e00d      	b.n	800b840 <prvUnlockQueue+0x4c>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d012      	beq.n	800b852 <prvUnlockQueue+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3324      	adds	r3, #36	@ 0x24
 800b830:	4618      	mov	r0, r3
 800b832:	f000 fdfb 	bl	800c42c <xTaskRemoveFromEventList>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <prvUnlockQueue+0x4c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 800b83c:	f000 fed4 	bl	800c5e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	3b01      	subs	r3, #1
 800b844:	b2db      	uxtb	r3, r3
 800b846:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	dcdc      	bgt.n	800b80a <prvUnlockQueue+0x16>
 800b850:	e000      	b.n	800b854 <prvUnlockQueue+0x60>
						break;
 800b852:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	22ff      	movs	r2, #255	@ 0xff
 800b858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b85c:	f001 fd4e 	bl	800d2fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b860:	f001 fd1a 	bl	800d298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b86a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b86c:	e011      	b.n	800b892 <prvUnlockQueue+0x9e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d012      	beq.n	800b89c <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	3310      	adds	r3, #16
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 fdd6 	bl	800c42c <xTaskRemoveFromEventList>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <prvUnlockQueue+0x96>
				{
					vTaskMissedYield();
 800b886:	f000 feaf 	bl	800c5e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b88a:	7bbb      	ldrb	r3, [r7, #14]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b896:	2b00      	cmp	r3, #0
 800b898:	dce9      	bgt.n	800b86e <prvUnlockQueue+0x7a>
 800b89a:	e000      	b.n	800b89e <prvUnlockQueue+0xaa>
			}
			else
			{
				break;
 800b89c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	22ff      	movs	r2, #255	@ 0xff
 800b8a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b8a6:	f001 fd29 	bl	800d2fc <vPortExitCritical>
}
 800b8aa:	bf00      	nop
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8ba:	f001 fced 	bl	800d298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d102      	bne.n	800b8cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	e001      	b.n	800b8d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8d0:	f001 fd14 	bl	800d2fc <vPortExitCritical>

	return xReturn;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b084      	sub	sp, #16
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8e6:	f001 fcd7 	bl	800d298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d102      	bne.n	800b8fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	60fb      	str	r3, [r7, #12]
 800b8fa:	e001      	b.n	800b900 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b900:	f001 fcfc 	bl	800d2fc <vPortExitCritical>

	return xReturn;
 800b904:	68fb      	ldr	r3, [r7, #12]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
	...

0800b910 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b91a:	2300      	movs	r3, #0
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	e014      	b.n	800b94a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b920:	4a0f      	ldr	r2, [pc, #60]	@ (800b960 <vQueueAddToRegistry+0x50>)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10b      	bne.n	800b944 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b92c:	490c      	ldr	r1, [pc, #48]	@ (800b960 <vQueueAddToRegistry+0x50>)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b936:	4a0a      	ldr	r2, [pc, #40]	@ (800b960 <vQueueAddToRegistry+0x50>)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	4413      	add	r3, r2
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b942:	e006      	b.n	800b952 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3301      	adds	r3, #1
 800b948:	60fb      	str	r3, [r7, #12]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b07      	cmp	r3, #7
 800b94e:	d9e7      	bls.n	800b920 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b950:	bf00      	nop
 800b952:	bf00      	nop
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	24000d60 	.word	0x24000d60

0800b964 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b974:	f001 fc90 	bl	800d298 <vPortEnterCritical>
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b97e:	b25b      	sxtb	r3, r3
 800b980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b984:	d103      	bne.n	800b98e <vQueueWaitForMessageRestricted+0x2a>
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b994:	b25b      	sxtb	r3, r3
 800b996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99a:	d103      	bne.n	800b9a4 <vQueueWaitForMessageRestricted+0x40>
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9a4:	f001 fcaa 	bl	800d2fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d106      	bne.n	800b9be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	3324      	adds	r3, #36	@ 0x24
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	68b9      	ldr	r1, [r7, #8]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f000 fd0b 	bl	800c3d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b9be:	6978      	ldr	r0, [r7, #20]
 800b9c0:	f7ff ff18 	bl	800b7f4 <prvUnlockQueue>
	}
 800b9c4:	bf00      	nop
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
	{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
	QueueSetHandle_t pxQueue;

		pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2104      	movs	r1, #4
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff fb40 	bl	800b05e <xQueueGenericCreate>
 800b9de:	60f8      	str	r0, [r7, #12]

		return pxQueue;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
	}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <xQueueAddToSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet )
	{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b9f4:	f001 fc50 	bl	800d298 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <xQueueAddToSet+0x1c>
			{
				/* Cannot add a queue/semaphore to more than one queue set. */
				xReturn = pdFAIL;
 800ba00:	2300      	movs	r3, #0
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	e00b      	b.n	800ba1e <xQueueAddToSet+0x34>
			}
			else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d002      	beq.n	800ba14 <xQueueAddToSet+0x2a>
			{
				/* Cannot add a queue/semaphore to a queue set if there are already
				items in the queue/semaphore. */
				xReturn = pdFAIL;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60fb      	str	r3, [r7, #12]
 800ba12:	e004      	b.n	800ba1e <xQueueAddToSet+0x34>
			}
			else
			{
				( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	649a      	str	r2, [r3, #72]	@ 0x48
				xReturn = pdPASS;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800ba1e:	f001 fc6d 	bl	800d2fc <vPortExitCritical>

		return xReturn;
 800ba22:	68fb      	ldr	r3, [r7, #12]
	}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <xQueueSelectFromSet>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, TickType_t const xTicksToWait )
	{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
	QueueSetMemberHandle_t xReturn = NULL;
 800ba36:	2300      	movs	r3, #0
 800ba38:	60fb      	str	r3, [r7, #12]

		( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
 800ba3a:	f107 030c 	add.w	r3, r7, #12
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff fd40 	bl	800b4c8 <xQueueReceive>
		return xReturn;
 800ba48:	68fb      	ldr	r3, [r7, #12]
	}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
	{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b088      	sub	sp, #32
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba5e:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 800ba60:	2300      	movs	r3, #0
 800ba62:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10b      	bne.n	800ba82 <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	613b      	str	r3, [r7, #16]
}
 800ba7c:	bf00      	nop
 800ba7e:	bf00      	nop
 800ba80:	e7fd      	b.n	800ba7e <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d30b      	bcc.n	800baa6 <prvNotifyQueueSetContainer+0x54>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	60fb      	str	r3, [r7, #12]
}
 800baa0:	bf00      	nop
 800baa2:	bf00      	nop
 800baa4:	e7fd      	b.n	800baa2 <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baae:	429a      	cmp	r2, r3
 800bab0:	d225      	bcs.n	800bafe <prvNotifyQueueSetContainer+0xac>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bab8:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 800baba:	1d3b      	adds	r3, r7, #4
 800babc:	2200      	movs	r2, #0
 800babe:	4619      	mov	r1, r3
 800bac0:	69b8      	ldr	r0, [r7, #24]
 800bac2:	f7ff fe07 	bl	800b6d4 <prvCopyDataToQueue>
 800bac6:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 800bac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad0:	d10e      	bne.n	800baf0 <prvNotifyQueueSetContainer+0x9e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d011      	beq.n	800bafe <prvNotifyQueueSetContainer+0xac>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	3324      	adds	r3, #36	@ 0x24
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 fca4 	bl	800c42c <xTaskRemoveFromEventList>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d009      	beq.n	800bafe <prvNotifyQueueSetContainer+0xac>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 800baea:	2301      	movs	r3, #1
 800baec:	61fb      	str	r3, [r7, #28]
 800baee:	e006      	b.n	800bafe <prvNotifyQueueSetContainer+0xac>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
 800baf2:	3301      	adds	r3, #1
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	b25a      	sxtb	r2, r3
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bafe:	69fb      	ldr	r3, [r7, #28]
	}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3720      	adds	r7, #32
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b08e      	sub	sp, #56	@ 0x38
 800bb0c:	af04      	add	r7, sp, #16
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
 800bb14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10b      	bne.n	800bb34 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	623b      	str	r3, [r7, #32]
}
 800bb2e:	bf00      	nop
 800bb30:	bf00      	nop
 800bb32:	e7fd      	b.n	800bb30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10b      	bne.n	800bb52 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	61fb      	str	r3, [r7, #28]
}
 800bb4c:	bf00      	nop
 800bb4e:	bf00      	nop
 800bb50:	e7fd      	b.n	800bb4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb52:	23b8      	movs	r3, #184	@ 0xb8
 800bb54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	2bb8      	cmp	r3, #184	@ 0xb8
 800bb5a:	d00b      	beq.n	800bb74 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	61bb      	str	r3, [r7, #24]
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	e7fd      	b.n	800bb70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d01e      	beq.n	800bbba <xTaskCreateStatic+0xb2>
 800bb7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d01b      	beq.n	800bbba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8e:	2202      	movs	r2, #2
 800bb90:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bb94:	2300      	movs	r3, #0
 800bb96:	9303      	str	r3, [sp, #12]
 800bb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9a:	9302      	str	r3, [sp, #8]
 800bb9c:	f107 0314 	add.w	r3, r7, #20
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f000 f851 	bl	800bc54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbb4:	f000 f8f6 	bl	800bda4 <prvAddNewTaskToReadyList>
 800bbb8:	e001      	b.n	800bbbe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbbe:	697b      	ldr	r3, [r7, #20]
	}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3728      	adds	r7, #40	@ 0x28
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b08c      	sub	sp, #48	@ 0x30
 800bbcc:	af04      	add	r7, sp, #16
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	603b      	str	r3, [r7, #0]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbd8:	88fb      	ldrh	r3, [r7, #6]
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f001 fc7d 	bl	800d4dc <pvPortMalloc>
 800bbe2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d00e      	beq.n	800bc08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbea:	20b8      	movs	r0, #184	@ 0xb8
 800bbec:	f001 fc76 	bl	800d4dc <pvPortMalloc>
 800bbf0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d003      	beq.n	800bc00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	631a      	str	r2, [r3, #48]	@ 0x30
 800bbfe:	e005      	b.n	800bc0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc00:	6978      	ldr	r0, [r7, #20]
 800bc02:	f001 fd39 	bl	800d678 <vPortFree>
 800bc06:	e001      	b.n	800bc0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d017      	beq.n	800bc42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc1a:	88fa      	ldrh	r2, [r7, #6]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9303      	str	r3, [sp, #12]
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	9302      	str	r3, [sp, #8]
 800bc24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	68b9      	ldr	r1, [r7, #8]
 800bc30:	68f8      	ldr	r0, [r7, #12]
 800bc32:	f000 f80f 	bl	800bc54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc36:	69f8      	ldr	r0, [r7, #28]
 800bc38:	f000 f8b4 	bl	800bda4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	61bb      	str	r3, [r7, #24]
 800bc40:	e002      	b.n	800bc48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc42:	f04f 33ff 	mov.w	r3, #4294967295
 800bc46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc48:	69bb      	ldr	r3, [r7, #24]
	}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3720      	adds	r7, #32
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	21a5      	movs	r1, #165	@ 0xa5
 800bc6e:	f001 fe23 	bl	800d8b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bc7c:	440b      	add	r3, r1
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	f023 0307 	bic.w	r3, r3, #7
 800bc8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	f003 0307 	and.w	r3, r3, #7
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00b      	beq.n	800bcae <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	617b      	str	r3, [r7, #20]
}
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	e7fd      	b.n	800bcaa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01f      	beq.n	800bcf4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	61fb      	str	r3, [r7, #28]
 800bcb8:	e012      	b.n	800bce0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	7819      	ldrb	r1, [r3, #0]
 800bcc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	3334      	adds	r3, #52	@ 0x34
 800bcca:	460a      	mov	r2, r1
 800bccc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d006      	beq.n	800bce8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	3301      	adds	r3, #1
 800bcde:	61fb      	str	r3, [r7, #28]
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	2b1f      	cmp	r3, #31
 800bce4:	d9e9      	bls.n	800bcba <prvInitialiseNewTask+0x66>
 800bce6:	e000      	b.n	800bcea <prvInitialiseNewTask+0x96>
			{
				break;
 800bce8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bcea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800bcf2:	e003      	b.n	800bcfc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bcf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfe:	2b37      	cmp	r3, #55	@ 0x37
 800bd00:	d901      	bls.n	800bd06 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd02:	2337      	movs	r3, #55	@ 0x37
 800bd04:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd10:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800bd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd14:	2200      	movs	r2, #0
 800bd16:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7ff f823 	bl	800ad68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd24:	3318      	adds	r3, #24
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7ff f81e 	bl	800ad68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd40:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd44:	2200      	movs	r2, #0
 800bd46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd54:	3364      	adds	r3, #100	@ 0x64
 800bd56:	224c      	movs	r2, #76	@ 0x4c
 800bd58:	2100      	movs	r1, #0
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f001 fdac 	bl	800d8b8 <memset>
 800bd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd62:	4a0d      	ldr	r2, [pc, #52]	@ (800bd98 <prvInitialiseNewTask+0x144>)
 800bd64:	669a      	str	r2, [r3, #104]	@ 0x68
 800bd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd68:	4a0c      	ldr	r2, [pc, #48]	@ (800bd9c <prvInitialiseNewTask+0x148>)
 800bd6a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6e:	4a0c      	ldr	r2, [pc, #48]	@ (800bda0 <prvInitialiseNewTask+0x14c>)
 800bd70:	671a      	str	r2, [r3, #112]	@ 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	68f9      	ldr	r1, [r7, #12]
 800bd76:	69b8      	ldr	r0, [r7, #24]
 800bd78:	f001 f95a 	bl	800d030 <pxPortInitialiseStack>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd8e:	bf00      	nop
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	240213f8 	.word	0x240213f8
 800bd9c:	24021460 	.word	0x24021460
 800bda0:	240214c8 	.word	0x240214c8

0800bda4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bdac:	f001 fa74 	bl	800d298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bdb0:	4b2d      	ldr	r3, [pc, #180]	@ (800be68 <prvAddNewTaskToReadyList+0xc4>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	4a2c      	ldr	r2, [pc, #176]	@ (800be68 <prvAddNewTaskToReadyList+0xc4>)
 800bdb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdba:	4b2c      	ldr	r3, [pc, #176]	@ (800be6c <prvAddNewTaskToReadyList+0xc8>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d109      	bne.n	800bdd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdc2:	4a2a      	ldr	r2, [pc, #168]	@ (800be6c <prvAddNewTaskToReadyList+0xc8>)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bdc8:	4b27      	ldr	r3, [pc, #156]	@ (800be68 <prvAddNewTaskToReadyList+0xc4>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d110      	bne.n	800bdf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bdd0:	f000 fc2e 	bl	800c630 <prvInitialiseTaskLists>
 800bdd4:	e00d      	b.n	800bdf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bdd6:	4b26      	ldr	r3, [pc, #152]	@ (800be70 <prvAddNewTaskToReadyList+0xcc>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d109      	bne.n	800bdf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdde:	4b23      	ldr	r3, [pc, #140]	@ (800be6c <prvAddNewTaskToReadyList+0xc8>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d802      	bhi.n	800bdf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bdec:	4a1f      	ldr	r2, [pc, #124]	@ (800be6c <prvAddNewTaskToReadyList+0xc8>)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bdf2:	4b20      	ldr	r3, [pc, #128]	@ (800be74 <prvAddNewTaskToReadyList+0xd0>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	4a1e      	ldr	r2, [pc, #120]	@ (800be74 <prvAddNewTaskToReadyList+0xd0>)
 800bdfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bdfc:	4b1d      	ldr	r3, [pc, #116]	@ (800be74 <prvAddNewTaskToReadyList+0xd0>)
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be08:	4b1b      	ldr	r3, [pc, #108]	@ (800be78 <prvAddNewTaskToReadyList+0xd4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d903      	bls.n	800be18 <prvAddNewTaskToReadyList+0x74>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be14:	4a18      	ldr	r2, [pc, #96]	@ (800be78 <prvAddNewTaskToReadyList+0xd4>)
 800be16:	6013      	str	r3, [r2, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be1c:	4613      	mov	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	4a15      	ldr	r2, [pc, #84]	@ (800be7c <prvAddNewTaskToReadyList+0xd8>)
 800be26:	441a      	add	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	3304      	adds	r3, #4
 800be2c:	4619      	mov	r1, r3
 800be2e:	4610      	mov	r0, r2
 800be30:	f7fe ffa7 	bl	800ad82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be34:	f001 fa62 	bl	800d2fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be38:	4b0d      	ldr	r3, [pc, #52]	@ (800be70 <prvAddNewTaskToReadyList+0xcc>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00e      	beq.n	800be5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be40:	4b0a      	ldr	r3, [pc, #40]	@ (800be6c <prvAddNewTaskToReadyList+0xc8>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d207      	bcs.n	800be5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be4e:	4b0c      	ldr	r3, [pc, #48]	@ (800be80 <prvAddNewTaskToReadyList+0xdc>)
 800be50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be5e:	bf00      	nop
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	24001274 	.word	0x24001274
 800be6c:	24000da0 	.word	0x24000da0
 800be70:	24001280 	.word	0x24001280
 800be74:	24001290 	.word	0x24001290
 800be78:	2400127c 	.word	0x2400127c
 800be7c:	24000da4 	.word	0x24000da4
 800be80:	e000ed04 	.word	0xe000ed04

0800be84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800be8c:	2300      	movs	r3, #0
 800be8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d018      	beq.n	800bec8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800be96:	4b14      	ldr	r3, [pc, #80]	@ (800bee8 <vTaskDelay+0x64>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00b      	beq.n	800beb6 <vTaskDelay+0x32>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	60bb      	str	r3, [r7, #8]
}
 800beb0:	bf00      	nop
 800beb2:	bf00      	nop
 800beb4:	e7fd      	b.n	800beb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800beb6:	f000 f88b 	bl	800bfd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800beba:	2100      	movs	r1, #0
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fd09 	bl	800c8d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bec2:	f000 f893 	bl	800bfec <xTaskResumeAll>
 800bec6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d107      	bne.n	800bede <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bece:	4b07      	ldr	r3, [pc, #28]	@ (800beec <vTaskDelay+0x68>)
 800bed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bed4:	601a      	str	r2, [r3, #0]
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bede:	bf00      	nop
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	2400129c 	.word	0x2400129c
 800beec:	e000ed04 	.word	0xe000ed04

0800bef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b08a      	sub	sp, #40	@ 0x28
 800bef4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bef6:	2300      	movs	r3, #0
 800bef8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800befa:	2300      	movs	r3, #0
 800befc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800befe:	463a      	mov	r2, r7
 800bf00:	1d39      	adds	r1, r7, #4
 800bf02:	f107 0308 	add.w	r3, r7, #8
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe feda 	bl	800acc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	9202      	str	r2, [sp, #8]
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	2300      	movs	r3, #0
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	460a      	mov	r2, r1
 800bf1e:	4924      	ldr	r1, [pc, #144]	@ (800bfb0 <vTaskStartScheduler+0xc0>)
 800bf20:	4824      	ldr	r0, [pc, #144]	@ (800bfb4 <vTaskStartScheduler+0xc4>)
 800bf22:	f7ff fdf1 	bl	800bb08 <xTaskCreateStatic>
 800bf26:	4603      	mov	r3, r0
 800bf28:	4a23      	ldr	r2, [pc, #140]	@ (800bfb8 <vTaskStartScheduler+0xc8>)
 800bf2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf2c:	4b22      	ldr	r3, [pc, #136]	@ (800bfb8 <vTaskStartScheduler+0xc8>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf34:	2301      	movs	r3, #1
 800bf36:	617b      	str	r3, [r7, #20]
 800bf38:	e001      	b.n	800bf3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d102      	bne.n	800bf4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf44:	f000 fd1a 	bl	800c97c <xTimerCreateTimerTask>
 800bf48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d11b      	bne.n	800bf88 <vTaskStartScheduler+0x98>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	613b      	str	r3, [r7, #16]
}
 800bf62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf64:	4b15      	ldr	r3, [pc, #84]	@ (800bfbc <vTaskStartScheduler+0xcc>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	3364      	adds	r3, #100	@ 0x64
 800bf6a:	4a15      	ldr	r2, [pc, #84]	@ (800bfc0 <vTaskStartScheduler+0xd0>)
 800bf6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf6e:	4b15      	ldr	r3, [pc, #84]	@ (800bfc4 <vTaskStartScheduler+0xd4>)
 800bf70:	f04f 32ff 	mov.w	r2, #4294967295
 800bf74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf76:	4b14      	ldr	r3, [pc, #80]	@ (800bfc8 <vTaskStartScheduler+0xd8>)
 800bf78:	2201      	movs	r2, #1
 800bf7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf7c:	4b13      	ldr	r3, [pc, #76]	@ (800bfcc <vTaskStartScheduler+0xdc>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf82:	f001 f8e5 	bl	800d150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf86:	e00f      	b.n	800bfa8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8e:	d10b      	bne.n	800bfa8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	60fb      	str	r3, [r7, #12]
}
 800bfa2:	bf00      	nop
 800bfa4:	bf00      	nop
 800bfa6:	e7fd      	b.n	800bfa4 <vTaskStartScheduler+0xb4>
}
 800bfa8:	bf00      	nop
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	0800dad8 	.word	0x0800dad8
 800bfb4:	0800c601 	.word	0x0800c601
 800bfb8:	24001298 	.word	0x24001298
 800bfbc:	24000da0 	.word	0x24000da0
 800bfc0:	24000014 	.word	0x24000014
 800bfc4:	24001294 	.word	0x24001294
 800bfc8:	24001280 	.word	0x24001280
 800bfcc:	24001278 	.word	0x24001278

0800bfd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bfd4:	4b04      	ldr	r3, [pc, #16]	@ (800bfe8 <vTaskSuspendAll+0x18>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	4a03      	ldr	r2, [pc, #12]	@ (800bfe8 <vTaskSuspendAll+0x18>)
 800bfdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bfde:	bf00      	nop
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	2400129c 	.word	0x2400129c

0800bfec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bff2:	2300      	movs	r3, #0
 800bff4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bff6:	2300      	movs	r3, #0
 800bff8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bffa:	4b42      	ldr	r3, [pc, #264]	@ (800c104 <xTaskResumeAll+0x118>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10b      	bne.n	800c01a <xTaskResumeAll+0x2e>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	603b      	str	r3, [r7, #0]
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	e7fd      	b.n	800c016 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c01a:	f001 f93d 	bl	800d298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c01e:	4b39      	ldr	r3, [pc, #228]	@ (800c104 <xTaskResumeAll+0x118>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3b01      	subs	r3, #1
 800c024:	4a37      	ldr	r2, [pc, #220]	@ (800c104 <xTaskResumeAll+0x118>)
 800c026:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c028:	4b36      	ldr	r3, [pc, #216]	@ (800c104 <xTaskResumeAll+0x118>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d162      	bne.n	800c0f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c030:	4b35      	ldr	r3, [pc, #212]	@ (800c108 <xTaskResumeAll+0x11c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d05e      	beq.n	800c0f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c038:	e02f      	b.n	800c09a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c03a:	4b34      	ldr	r3, [pc, #208]	@ (800c10c <xTaskResumeAll+0x120>)
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3318      	adds	r3, #24
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe fef8 	bl	800ae3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3304      	adds	r3, #4
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe fef3 	bl	800ae3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c05a:	4b2d      	ldr	r3, [pc, #180]	@ (800c110 <xTaskResumeAll+0x124>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d903      	bls.n	800c06a <xTaskResumeAll+0x7e>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c066:	4a2a      	ldr	r2, [pc, #168]	@ (800c110 <xTaskResumeAll+0x124>)
 800c068:	6013      	str	r3, [r2, #0]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c06e:	4613      	mov	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4a27      	ldr	r2, [pc, #156]	@ (800c114 <xTaskResumeAll+0x128>)
 800c078:	441a      	add	r2, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f7fe fe7e 	bl	800ad82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c08a:	4b23      	ldr	r3, [pc, #140]	@ (800c118 <xTaskResumeAll+0x12c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c090:	429a      	cmp	r2, r3
 800c092:	d302      	bcc.n	800c09a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c094:	4b21      	ldr	r3, [pc, #132]	@ (800c11c <xTaskResumeAll+0x130>)
 800c096:	2201      	movs	r2, #1
 800c098:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c09a:	4b1c      	ldr	r3, [pc, #112]	@ (800c10c <xTaskResumeAll+0x120>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1cb      	bne.n	800c03a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d001      	beq.n	800c0ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0a8:	f000 fb66 	bl	800c778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c0ac:	4b1c      	ldr	r3, [pc, #112]	@ (800c120 <xTaskResumeAll+0x134>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d010      	beq.n	800c0da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0b8:	f000 f846 	bl	800c148 <xTaskIncrementTick>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c0c2:	4b16      	ldr	r3, [pc, #88]	@ (800c11c <xTaskResumeAll+0x130>)
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1f1      	bne.n	800c0b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c0d4:	4b12      	ldr	r3, [pc, #72]	@ (800c120 <xTaskResumeAll+0x134>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0da:	4b10      	ldr	r3, [pc, #64]	@ (800c11c <xTaskResumeAll+0x130>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d009      	beq.n	800c0f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c124 <xTaskResumeAll+0x138>)
 800c0e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0ec:	601a      	str	r2, [r3, #0]
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0f6:	f001 f901 	bl	800d2fc <vPortExitCritical>

	return xAlreadyYielded;
 800c0fa:	68bb      	ldr	r3, [r7, #8]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	2400129c 	.word	0x2400129c
 800c108:	24001274 	.word	0x24001274
 800c10c:	24001234 	.word	0x24001234
 800c110:	2400127c 	.word	0x2400127c
 800c114:	24000da4 	.word	0x24000da4
 800c118:	24000da0 	.word	0x24000da0
 800c11c:	24001288 	.word	0x24001288
 800c120:	24001284 	.word	0x24001284
 800c124:	e000ed04 	.word	0xe000ed04

0800c128 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c12e:	4b05      	ldr	r3, [pc, #20]	@ (800c144 <xTaskGetTickCount+0x1c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c134:	687b      	ldr	r3, [r7, #4]
}
 800c136:	4618      	mov	r0, r3
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	24001278 	.word	0x24001278

0800c148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c14e:	2300      	movs	r3, #0
 800c150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c152:	4b4f      	ldr	r3, [pc, #316]	@ (800c290 <xTaskIncrementTick+0x148>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	f040 8090 	bne.w	800c27c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c15c:	4b4d      	ldr	r3, [pc, #308]	@ (800c294 <xTaskIncrementTick+0x14c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	3301      	adds	r3, #1
 800c162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c164:	4a4b      	ldr	r2, [pc, #300]	@ (800c294 <xTaskIncrementTick+0x14c>)
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d121      	bne.n	800c1b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c170:	4b49      	ldr	r3, [pc, #292]	@ (800c298 <xTaskIncrementTick+0x150>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00b      	beq.n	800c192 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	603b      	str	r3, [r7, #0]
}
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
 800c190:	e7fd      	b.n	800c18e <xTaskIncrementTick+0x46>
 800c192:	4b41      	ldr	r3, [pc, #260]	@ (800c298 <xTaskIncrementTick+0x150>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	4b40      	ldr	r3, [pc, #256]	@ (800c29c <xTaskIncrementTick+0x154>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a3e      	ldr	r2, [pc, #248]	@ (800c298 <xTaskIncrementTick+0x150>)
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	4a3e      	ldr	r2, [pc, #248]	@ (800c29c <xTaskIncrementTick+0x154>)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6013      	str	r3, [r2, #0]
 800c1a6:	4b3e      	ldr	r3, [pc, #248]	@ (800c2a0 <xTaskIncrementTick+0x158>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	4a3c      	ldr	r2, [pc, #240]	@ (800c2a0 <xTaskIncrementTick+0x158>)
 800c1ae:	6013      	str	r3, [r2, #0]
 800c1b0:	f000 fae2 	bl	800c778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1b4:	4b3b      	ldr	r3, [pc, #236]	@ (800c2a4 <xTaskIncrementTick+0x15c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d349      	bcc.n	800c252 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1be:	4b36      	ldr	r3, [pc, #216]	@ (800c298 <xTaskIncrementTick+0x150>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d104      	bne.n	800c1d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1c8:	4b36      	ldr	r3, [pc, #216]	@ (800c2a4 <xTaskIncrementTick+0x15c>)
 800c1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ce:	601a      	str	r2, [r3, #0]
					break;
 800c1d0:	e03f      	b.n	800c252 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1d2:	4b31      	ldr	r3, [pc, #196]	@ (800c298 <xTaskIncrementTick+0x150>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d203      	bcs.n	800c1f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c1ea:	4a2e      	ldr	r2, [pc, #184]	@ (800c2a4 <xTaskIncrementTick+0x15c>)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c1f0:	e02f      	b.n	800c252 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fe20 	bl	800ae3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c200:	2b00      	cmp	r3, #0
 800c202:	d004      	beq.n	800c20e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	3318      	adds	r3, #24
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe fe17 	bl	800ae3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c212:	4b25      	ldr	r3, [pc, #148]	@ (800c2a8 <xTaskIncrementTick+0x160>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	429a      	cmp	r2, r3
 800c218:	d903      	bls.n	800c222 <xTaskIncrementTick+0xda>
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21e:	4a22      	ldr	r2, [pc, #136]	@ (800c2a8 <xTaskIncrementTick+0x160>)
 800c220:	6013      	str	r3, [r2, #0]
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c226:	4613      	mov	r3, r2
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	4413      	add	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4a1f      	ldr	r2, [pc, #124]	@ (800c2ac <xTaskIncrementTick+0x164>)
 800c230:	441a      	add	r2, r3
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	3304      	adds	r3, #4
 800c236:	4619      	mov	r1, r3
 800c238:	4610      	mov	r0, r2
 800c23a:	f7fe fda2 	bl	800ad82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c242:	4b1b      	ldr	r3, [pc, #108]	@ (800c2b0 <xTaskIncrementTick+0x168>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c248:	429a      	cmp	r2, r3
 800c24a:	d3b8      	bcc.n	800c1be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c24c:	2301      	movs	r3, #1
 800c24e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c250:	e7b5      	b.n	800c1be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c252:	4b17      	ldr	r3, [pc, #92]	@ (800c2b0 <xTaskIncrementTick+0x168>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c258:	4914      	ldr	r1, [pc, #80]	@ (800c2ac <xTaskIncrementTick+0x164>)
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	440b      	add	r3, r1
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d901      	bls.n	800c26e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c26a:	2301      	movs	r3, #1
 800c26c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c26e:	4b11      	ldr	r3, [pc, #68]	@ (800c2b4 <xTaskIncrementTick+0x16c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d007      	beq.n	800c286 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c276:	2301      	movs	r3, #1
 800c278:	617b      	str	r3, [r7, #20]
 800c27a:	e004      	b.n	800c286 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c27c:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b8 <xTaskIncrementTick+0x170>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3301      	adds	r3, #1
 800c282:	4a0d      	ldr	r2, [pc, #52]	@ (800c2b8 <xTaskIncrementTick+0x170>)
 800c284:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c286:	697b      	ldr	r3, [r7, #20]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3718      	adds	r7, #24
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	2400129c 	.word	0x2400129c
 800c294:	24001278 	.word	0x24001278
 800c298:	2400122c 	.word	0x2400122c
 800c29c:	24001230 	.word	0x24001230
 800c2a0:	2400128c 	.word	0x2400128c
 800c2a4:	24001294 	.word	0x24001294
 800c2a8:	2400127c 	.word	0x2400127c
 800c2ac:	24000da4 	.word	0x24000da4
 800c2b0:	24000da0 	.word	0x24000da0
 800c2b4:	24001288 	.word	0x24001288
 800c2b8:	24001284 	.word	0x24001284

0800c2bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2c2:	4b2b      	ldr	r3, [pc, #172]	@ (800c370 <vTaskSwitchContext+0xb4>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d003      	beq.n	800c2d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2ca:	4b2a      	ldr	r3, [pc, #168]	@ (800c374 <vTaskSwitchContext+0xb8>)
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2d0:	e047      	b.n	800c362 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c2d2:	4b28      	ldr	r3, [pc, #160]	@ (800c374 <vTaskSwitchContext+0xb8>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d8:	4b27      	ldr	r3, [pc, #156]	@ (800c378 <vTaskSwitchContext+0xbc>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	60fb      	str	r3, [r7, #12]
 800c2de:	e011      	b.n	800c304 <vTaskSwitchContext+0x48>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10b      	bne.n	800c2fe <vTaskSwitchContext+0x42>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	607b      	str	r3, [r7, #4]
}
 800c2f8:	bf00      	nop
 800c2fa:	bf00      	nop
 800c2fc:	e7fd      	b.n	800c2fa <vTaskSwitchContext+0x3e>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3b01      	subs	r3, #1
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	491d      	ldr	r1, [pc, #116]	@ (800c37c <vTaskSwitchContext+0xc0>)
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	4613      	mov	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	440b      	add	r3, r1
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d0e3      	beq.n	800c2e0 <vTaskSwitchContext+0x24>
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	4613      	mov	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	4413      	add	r3, r2
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4a16      	ldr	r2, [pc, #88]	@ (800c37c <vTaskSwitchContext+0xc0>)
 800c324:	4413      	add	r3, r2
 800c326:	60bb      	str	r3, [r7, #8]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	605a      	str	r2, [r3, #4]
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	3308      	adds	r3, #8
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d104      	bne.n	800c348 <vTaskSwitchContext+0x8c>
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	605a      	str	r2, [r3, #4]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	4a0c      	ldr	r2, [pc, #48]	@ (800c380 <vTaskSwitchContext+0xc4>)
 800c350:	6013      	str	r3, [r2, #0]
 800c352:	4a09      	ldr	r2, [pc, #36]	@ (800c378 <vTaskSwitchContext+0xbc>)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c358:	4b09      	ldr	r3, [pc, #36]	@ (800c380 <vTaskSwitchContext+0xc4>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3364      	adds	r3, #100	@ 0x64
 800c35e:	4a09      	ldr	r2, [pc, #36]	@ (800c384 <vTaskSwitchContext+0xc8>)
 800c360:	6013      	str	r3, [r2, #0]
}
 800c362:	bf00      	nop
 800c364:	3714      	adds	r7, #20
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	2400129c 	.word	0x2400129c
 800c374:	24001288 	.word	0x24001288
 800c378:	2400127c 	.word	0x2400127c
 800c37c:	24000da4 	.word	0x24000da4
 800c380:	24000da0 	.word	0x24000da0
 800c384:	24000014 	.word	0x24000014

0800c388 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10b      	bne.n	800c3b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	60fb      	str	r3, [r7, #12]
}
 800c3aa:	bf00      	nop
 800c3ac:	bf00      	nop
 800c3ae:	e7fd      	b.n	800c3ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3b0:	4b07      	ldr	r3, [pc, #28]	@ (800c3d0 <vTaskPlaceOnEventList+0x48>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3318      	adds	r3, #24
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7fe fd06 	bl	800adca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3be:	2101      	movs	r1, #1
 800c3c0:	6838      	ldr	r0, [r7, #0]
 800c3c2:	f000 fa87 	bl	800c8d4 <prvAddCurrentTaskToDelayedList>
}
 800c3c6:	bf00      	nop
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	24000da0 	.word	0x24000da0

0800c3d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b086      	sub	sp, #24
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10b      	bne.n	800c3fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	617b      	str	r3, [r7, #20]
}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	e7fd      	b.n	800c3fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800c428 <vTaskPlaceOnEventListRestricted+0x54>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3318      	adds	r3, #24
 800c404:	4619      	mov	r1, r3
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f7fe fcbb 	bl	800ad82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c412:	f04f 33ff 	mov.w	r3, #4294967295
 800c416:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c418:	6879      	ldr	r1, [r7, #4]
 800c41a:	68b8      	ldr	r0, [r7, #8]
 800c41c:	f000 fa5a 	bl	800c8d4 <prvAddCurrentTaskToDelayedList>
	}
 800c420:	bf00      	nop
 800c422:	3718      	adds	r7, #24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	24000da0 	.word	0x24000da0

0800c42c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d10b      	bne.n	800c45a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	60fb      	str	r3, [r7, #12]
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	e7fd      	b.n	800c456 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	3318      	adds	r3, #24
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fe fcec 	bl	800ae3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c464:	4b1d      	ldr	r3, [pc, #116]	@ (800c4dc <xTaskRemoveFromEventList+0xb0>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d11d      	bne.n	800c4a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	3304      	adds	r3, #4
 800c470:	4618      	mov	r0, r3
 800c472:	f7fe fce3 	bl	800ae3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c47a:	4b19      	ldr	r3, [pc, #100]	@ (800c4e0 <xTaskRemoveFromEventList+0xb4>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d903      	bls.n	800c48a <xTaskRemoveFromEventList+0x5e>
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c486:	4a16      	ldr	r2, [pc, #88]	@ (800c4e0 <xTaskRemoveFromEventList+0xb4>)
 800c488:	6013      	str	r3, [r2, #0]
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c48e:	4613      	mov	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4a13      	ldr	r2, [pc, #76]	@ (800c4e4 <xTaskRemoveFromEventList+0xb8>)
 800c498:	441a      	add	r2, r3
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	3304      	adds	r3, #4
 800c49e:	4619      	mov	r1, r3
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	f7fe fc6e 	bl	800ad82 <vListInsertEnd>
 800c4a6:	e005      	b.n	800c4b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	3318      	adds	r3, #24
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	480e      	ldr	r0, [pc, #56]	@ (800c4e8 <xTaskRemoveFromEventList+0xbc>)
 800c4b0:	f7fe fc67 	bl	800ad82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c4ec <xTaskRemoveFromEventList+0xc0>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d905      	bls.n	800c4ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <xTaskRemoveFromEventList+0xc4>)
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	e001      	b.n	800c4d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4d2:	697b      	ldr	r3, [r7, #20]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3718      	adds	r7, #24
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	2400129c 	.word	0x2400129c
 800c4e0:	2400127c 	.word	0x2400127c
 800c4e4:	24000da4 	.word	0x24000da4
 800c4e8:	24001234 	.word	0x24001234
 800c4ec:	24000da0 	.word	0x24000da0
 800c4f0:	24001288 	.word	0x24001288

0800c4f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c4fc:	4b06      	ldr	r3, [pc, #24]	@ (800c518 <vTaskInternalSetTimeOutState+0x24>)
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c504:	4b05      	ldr	r3, [pc, #20]	@ (800c51c <vTaskInternalSetTimeOutState+0x28>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	605a      	str	r2, [r3, #4]
}
 800c50c:	bf00      	nop
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr
 800c518:	2400128c 	.word	0x2400128c
 800c51c:	24001278 	.word	0x24001278

0800c520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b088      	sub	sp, #32
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10b      	bne.n	800c548 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	613b      	str	r3, [r7, #16]
}
 800c542:	bf00      	nop
 800c544:	bf00      	nop
 800c546:	e7fd      	b.n	800c544 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10b      	bne.n	800c566 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	60fb      	str	r3, [r7, #12]
}
 800c560:	bf00      	nop
 800c562:	bf00      	nop
 800c564:	e7fd      	b.n	800c562 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c566:	f000 fe97 	bl	800d298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c56a:	4b1d      	ldr	r3, [pc, #116]	@ (800c5e0 <xTaskCheckForTimeOut+0xc0>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	69ba      	ldr	r2, [r7, #24]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c582:	d102      	bne.n	800c58a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c584:	2300      	movs	r3, #0
 800c586:	61fb      	str	r3, [r7, #28]
 800c588:	e023      	b.n	800c5d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	4b15      	ldr	r3, [pc, #84]	@ (800c5e4 <xTaskCheckForTimeOut+0xc4>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	429a      	cmp	r2, r3
 800c594:	d007      	beq.n	800c5a6 <xTaskCheckForTimeOut+0x86>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	69ba      	ldr	r2, [r7, #24]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d302      	bcc.n	800c5a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	61fb      	str	r3, [r7, #28]
 800c5a4:	e015      	b.n	800c5d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	697a      	ldr	r2, [r7, #20]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d20b      	bcs.n	800c5c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	1ad2      	subs	r2, r2, r3
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7ff ff99 	bl	800c4f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	61fb      	str	r3, [r7, #28]
 800c5c6:	e004      	b.n	800c5d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c5d2:	f000 fe93 	bl	800d2fc <vPortExitCritical>

	return xReturn;
 800c5d6:	69fb      	ldr	r3, [r7, #28]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3720      	adds	r7, #32
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	24001278 	.word	0x24001278
 800c5e4:	2400128c 	.word	0x2400128c

0800c5e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5ec:	4b03      	ldr	r3, [pc, #12]	@ (800c5fc <vTaskMissedYield+0x14>)
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	601a      	str	r2, [r3, #0]
}
 800c5f2:	bf00      	nop
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	24001288 	.word	0x24001288

0800c600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c608:	f000 f852 	bl	800c6b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c60c:	4b06      	ldr	r3, [pc, #24]	@ (800c628 <prvIdleTask+0x28>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d9f9      	bls.n	800c608 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c614:	4b05      	ldr	r3, [pc, #20]	@ (800c62c <prvIdleTask+0x2c>)
 800c616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c624:	e7f0      	b.n	800c608 <prvIdleTask+0x8>
 800c626:	bf00      	nop
 800c628:	24000da4 	.word	0x24000da4
 800c62c:	e000ed04 	.word	0xe000ed04

0800c630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c636:	2300      	movs	r3, #0
 800c638:	607b      	str	r3, [r7, #4]
 800c63a:	e00c      	b.n	800c656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	4613      	mov	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4a12      	ldr	r2, [pc, #72]	@ (800c690 <prvInitialiseTaskLists+0x60>)
 800c648:	4413      	add	r3, r2
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fe fb6c 	bl	800ad28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	3301      	adds	r3, #1
 800c654:	607b      	str	r3, [r7, #4]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b37      	cmp	r3, #55	@ 0x37
 800c65a:	d9ef      	bls.n	800c63c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c65c:	480d      	ldr	r0, [pc, #52]	@ (800c694 <prvInitialiseTaskLists+0x64>)
 800c65e:	f7fe fb63 	bl	800ad28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c662:	480d      	ldr	r0, [pc, #52]	@ (800c698 <prvInitialiseTaskLists+0x68>)
 800c664:	f7fe fb60 	bl	800ad28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c668:	480c      	ldr	r0, [pc, #48]	@ (800c69c <prvInitialiseTaskLists+0x6c>)
 800c66a:	f7fe fb5d 	bl	800ad28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c66e:	480c      	ldr	r0, [pc, #48]	@ (800c6a0 <prvInitialiseTaskLists+0x70>)
 800c670:	f7fe fb5a 	bl	800ad28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c674:	480b      	ldr	r0, [pc, #44]	@ (800c6a4 <prvInitialiseTaskLists+0x74>)
 800c676:	f7fe fb57 	bl	800ad28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c67a:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a8 <prvInitialiseTaskLists+0x78>)
 800c67c:	4a05      	ldr	r2, [pc, #20]	@ (800c694 <prvInitialiseTaskLists+0x64>)
 800c67e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c680:	4b0a      	ldr	r3, [pc, #40]	@ (800c6ac <prvInitialiseTaskLists+0x7c>)
 800c682:	4a05      	ldr	r2, [pc, #20]	@ (800c698 <prvInitialiseTaskLists+0x68>)
 800c684:	601a      	str	r2, [r3, #0]
}
 800c686:	bf00      	nop
 800c688:	3708      	adds	r7, #8
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	24000da4 	.word	0x24000da4
 800c694:	24001204 	.word	0x24001204
 800c698:	24001218 	.word	0x24001218
 800c69c:	24001234 	.word	0x24001234
 800c6a0:	24001248 	.word	0x24001248
 800c6a4:	24001260 	.word	0x24001260
 800c6a8:	2400122c 	.word	0x2400122c
 800c6ac:	24001230 	.word	0x24001230

0800c6b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6b6:	e019      	b.n	800c6ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6b8:	f000 fdee 	bl	800d298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6bc:	4b10      	ldr	r3, [pc, #64]	@ (800c700 <prvCheckTasksWaitingTermination+0x50>)
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	3304      	adds	r3, #4
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fe fbb7 	bl	800ae3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c704 <prvCheckTasksWaitingTermination+0x54>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	4a0b      	ldr	r2, [pc, #44]	@ (800c704 <prvCheckTasksWaitingTermination+0x54>)
 800c6d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c708 <prvCheckTasksWaitingTermination+0x58>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	4a0a      	ldr	r2, [pc, #40]	@ (800c708 <prvCheckTasksWaitingTermination+0x58>)
 800c6e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6e2:	f000 fe0b 	bl	800d2fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f810 	bl	800c70c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6ec:	4b06      	ldr	r3, [pc, #24]	@ (800c708 <prvCheckTasksWaitingTermination+0x58>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1e1      	bne.n	800c6b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	24001248 	.word	0x24001248
 800c704:	24001274 	.word	0x24001274
 800c708:	2400125c 	.word	0x2400125c

0800c70c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	3364      	adds	r3, #100	@ 0x64
 800c718:	4618      	mov	r0, r3
 800c71a:	f001 f8d5 	bl	800d8c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800c724:	2b00      	cmp	r3, #0
 800c726:	d108      	bne.n	800c73a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 ffa3 	bl	800d678 <vPortFree>
				vPortFree( pxTCB );
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 ffa0 	bl	800d678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c738:	e019      	b.n	800c76e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800c740:	2b01      	cmp	r3, #1
 800c742:	d103      	bne.n	800c74c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 ff97 	bl	800d678 <vPortFree>
	}
 800c74a:	e010      	b.n	800c76e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800c752:	2b02      	cmp	r3, #2
 800c754:	d00b      	beq.n	800c76e <prvDeleteTCB+0x62>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	60fb      	str	r3, [r7, #12]
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	e7fd      	b.n	800c76a <prvDeleteTCB+0x5e>
	}
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
	...

0800c778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c77e:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b0 <prvResetNextTaskUnblockTime+0x38>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d104      	bne.n	800c792 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c788:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b4 <prvResetNextTaskUnblockTime+0x3c>)
 800c78a:	f04f 32ff 	mov.w	r2, #4294967295
 800c78e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c790:	e008      	b.n	800c7a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c792:	4b07      	ldr	r3, [pc, #28]	@ (800c7b0 <prvResetNextTaskUnblockTime+0x38>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	4a04      	ldr	r2, [pc, #16]	@ (800c7b4 <prvResetNextTaskUnblockTime+0x3c>)
 800c7a2:	6013      	str	r3, [r2, #0]
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	2400122c 	.word	0x2400122c
 800c7b4:	24001294 	.word	0x24001294

0800c7b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7be:	4b0b      	ldr	r3, [pc, #44]	@ (800c7ec <xTaskGetSchedulerState+0x34>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d102      	bne.n	800c7cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	607b      	str	r3, [r7, #4]
 800c7ca:	e008      	b.n	800c7de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7cc:	4b08      	ldr	r3, [pc, #32]	@ (800c7f0 <xTaskGetSchedulerState+0x38>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d102      	bne.n	800c7da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7d4:	2302      	movs	r3, #2
 800c7d6:	607b      	str	r3, [r7, #4]
 800c7d8:	e001      	b.n	800c7de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7de:	687b      	ldr	r3, [r7, #4]
	}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	24001280 	.word	0x24001280
 800c7f0:	2400129c 	.word	0x2400129c

0800c7f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c800:	2300      	movs	r3, #0
 800c802:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d058      	beq.n	800c8bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c80a:	4b2f      	ldr	r3, [pc, #188]	@ (800c8c8 <xTaskPriorityDisinherit+0xd4>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	693a      	ldr	r2, [r7, #16]
 800c810:	429a      	cmp	r2, r3
 800c812:	d00b      	beq.n	800c82c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	60fb      	str	r3, [r7, #12]
}
 800c826:	bf00      	nop
 800c828:	bf00      	nop
 800c82a:	e7fd      	b.n	800c828 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10b      	bne.n	800c84c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	60bb      	str	r3, [r7, #8]
}
 800c846:	bf00      	nop
 800c848:	bf00      	nop
 800c84a:	e7fd      	b.n	800c848 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c850:	1e5a      	subs	r2, r3, #1
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c85e:	429a      	cmp	r2, r3
 800c860:	d02c      	beq.n	800c8bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c866:	2b00      	cmp	r3, #0
 800c868:	d128      	bne.n	800c8bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	3304      	adds	r3, #4
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fe fae4 	bl	800ae3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c880:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c88c:	4b0f      	ldr	r3, [pc, #60]	@ (800c8cc <xTaskPriorityDisinherit+0xd8>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	429a      	cmp	r2, r3
 800c892:	d903      	bls.n	800c89c <xTaskPriorityDisinherit+0xa8>
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c898:	4a0c      	ldr	r2, [pc, #48]	@ (800c8cc <xTaskPriorityDisinherit+0xd8>)
 800c89a:	6013      	str	r3, [r2, #0]
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4413      	add	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4a09      	ldr	r2, [pc, #36]	@ (800c8d0 <xTaskPriorityDisinherit+0xdc>)
 800c8aa:	441a      	add	r2, r3
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	3304      	adds	r3, #4
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	f7fe fa65 	bl	800ad82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8bc:	697b      	ldr	r3, [r7, #20]
	}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	24000da0 	.word	0x24000da0
 800c8cc:	2400127c 	.word	0x2400127c
 800c8d0:	24000da4 	.word	0x24000da4

0800c8d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c8de:	4b21      	ldr	r3, [pc, #132]	@ (800c964 <prvAddCurrentTaskToDelayedList+0x90>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8e4:	4b20      	ldr	r3, [pc, #128]	@ (800c968 <prvAddCurrentTaskToDelayedList+0x94>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fe faa6 	bl	800ae3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f6:	d10a      	bne.n	800c90e <prvAddCurrentTaskToDelayedList+0x3a>
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d007      	beq.n	800c90e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c968 <prvAddCurrentTaskToDelayedList+0x94>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3304      	adds	r3, #4
 800c904:	4619      	mov	r1, r3
 800c906:	4819      	ldr	r0, [pc, #100]	@ (800c96c <prvAddCurrentTaskToDelayedList+0x98>)
 800c908:	f7fe fa3b 	bl	800ad82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c90c:	e026      	b.n	800c95c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c90e:	68fa      	ldr	r2, [r7, #12]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4413      	add	r3, r2
 800c914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c916:	4b14      	ldr	r3, [pc, #80]	@ (800c968 <prvAddCurrentTaskToDelayedList+0x94>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	429a      	cmp	r2, r3
 800c924:	d209      	bcs.n	800c93a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c926:	4b12      	ldr	r3, [pc, #72]	@ (800c970 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	4b0f      	ldr	r3, [pc, #60]	@ (800c968 <prvAddCurrentTaskToDelayedList+0x94>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	3304      	adds	r3, #4
 800c930:	4619      	mov	r1, r3
 800c932:	4610      	mov	r0, r2
 800c934:	f7fe fa49 	bl	800adca <vListInsert>
}
 800c938:	e010      	b.n	800c95c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c93a:	4b0e      	ldr	r3, [pc, #56]	@ (800c974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	4b0a      	ldr	r3, [pc, #40]	@ (800c968 <prvAddCurrentTaskToDelayedList+0x94>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	3304      	adds	r3, #4
 800c944:	4619      	mov	r1, r3
 800c946:	4610      	mov	r0, r2
 800c948:	f7fe fa3f 	bl	800adca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c94c:	4b0a      	ldr	r3, [pc, #40]	@ (800c978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	68ba      	ldr	r2, [r7, #8]
 800c952:	429a      	cmp	r2, r3
 800c954:	d202      	bcs.n	800c95c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c956:	4a08      	ldr	r2, [pc, #32]	@ (800c978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	6013      	str	r3, [r2, #0]
}
 800c95c:	bf00      	nop
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	24001278 	.word	0x24001278
 800c968:	24000da0 	.word	0x24000da0
 800c96c:	24001260 	.word	0x24001260
 800c970:	24001230 	.word	0x24001230
 800c974:	2400122c 	.word	0x2400122c
 800c978:	24001294 	.word	0x24001294

0800c97c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08a      	sub	sp, #40	@ 0x28
 800c980:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c982:	2300      	movs	r3, #0
 800c984:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c986:	f000 fb13 	bl	800cfb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c98a:	4b1d      	ldr	r3, [pc, #116]	@ (800ca00 <xTimerCreateTimerTask+0x84>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d021      	beq.n	800c9d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c996:	2300      	movs	r3, #0
 800c998:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c99a:	1d3a      	adds	r2, r7, #4
 800c99c:	f107 0108 	add.w	r1, r7, #8
 800c9a0:	f107 030c 	add.w	r3, r7, #12
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7fe f9a5 	bl	800acf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9aa:	6879      	ldr	r1, [r7, #4]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	9202      	str	r2, [sp, #8]
 800c9b2:	9301      	str	r3, [sp, #4]
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	460a      	mov	r2, r1
 800c9bc:	4911      	ldr	r1, [pc, #68]	@ (800ca04 <xTimerCreateTimerTask+0x88>)
 800c9be:	4812      	ldr	r0, [pc, #72]	@ (800ca08 <xTimerCreateTimerTask+0x8c>)
 800c9c0:	f7ff f8a2 	bl	800bb08 <xTaskCreateStatic>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	4a11      	ldr	r2, [pc, #68]	@ (800ca0c <xTimerCreateTimerTask+0x90>)
 800c9c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9ca:	4b10      	ldr	r3, [pc, #64]	@ (800ca0c <xTimerCreateTimerTask+0x90>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d001      	beq.n	800c9d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10b      	bne.n	800c9f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	613b      	str	r3, [r7, #16]
}
 800c9ee:	bf00      	nop
 800c9f0:	bf00      	nop
 800c9f2:	e7fd      	b.n	800c9f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c9f4:	697b      	ldr	r3, [r7, #20]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	240012d0 	.word	0x240012d0
 800ca04:	0800dae0 	.word	0x0800dae0
 800ca08:	0800cb49 	.word	0x0800cb49
 800ca0c:	240012d4 	.word	0x240012d4

0800ca10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08a      	sub	sp, #40	@ 0x28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
 800ca1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10b      	bne.n	800ca40 <xTimerGenericCommand+0x30>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	623b      	str	r3, [r7, #32]
}
 800ca3a:	bf00      	nop
 800ca3c:	bf00      	nop
 800ca3e:	e7fd      	b.n	800ca3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca40:	4b19      	ldr	r3, [pc, #100]	@ (800caa8 <xTimerGenericCommand+0x98>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d02a      	beq.n	800ca9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	2b05      	cmp	r3, #5
 800ca58:	dc18      	bgt.n	800ca8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca5a:	f7ff fead 	bl	800c7b8 <xTaskGetSchedulerState>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d109      	bne.n	800ca78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca64:	4b10      	ldr	r3, [pc, #64]	@ (800caa8 <xTimerGenericCommand+0x98>)
 800ca66:	6818      	ldr	r0, [r3, #0]
 800ca68:	f107 0110 	add.w	r1, r7, #16
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca70:	f7fe fb56 	bl	800b120 <xQueueGenericSend>
 800ca74:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca76:	e012      	b.n	800ca9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca78:	4b0b      	ldr	r3, [pc, #44]	@ (800caa8 <xTimerGenericCommand+0x98>)
 800ca7a:	6818      	ldr	r0, [r3, #0]
 800ca7c:	f107 0110 	add.w	r1, r7, #16
 800ca80:	2300      	movs	r3, #0
 800ca82:	2200      	movs	r2, #0
 800ca84:	f7fe fb4c 	bl	800b120 <xQueueGenericSend>
 800ca88:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca8a:	e008      	b.n	800ca9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca8c:	4b06      	ldr	r3, [pc, #24]	@ (800caa8 <xTimerGenericCommand+0x98>)
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	f107 0110 	add.w	r1, r7, #16
 800ca94:	2300      	movs	r3, #0
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	f7fe fc60 	bl	800b35c <xQueueGenericSendFromISR>
 800ca9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3728      	adds	r7, #40	@ 0x28
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	240012d0 	.word	0x240012d0

0800caac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b088      	sub	sp, #32
 800cab0:	af02      	add	r7, sp, #8
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cab6:	4b23      	ldr	r3, [pc, #140]	@ (800cb44 <prvProcessExpiredTimer+0x98>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	3304      	adds	r3, #4
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fe f9b9 	bl	800ae3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cad0:	f003 0304 	and.w	r3, r3, #4
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d023      	beq.n	800cb20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	699a      	ldr	r2, [r3, #24]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	18d1      	adds	r1, r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	6978      	ldr	r0, [r7, #20]
 800cae6:	f000 f8d5 	bl	800cc94 <prvInsertTimerInActiveList>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d020      	beq.n	800cb32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800caf0:	2300      	movs	r3, #0
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	2300      	movs	r3, #0
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	2100      	movs	r1, #0
 800cafa:	6978      	ldr	r0, [r7, #20]
 800cafc:	f7ff ff88 	bl	800ca10 <xTimerGenericCommand>
 800cb00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d114      	bne.n	800cb32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	60fb      	str	r3, [r7, #12]
}
 800cb1a:	bf00      	nop
 800cb1c:	bf00      	nop
 800cb1e:	e7fd      	b.n	800cb1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb26:	f023 0301 	bic.w	r3, r3, #1
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	6a1b      	ldr	r3, [r3, #32]
 800cb36:	6978      	ldr	r0, [r7, #20]
 800cb38:	4798      	blx	r3
}
 800cb3a:	bf00      	nop
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	240012c8 	.word	0x240012c8

0800cb48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb50:	f107 0308 	add.w	r3, r7, #8
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 f859 	bl	800cc0c <prvGetNextExpireTime>
 800cb5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	4619      	mov	r1, r3
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f000 f805 	bl	800cb70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb66:	f000 f8d7 	bl	800cd18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb6a:	bf00      	nop
 800cb6c:	e7f0      	b.n	800cb50 <prvTimerTask+0x8>
	...

0800cb70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb7a:	f7ff fa29 	bl	800bfd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb7e:	f107 0308 	add.w	r3, r7, #8
 800cb82:	4618      	mov	r0, r3
 800cb84:	f000 f866 	bl	800cc54 <prvSampleTimeNow>
 800cb88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d130      	bne.n	800cbf2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10a      	bne.n	800cbac <prvProcessTimerOrBlockTask+0x3c>
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d806      	bhi.n	800cbac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cb9e:	f7ff fa25 	bl	800bfec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cba2:	68f9      	ldr	r1, [r7, #12]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff ff81 	bl	800caac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbaa:	e024      	b.n	800cbf6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d008      	beq.n	800cbc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbb2:	4b13      	ldr	r3, [pc, #76]	@ (800cc00 <prvProcessTimerOrBlockTask+0x90>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <prvProcessTimerOrBlockTask+0x50>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e000      	b.n	800cbc2 <prvProcessTimerOrBlockTask+0x52>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbc4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc04 <prvProcessTimerOrBlockTask+0x94>)
 800cbc6:	6818      	ldr	r0, [r3, #0]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	683a      	ldr	r2, [r7, #0]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f7fe fec7 	bl	800b964 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbd6:	f7ff fa09 	bl	800bfec <xTaskResumeAll>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10a      	bne.n	800cbf6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cbe0:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <prvProcessTimerOrBlockTask+0x98>)
 800cbe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbe6:	601a      	str	r2, [r3, #0]
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	f3bf 8f6f 	isb	sy
}
 800cbf0:	e001      	b.n	800cbf6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cbf2:	f7ff f9fb 	bl	800bfec <xTaskResumeAll>
}
 800cbf6:	bf00      	nop
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	240012cc 	.word	0x240012cc
 800cc04:	240012d0 	.word	0x240012d0
 800cc08:	e000ed04 	.word	0xe000ed04

0800cc0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc14:	4b0e      	ldr	r3, [pc, #56]	@ (800cc50 <prvGetNextExpireTime+0x44>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d101      	bne.n	800cc22 <prvGetNextExpireTime+0x16>
 800cc1e:	2201      	movs	r2, #1
 800cc20:	e000      	b.n	800cc24 <prvGetNextExpireTime+0x18>
 800cc22:	2200      	movs	r2, #0
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d105      	bne.n	800cc3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc30:	4b07      	ldr	r3, [pc, #28]	@ (800cc50 <prvGetNextExpireTime+0x44>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	60fb      	str	r3, [r7, #12]
 800cc3a:	e001      	b.n	800cc40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc40:	68fb      	ldr	r3, [r7, #12]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	240012c8 	.word	0x240012c8

0800cc54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc5c:	f7ff fa64 	bl	800c128 <xTaskGetTickCount>
 800cc60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc62:	4b0b      	ldr	r3, [pc, #44]	@ (800cc90 <prvSampleTimeNow+0x3c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d205      	bcs.n	800cc78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc6c:	f000 f93a 	bl	800cee4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2201      	movs	r2, #1
 800cc74:	601a      	str	r2, [r3, #0]
 800cc76:	e002      	b.n	800cc7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc7e:	4a04      	ldr	r2, [pc, #16]	@ (800cc90 <prvSampleTimeNow+0x3c>)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc84:	68fb      	ldr	r3, [r7, #12]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	240012d8 	.word	0x240012d8

0800cc94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cca2:	2300      	movs	r3, #0
 800cca4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d812      	bhi.n	800cce0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	1ad2      	subs	r2, r2, r3
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	699b      	ldr	r3, [r3, #24]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d302      	bcc.n	800ccce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	617b      	str	r3, [r7, #20]
 800cccc:	e01b      	b.n	800cd06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ccce:	4b10      	ldr	r3, [pc, #64]	@ (800cd10 <prvInsertTimerInActiveList+0x7c>)
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	4610      	mov	r0, r2
 800ccda:	f7fe f876 	bl	800adca <vListInsert>
 800ccde:	e012      	b.n	800cd06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d206      	bcs.n	800ccf6 <prvInsertTimerInActiveList+0x62>
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d302      	bcc.n	800ccf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	617b      	str	r3, [r7, #20]
 800ccf4:	e007      	b.n	800cd06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccf6:	4b07      	ldr	r3, [pc, #28]	@ (800cd14 <prvInsertTimerInActiveList+0x80>)
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	4619      	mov	r1, r3
 800cd00:	4610      	mov	r0, r2
 800cd02:	f7fe f862 	bl	800adca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd06:	697b      	ldr	r3, [r7, #20]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	240012cc 	.word	0x240012cc
 800cd14:	240012c8 	.word	0x240012c8

0800cd18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08e      	sub	sp, #56	@ 0x38
 800cd1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd1e:	e0ce      	b.n	800cebe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	da19      	bge.n	800cd5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd26:	1d3b      	adds	r3, r7, #4
 800cd28:	3304      	adds	r3, #4
 800cd2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10b      	bne.n	800cd4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	61fb      	str	r3, [r7, #28]
}
 800cd44:	bf00      	nop
 800cd46:	bf00      	nop
 800cd48:	e7fd      	b.n	800cd46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd50:	6850      	ldr	r0, [r2, #4]
 800cd52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd54:	6892      	ldr	r2, [r2, #8]
 800cd56:	4611      	mov	r1, r2
 800cd58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f2c0 80ae 	blt.w	800cebe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd68:	695b      	ldr	r3, [r3, #20]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d004      	beq.n	800cd78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd70:	3304      	adds	r3, #4
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fe f862 	bl	800ae3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd78:	463b      	mov	r3, r7
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff ff6a 	bl	800cc54 <prvSampleTimeNow>
 800cd80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b09      	cmp	r3, #9
 800cd86:	f200 8097 	bhi.w	800ceb8 <prvProcessReceivedCommands+0x1a0>
 800cd8a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd90 <prvProcessReceivedCommands+0x78>)
 800cd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd90:	0800cdb9 	.word	0x0800cdb9
 800cd94:	0800cdb9 	.word	0x0800cdb9
 800cd98:	0800cdb9 	.word	0x0800cdb9
 800cd9c:	0800ce2f 	.word	0x0800ce2f
 800cda0:	0800ce43 	.word	0x0800ce43
 800cda4:	0800ce8f 	.word	0x0800ce8f
 800cda8:	0800cdb9 	.word	0x0800cdb9
 800cdac:	0800cdb9 	.word	0x0800cdb9
 800cdb0:	0800ce2f 	.word	0x0800ce2f
 800cdb4:	0800ce43 	.word	0x0800ce43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdbe:	f043 0301 	orr.w	r3, r3, #1
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdca:	68ba      	ldr	r2, [r7, #8]
 800cdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdce:	699b      	ldr	r3, [r3, #24]
 800cdd0:	18d1      	adds	r1, r2, r3
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdd8:	f7ff ff5c 	bl	800cc94 <prvInsertTimerInActiveList>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d06c      	beq.n	800cebc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cde4:	6a1b      	ldr	r3, [r3, #32]
 800cde6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cde8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdf0:	f003 0304 	and.w	r3, r3, #4
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d061      	beq.n	800cebc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	441a      	add	r2, r3
 800ce00:	2300      	movs	r3, #0
 800ce02:	9300      	str	r3, [sp, #0]
 800ce04:	2300      	movs	r3, #0
 800ce06:	2100      	movs	r1, #0
 800ce08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce0a:	f7ff fe01 	bl	800ca10 <xTimerGenericCommand>
 800ce0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d152      	bne.n	800cebc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ce16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce1a:	f383 8811 	msr	BASEPRI, r3
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f3bf 8f4f 	dsb	sy
 800ce26:	61bb      	str	r3, [r7, #24]
}
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	e7fd      	b.n	800ce2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce34:	f023 0301 	bic.w	r3, r3, #1
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ce40:	e03d      	b.n	800cebe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce48:	f043 0301 	orr.w	r3, r3, #1
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5c:	699b      	ldr	r3, [r3, #24]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d10b      	bne.n	800ce7a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ce62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce66:	f383 8811 	msr	BASEPRI, r3
 800ce6a:	f3bf 8f6f 	isb	sy
 800ce6e:	f3bf 8f4f 	dsb	sy
 800ce72:	617b      	str	r3, [r7, #20]
}
 800ce74:	bf00      	nop
 800ce76:	bf00      	nop
 800ce78:	e7fd      	b.n	800ce76 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7c:	699a      	ldr	r2, [r3, #24]
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce80:	18d1      	adds	r1, r2, r3
 800ce82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce88:	f7ff ff04 	bl	800cc94 <prvInsertTimerInActiveList>
					break;
 800ce8c:	e017      	b.n	800cebe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce94:	f003 0302 	and.w	r3, r3, #2
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d103      	bne.n	800cea4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ce9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce9e:	f000 fbeb 	bl	800d678 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cea2:	e00c      	b.n	800cebe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ceaa:	f023 0301 	bic.w	r3, r3, #1
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ceb6:	e002      	b.n	800cebe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ceb8:	bf00      	nop
 800ceba:	e000      	b.n	800cebe <prvProcessReceivedCommands+0x1a6>
					break;
 800cebc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cebe:	4b08      	ldr	r3, [pc, #32]	@ (800cee0 <prvProcessReceivedCommands+0x1c8>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	1d39      	adds	r1, r7, #4
 800cec4:	2200      	movs	r2, #0
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe fafe 	bl	800b4c8 <xQueueReceive>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	f47f af26 	bne.w	800cd20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ced4:	bf00      	nop
 800ced6:	bf00      	nop
 800ced8:	3730      	adds	r7, #48	@ 0x30
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	240012d0 	.word	0x240012d0

0800cee4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ceea:	e049      	b.n	800cf80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ceec:	4b2e      	ldr	r3, [pc, #184]	@ (800cfa8 <prvSwitchTimerLists+0xc4>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cef6:	4b2c      	ldr	r3, [pc, #176]	@ (800cfa8 <prvSwitchTimerLists+0xc4>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	3304      	adds	r3, #4
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fd ff99 	bl	800ae3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf18:	f003 0304 	and.w	r3, r3, #4
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d02f      	beq.n	800cf80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	693a      	ldr	r2, [r7, #16]
 800cf26:	4413      	add	r3, r2
 800cf28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d90e      	bls.n	800cf50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	68fa      	ldr	r2, [r7, #12]
 800cf3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf3e:	4b1a      	ldr	r3, [pc, #104]	@ (800cfa8 <prvSwitchTimerLists+0xc4>)
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	3304      	adds	r3, #4
 800cf46:	4619      	mov	r1, r3
 800cf48:	4610      	mov	r0, r2
 800cf4a:	f7fd ff3e 	bl	800adca <vListInsert>
 800cf4e:	e017      	b.n	800cf80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf50:	2300      	movs	r3, #0
 800cf52:	9300      	str	r3, [sp, #0]
 800cf54:	2300      	movs	r3, #0
 800cf56:	693a      	ldr	r2, [r7, #16]
 800cf58:	2100      	movs	r1, #0
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f7ff fd58 	bl	800ca10 <xTimerGenericCommand>
 800cf60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d10b      	bne.n	800cf80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cf68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6c:	f383 8811 	msr	BASEPRI, r3
 800cf70:	f3bf 8f6f 	isb	sy
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	603b      	str	r3, [r7, #0]
}
 800cf7a:	bf00      	nop
 800cf7c:	bf00      	nop
 800cf7e:	e7fd      	b.n	800cf7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf80:	4b09      	ldr	r3, [pc, #36]	@ (800cfa8 <prvSwitchTimerLists+0xc4>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1b0      	bne.n	800ceec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf8a:	4b07      	ldr	r3, [pc, #28]	@ (800cfa8 <prvSwitchTimerLists+0xc4>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf90:	4b06      	ldr	r3, [pc, #24]	@ (800cfac <prvSwitchTimerLists+0xc8>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a04      	ldr	r2, [pc, #16]	@ (800cfa8 <prvSwitchTimerLists+0xc4>)
 800cf96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf98:	4a04      	ldr	r2, [pc, #16]	@ (800cfac <prvSwitchTimerLists+0xc8>)
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	6013      	str	r3, [r2, #0]
}
 800cf9e:	bf00      	nop
 800cfa0:	3718      	adds	r7, #24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	240012c8 	.word	0x240012c8
 800cfac:	240012cc 	.word	0x240012cc

0800cfb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfb6:	f000 f96f 	bl	800d298 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfba:	4b15      	ldr	r3, [pc, #84]	@ (800d010 <prvCheckForValidListAndQueue+0x60>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d120      	bne.n	800d004 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cfc2:	4814      	ldr	r0, [pc, #80]	@ (800d014 <prvCheckForValidListAndQueue+0x64>)
 800cfc4:	f7fd feb0 	bl	800ad28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cfc8:	4813      	ldr	r0, [pc, #76]	@ (800d018 <prvCheckForValidListAndQueue+0x68>)
 800cfca:	f7fd fead 	bl	800ad28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cfce:	4b13      	ldr	r3, [pc, #76]	@ (800d01c <prvCheckForValidListAndQueue+0x6c>)
 800cfd0:	4a10      	ldr	r2, [pc, #64]	@ (800d014 <prvCheckForValidListAndQueue+0x64>)
 800cfd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cfd4:	4b12      	ldr	r3, [pc, #72]	@ (800d020 <prvCheckForValidListAndQueue+0x70>)
 800cfd6:	4a10      	ldr	r2, [pc, #64]	@ (800d018 <prvCheckForValidListAndQueue+0x68>)
 800cfd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cfda:	2300      	movs	r3, #0
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	4b11      	ldr	r3, [pc, #68]	@ (800d024 <prvCheckForValidListAndQueue+0x74>)
 800cfe0:	4a11      	ldr	r2, [pc, #68]	@ (800d028 <prvCheckForValidListAndQueue+0x78>)
 800cfe2:	2110      	movs	r1, #16
 800cfe4:	200a      	movs	r0, #10
 800cfe6:	f7fd ffbd 	bl	800af64 <xQueueGenericCreateStatic>
 800cfea:	4603      	mov	r3, r0
 800cfec:	4a08      	ldr	r2, [pc, #32]	@ (800d010 <prvCheckForValidListAndQueue+0x60>)
 800cfee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cff0:	4b07      	ldr	r3, [pc, #28]	@ (800d010 <prvCheckForValidListAndQueue+0x60>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d005      	beq.n	800d004 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cff8:	4b05      	ldr	r3, [pc, #20]	@ (800d010 <prvCheckForValidListAndQueue+0x60>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	490b      	ldr	r1, [pc, #44]	@ (800d02c <prvCheckForValidListAndQueue+0x7c>)
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fe fc86 	bl	800b910 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d004:	f000 f97a 	bl	800d2fc <vPortExitCritical>
}
 800d008:	bf00      	nop
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	240012d0 	.word	0x240012d0
 800d014:	240012a0 	.word	0x240012a0
 800d018:	240012b4 	.word	0x240012b4
 800d01c:	240012c8 	.word	0x240012c8
 800d020:	240012cc 	.word	0x240012cc
 800d024:	2400137c 	.word	0x2400137c
 800d028:	240012dc 	.word	0x240012dc
 800d02c:	0800dae8 	.word	0x0800dae8

0800d030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	3b04      	subs	r3, #4
 800d040:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	3b04      	subs	r3, #4
 800d04e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	f023 0201 	bic.w	r2, r3, #1
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	3b04      	subs	r3, #4
 800d05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d060:	4a0c      	ldr	r2, [pc, #48]	@ (800d094 <pxPortInitialiseStack+0x64>)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	3b14      	subs	r3, #20
 800d06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	3b04      	subs	r3, #4
 800d076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f06f 0202 	mvn.w	r2, #2
 800d07e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3b20      	subs	r3, #32
 800d084:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d086:	68fb      	ldr	r3, [r7, #12]
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	0800d099 	.word	0x0800d099

0800d098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d098:	b480      	push	{r7}
 800d09a:	b085      	sub	sp, #20
 800d09c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0a2:	4b13      	ldr	r3, [pc, #76]	@ (800d0f0 <prvTaskExitError+0x58>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0aa:	d00b      	beq.n	800d0c4 <prvTaskExitError+0x2c>
	__asm volatile
 800d0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b0:	f383 8811 	msr	BASEPRI, r3
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	60fb      	str	r3, [r7, #12]
}
 800d0be:	bf00      	nop
 800d0c0:	bf00      	nop
 800d0c2:	e7fd      	b.n	800d0c0 <prvTaskExitError+0x28>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	60bb      	str	r3, [r7, #8]
}
 800d0d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0d8:	bf00      	nop
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d0fc      	beq.n	800d0da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0e0:	bf00      	nop
 800d0e2:	bf00      	nop
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	24000010 	.word	0x24000010
	...

0800d100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d100:	4b07      	ldr	r3, [pc, #28]	@ (800d120 <pxCurrentTCBConst2>)
 800d102:	6819      	ldr	r1, [r3, #0]
 800d104:	6808      	ldr	r0, [r1, #0]
 800d106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10a:	f380 8809 	msr	PSP, r0
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	f04f 0000 	mov.w	r0, #0
 800d116:	f380 8811 	msr	BASEPRI, r0
 800d11a:	4770      	bx	lr
 800d11c:	f3af 8000 	nop.w

0800d120 <pxCurrentTCBConst2>:
 800d120:	24000da0 	.word	0x24000da0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d124:	bf00      	nop
 800d126:	bf00      	nop

0800d128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d128:	4808      	ldr	r0, [pc, #32]	@ (800d14c <prvPortStartFirstTask+0x24>)
 800d12a:	6800      	ldr	r0, [r0, #0]
 800d12c:	6800      	ldr	r0, [r0, #0]
 800d12e:	f380 8808 	msr	MSP, r0
 800d132:	f04f 0000 	mov.w	r0, #0
 800d136:	f380 8814 	msr	CONTROL, r0
 800d13a:	b662      	cpsie	i
 800d13c:	b661      	cpsie	f
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	df00      	svc	0
 800d148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d14a:	bf00      	nop
 800d14c:	e000ed08 	.word	0xe000ed08

0800d150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d156:	4b47      	ldr	r3, [pc, #284]	@ (800d274 <xPortStartScheduler+0x124>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a47      	ldr	r2, [pc, #284]	@ (800d278 <xPortStartScheduler+0x128>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d10b      	bne.n	800d178 <xPortStartScheduler+0x28>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	613b      	str	r3, [r7, #16]
}
 800d172:	bf00      	nop
 800d174:	bf00      	nop
 800d176:	e7fd      	b.n	800d174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d178:	4b3e      	ldr	r3, [pc, #248]	@ (800d274 <xPortStartScheduler+0x124>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a3f      	ldr	r2, [pc, #252]	@ (800d27c <xPortStartScheduler+0x12c>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d10b      	bne.n	800d19a <xPortStartScheduler+0x4a>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	60fb      	str	r3, [r7, #12]
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	e7fd      	b.n	800d196 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d19a:	4b39      	ldr	r3, [pc, #228]	@ (800d280 <xPortStartScheduler+0x130>)
 800d19c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	22ff      	movs	r2, #255	@ 0xff
 800d1aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1b4:	78fb      	ldrb	r3, [r7, #3]
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	4b31      	ldr	r3, [pc, #196]	@ (800d284 <xPortStartScheduler+0x134>)
 800d1c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1c2:	4b31      	ldr	r3, [pc, #196]	@ (800d288 <xPortStartScheduler+0x138>)
 800d1c4:	2207      	movs	r2, #7
 800d1c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1c8:	e009      	b.n	800d1de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d1ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d288 <xPortStartScheduler+0x138>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	4a2d      	ldr	r2, [pc, #180]	@ (800d288 <xPortStartScheduler+0x138>)
 800d1d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1d4:	78fb      	ldrb	r3, [r7, #3]
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1de:	78fb      	ldrb	r3, [r7, #3]
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1e6:	2b80      	cmp	r3, #128	@ 0x80
 800d1e8:	d0ef      	beq.n	800d1ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1ea:	4b27      	ldr	r3, [pc, #156]	@ (800d288 <xPortStartScheduler+0x138>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f1c3 0307 	rsb	r3, r3, #7
 800d1f2:	2b04      	cmp	r3, #4
 800d1f4:	d00b      	beq.n	800d20e <xPortStartScheduler+0xbe>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	60bb      	str	r3, [r7, #8]
}
 800d208:	bf00      	nop
 800d20a:	bf00      	nop
 800d20c:	e7fd      	b.n	800d20a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d20e:	4b1e      	ldr	r3, [pc, #120]	@ (800d288 <xPortStartScheduler+0x138>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	021b      	lsls	r3, r3, #8
 800d214:	4a1c      	ldr	r2, [pc, #112]	@ (800d288 <xPortStartScheduler+0x138>)
 800d216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d218:	4b1b      	ldr	r3, [pc, #108]	@ (800d288 <xPortStartScheduler+0x138>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d220:	4a19      	ldr	r2, [pc, #100]	@ (800d288 <xPortStartScheduler+0x138>)
 800d222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	b2da      	uxtb	r2, r3
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d22c:	4b17      	ldr	r3, [pc, #92]	@ (800d28c <xPortStartScheduler+0x13c>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a16      	ldr	r2, [pc, #88]	@ (800d28c <xPortStartScheduler+0x13c>)
 800d232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d238:	4b14      	ldr	r3, [pc, #80]	@ (800d28c <xPortStartScheduler+0x13c>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a13      	ldr	r2, [pc, #76]	@ (800d28c <xPortStartScheduler+0x13c>)
 800d23e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d244:	f000 f8da 	bl	800d3fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d248:	4b11      	ldr	r3, [pc, #68]	@ (800d290 <xPortStartScheduler+0x140>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d24e:	f000 f8f9 	bl	800d444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d252:	4b10      	ldr	r3, [pc, #64]	@ (800d294 <xPortStartScheduler+0x144>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a0f      	ldr	r2, [pc, #60]	@ (800d294 <xPortStartScheduler+0x144>)
 800d258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d25c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d25e:	f7ff ff63 	bl	800d128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d262:	f7ff f82b 	bl	800c2bc <vTaskSwitchContext>
	prvTaskExitError();
 800d266:	f7ff ff17 	bl	800d098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3718      	adds	r7, #24
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	e000ed00 	.word	0xe000ed00
 800d278:	410fc271 	.word	0x410fc271
 800d27c:	410fc270 	.word	0x410fc270
 800d280:	e000e400 	.word	0xe000e400
 800d284:	240013d0 	.word	0x240013d0
 800d288:	240013d4 	.word	0x240013d4
 800d28c:	e000ed20 	.word	0xe000ed20
 800d290:	24000010 	.word	0x24000010
 800d294:	e000ef34 	.word	0xe000ef34

0800d298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	607b      	str	r3, [r7, #4]
}
 800d2b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2b2:	4b10      	ldr	r3, [pc, #64]	@ (800d2f4 <vPortEnterCritical+0x5c>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	4a0e      	ldr	r2, [pc, #56]	@ (800d2f4 <vPortEnterCritical+0x5c>)
 800d2ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d2f4 <vPortEnterCritical+0x5c>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d110      	bne.n	800d2e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f8 <vPortEnterCritical+0x60>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00b      	beq.n	800d2e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	603b      	str	r3, [r7, #0]
}
 800d2e0:	bf00      	nop
 800d2e2:	bf00      	nop
 800d2e4:	e7fd      	b.n	800d2e2 <vPortEnterCritical+0x4a>
	}
}
 800d2e6:	bf00      	nop
 800d2e8:	370c      	adds	r7, #12
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	24000010 	.word	0x24000010
 800d2f8:	e000ed04 	.word	0xe000ed04

0800d2fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d302:	4b12      	ldr	r3, [pc, #72]	@ (800d34c <vPortExitCritical+0x50>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10b      	bne.n	800d322 <vPortExitCritical+0x26>
	__asm volatile
 800d30a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	607b      	str	r3, [r7, #4]
}
 800d31c:	bf00      	nop
 800d31e:	bf00      	nop
 800d320:	e7fd      	b.n	800d31e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d322:	4b0a      	ldr	r3, [pc, #40]	@ (800d34c <vPortExitCritical+0x50>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	3b01      	subs	r3, #1
 800d328:	4a08      	ldr	r2, [pc, #32]	@ (800d34c <vPortExitCritical+0x50>)
 800d32a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d32c:	4b07      	ldr	r3, [pc, #28]	@ (800d34c <vPortExitCritical+0x50>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d105      	bne.n	800d340 <vPortExitCritical+0x44>
 800d334:	2300      	movs	r3, #0
 800d336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	f383 8811 	msr	BASEPRI, r3
}
 800d33e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d340:	bf00      	nop
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	24000010 	.word	0x24000010

0800d350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d350:	f3ef 8009 	mrs	r0, PSP
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	4b15      	ldr	r3, [pc, #84]	@ (800d3b0 <pxCurrentTCBConst>)
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	f01e 0f10 	tst.w	lr, #16
 800d360:	bf08      	it	eq
 800d362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36a:	6010      	str	r0, [r2, #0]
 800d36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d374:	f380 8811 	msr	BASEPRI, r0
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	f3bf 8f6f 	isb	sy
 800d380:	f7fe ff9c 	bl	800c2bc <vTaskSwitchContext>
 800d384:	f04f 0000 	mov.w	r0, #0
 800d388:	f380 8811 	msr	BASEPRI, r0
 800d38c:	bc09      	pop	{r0, r3}
 800d38e:	6819      	ldr	r1, [r3, #0]
 800d390:	6808      	ldr	r0, [r1, #0]
 800d392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d396:	f01e 0f10 	tst.w	lr, #16
 800d39a:	bf08      	it	eq
 800d39c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3a0:	f380 8809 	msr	PSP, r0
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	f3af 8000 	nop.w

0800d3b0 <pxCurrentTCBConst>:
 800d3b0:	24000da0 	.word	0x24000da0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3b4:	bf00      	nop
 800d3b6:	bf00      	nop

0800d3b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	607b      	str	r3, [r7, #4]
}
 800d3d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3d2:	f7fe feb9 	bl	800c148 <xTaskIncrementTick>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d003      	beq.n	800d3e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3dc:	4b06      	ldr	r3, [pc, #24]	@ (800d3f8 <xPortSysTickHandler+0x40>)
 800d3de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	f383 8811 	msr	BASEPRI, r3
}
 800d3ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3f0:	bf00      	nop
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	e000ed04 	.word	0xe000ed04

0800d3fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d400:	4b0b      	ldr	r3, [pc, #44]	@ (800d430 <vPortSetupTimerInterrupt+0x34>)
 800d402:	2200      	movs	r2, #0
 800d404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d406:	4b0b      	ldr	r3, [pc, #44]	@ (800d434 <vPortSetupTimerInterrupt+0x38>)
 800d408:	2200      	movs	r2, #0
 800d40a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d40c:	4b0a      	ldr	r3, [pc, #40]	@ (800d438 <vPortSetupTimerInterrupt+0x3c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a0a      	ldr	r2, [pc, #40]	@ (800d43c <vPortSetupTimerInterrupt+0x40>)
 800d412:	fba2 2303 	umull	r2, r3, r2, r3
 800d416:	099b      	lsrs	r3, r3, #6
 800d418:	4a09      	ldr	r2, [pc, #36]	@ (800d440 <vPortSetupTimerInterrupt+0x44>)
 800d41a:	3b01      	subs	r3, #1
 800d41c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d41e:	4b04      	ldr	r3, [pc, #16]	@ (800d430 <vPortSetupTimerInterrupt+0x34>)
 800d420:	2207      	movs	r2, #7
 800d422:	601a      	str	r2, [r3, #0]
}
 800d424:	bf00      	nop
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	e000e010 	.word	0xe000e010
 800d434:	e000e018 	.word	0xe000e018
 800d438:	24000000 	.word	0x24000000
 800d43c:	10624dd3 	.word	0x10624dd3
 800d440:	e000e014 	.word	0xe000e014

0800d444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d444:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d454 <vPortEnableVFP+0x10>
 800d448:	6801      	ldr	r1, [r0, #0]
 800d44a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d44e:	6001      	str	r1, [r0, #0]
 800d450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d452:	bf00      	nop
 800d454:	e000ed88 	.word	0xe000ed88

0800d458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d45e:	f3ef 8305 	mrs	r3, IPSR
 800d462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b0f      	cmp	r3, #15
 800d468:	d915      	bls.n	800d496 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d46a:	4a18      	ldr	r2, [pc, #96]	@ (800d4cc <vPortValidateInterruptPriority+0x74>)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	4413      	add	r3, r2
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d474:	4b16      	ldr	r3, [pc, #88]	@ (800d4d0 <vPortValidateInterruptPriority+0x78>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	7afa      	ldrb	r2, [r7, #11]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d20b      	bcs.n	800d496 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	607b      	str	r3, [r7, #4]
}
 800d490:	bf00      	nop
 800d492:	bf00      	nop
 800d494:	e7fd      	b.n	800d492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d496:	4b0f      	ldr	r3, [pc, #60]	@ (800d4d4 <vPortValidateInterruptPriority+0x7c>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d49e:	4b0e      	ldr	r3, [pc, #56]	@ (800d4d8 <vPortValidateInterruptPriority+0x80>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d90b      	bls.n	800d4be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	603b      	str	r3, [r7, #0]
}
 800d4b8:	bf00      	nop
 800d4ba:	bf00      	nop
 800d4bc:	e7fd      	b.n	800d4ba <vPortValidateInterruptPriority+0x62>
	}
 800d4be:	bf00      	nop
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	e000e3f0 	.word	0xe000e3f0
 800d4d0:	240013d0 	.word	0x240013d0
 800d4d4:	e000ed0c 	.word	0xe000ed0c
 800d4d8:	240013d4 	.word	0x240013d4

0800d4dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b08a      	sub	sp, #40	@ 0x28
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4e8:	f7fe fd72 	bl	800bfd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4ec:	4b5c      	ldr	r3, [pc, #368]	@ (800d660 <pvPortMalloc+0x184>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d101      	bne.n	800d4f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4f4:	f000 f924 	bl	800d740 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4f8:	4b5a      	ldr	r3, [pc, #360]	@ (800d664 <pvPortMalloc+0x188>)
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4013      	ands	r3, r2
 800d500:	2b00      	cmp	r3, #0
 800d502:	f040 8095 	bne.w	800d630 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d01e      	beq.n	800d54a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d50c:	2208      	movs	r2, #8
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4413      	add	r3, r2
 800d512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f003 0307 	and.w	r3, r3, #7
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d015      	beq.n	800d54a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f023 0307 	bic.w	r3, r3, #7
 800d524:	3308      	adds	r3, #8
 800d526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f003 0307 	and.w	r3, r3, #7
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00b      	beq.n	800d54a <pvPortMalloc+0x6e>
	__asm volatile
 800d532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d536:	f383 8811 	msr	BASEPRI, r3
 800d53a:	f3bf 8f6f 	isb	sy
 800d53e:	f3bf 8f4f 	dsb	sy
 800d542:	617b      	str	r3, [r7, #20]
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop
 800d548:	e7fd      	b.n	800d546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d06f      	beq.n	800d630 <pvPortMalloc+0x154>
 800d550:	4b45      	ldr	r3, [pc, #276]	@ (800d668 <pvPortMalloc+0x18c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	429a      	cmp	r2, r3
 800d558:	d86a      	bhi.n	800d630 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d55a:	4b44      	ldr	r3, [pc, #272]	@ (800d66c <pvPortMalloc+0x190>)
 800d55c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d55e:	4b43      	ldr	r3, [pc, #268]	@ (800d66c <pvPortMalloc+0x190>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d564:	e004      	b.n	800d570 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	429a      	cmp	r2, r3
 800d578:	d903      	bls.n	800d582 <pvPortMalloc+0xa6>
 800d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1f1      	bne.n	800d566 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d582:	4b37      	ldr	r3, [pc, #220]	@ (800d660 <pvPortMalloc+0x184>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d588:	429a      	cmp	r2, r3
 800d58a:	d051      	beq.n	800d630 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2208      	movs	r2, #8
 800d592:	4413      	add	r3, r2
 800d594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a0:	685a      	ldr	r2, [r3, #4]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	1ad2      	subs	r2, r2, r3
 800d5a6:	2308      	movs	r3, #8
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d920      	bls.n	800d5f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	f003 0307 	and.w	r3, r3, #7
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d00b      	beq.n	800d5d8 <pvPortMalloc+0xfc>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	613b      	str	r3, [r7, #16]
}
 800d5d2:	bf00      	nop
 800d5d4:	bf00      	nop
 800d5d6:	e7fd      	b.n	800d5d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5da:	685a      	ldr	r2, [r3, #4]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	1ad2      	subs	r2, r2, r3
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5ea:	69b8      	ldr	r0, [r7, #24]
 800d5ec:	f000 f90a 	bl	800d804 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d668 <pvPortMalloc+0x18c>)
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	4a1b      	ldr	r2, [pc, #108]	@ (800d668 <pvPortMalloc+0x18c>)
 800d5fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5fe:	4b1a      	ldr	r3, [pc, #104]	@ (800d668 <pvPortMalloc+0x18c>)
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	4b1b      	ldr	r3, [pc, #108]	@ (800d670 <pvPortMalloc+0x194>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	429a      	cmp	r2, r3
 800d608:	d203      	bcs.n	800d612 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d60a:	4b17      	ldr	r3, [pc, #92]	@ (800d668 <pvPortMalloc+0x18c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a18      	ldr	r2, [pc, #96]	@ (800d670 <pvPortMalloc+0x194>)
 800d610:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	4b13      	ldr	r3, [pc, #76]	@ (800d664 <pvPortMalloc+0x188>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	431a      	orrs	r2, r3
 800d61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d626:	4b13      	ldr	r3, [pc, #76]	@ (800d674 <pvPortMalloc+0x198>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3301      	adds	r3, #1
 800d62c:	4a11      	ldr	r2, [pc, #68]	@ (800d674 <pvPortMalloc+0x198>)
 800d62e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d630:	f7fe fcdc 	bl	800bfec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	f003 0307 	and.w	r3, r3, #7
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00b      	beq.n	800d656 <pvPortMalloc+0x17a>
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	60fb      	str	r3, [r7, #12]
}
 800d650:	bf00      	nop
 800d652:	bf00      	nop
 800d654:	e7fd      	b.n	800d652 <pvPortMalloc+0x176>
	return pvReturn;
 800d656:	69fb      	ldr	r3, [r7, #28]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3728      	adds	r7, #40	@ 0x28
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	240213e0 	.word	0x240213e0
 800d664:	240213f4 	.word	0x240213f4
 800d668:	240213e4 	.word	0x240213e4
 800d66c:	240213d8 	.word	0x240213d8
 800d670:	240213e8 	.word	0x240213e8
 800d674:	240213ec 	.word	0x240213ec

0800d678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b086      	sub	sp, #24
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d04f      	beq.n	800d72a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d68a:	2308      	movs	r3, #8
 800d68c:	425b      	negs	r3, r3
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	4413      	add	r3, r2
 800d692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	4b25      	ldr	r3, [pc, #148]	@ (800d734 <vPortFree+0xbc>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10b      	bne.n	800d6be <vPortFree+0x46>
	__asm volatile
 800d6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6aa:	f383 8811 	msr	BASEPRI, r3
 800d6ae:	f3bf 8f6f 	isb	sy
 800d6b2:	f3bf 8f4f 	dsb	sy
 800d6b6:	60fb      	str	r3, [r7, #12]
}
 800d6b8:	bf00      	nop
 800d6ba:	bf00      	nop
 800d6bc:	e7fd      	b.n	800d6ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00b      	beq.n	800d6de <vPortFree+0x66>
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	60bb      	str	r3, [r7, #8]
}
 800d6d8:	bf00      	nop
 800d6da:	bf00      	nop
 800d6dc:	e7fd      	b.n	800d6da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	4b14      	ldr	r3, [pc, #80]	@ (800d734 <vPortFree+0xbc>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d01e      	beq.n	800d72a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d11a      	bne.n	800d72a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	685a      	ldr	r2, [r3, #4]
 800d6f8:	4b0e      	ldr	r3, [pc, #56]	@ (800d734 <vPortFree+0xbc>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	43db      	mvns	r3, r3
 800d6fe:	401a      	ands	r2, r3
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d704:	f7fe fc64 	bl	800bfd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	4b0a      	ldr	r3, [pc, #40]	@ (800d738 <vPortFree+0xc0>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4413      	add	r3, r2
 800d712:	4a09      	ldr	r2, [pc, #36]	@ (800d738 <vPortFree+0xc0>)
 800d714:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d716:	6938      	ldr	r0, [r7, #16]
 800d718:	f000 f874 	bl	800d804 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d71c:	4b07      	ldr	r3, [pc, #28]	@ (800d73c <vPortFree+0xc4>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	3301      	adds	r3, #1
 800d722:	4a06      	ldr	r2, [pc, #24]	@ (800d73c <vPortFree+0xc4>)
 800d724:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d726:	f7fe fc61 	bl	800bfec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d72a:	bf00      	nop
 800d72c:	3718      	adds	r7, #24
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	240213f4 	.word	0x240213f4
 800d738:	240213e4 	.word	0x240213e4
 800d73c:	240213f0 	.word	0x240213f0

0800d740 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d746:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d74a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d74c:	4b27      	ldr	r3, [pc, #156]	@ (800d7ec <prvHeapInit+0xac>)
 800d74e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00c      	beq.n	800d774 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3307      	adds	r3, #7
 800d75e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f023 0307 	bic.w	r3, r3, #7
 800d766:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d768:	68ba      	ldr	r2, [r7, #8]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	4a1f      	ldr	r2, [pc, #124]	@ (800d7ec <prvHeapInit+0xac>)
 800d770:	4413      	add	r3, r2
 800d772:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d778:	4a1d      	ldr	r2, [pc, #116]	@ (800d7f0 <prvHeapInit+0xb0>)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d77e:	4b1c      	ldr	r3, [pc, #112]	@ (800d7f0 <prvHeapInit+0xb0>)
 800d780:	2200      	movs	r2, #0
 800d782:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	68ba      	ldr	r2, [r7, #8]
 800d788:	4413      	add	r3, r2
 800d78a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d78c:	2208      	movs	r2, #8
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	1a9b      	subs	r3, r3, r2
 800d792:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f023 0307 	bic.w	r3, r3, #7
 800d79a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	4a15      	ldr	r2, [pc, #84]	@ (800d7f4 <prvHeapInit+0xb4>)
 800d7a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7a2:	4b14      	ldr	r3, [pc, #80]	@ (800d7f4 <prvHeapInit+0xb4>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7aa:	4b12      	ldr	r3, [pc, #72]	@ (800d7f4 <prvHeapInit+0xb4>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	1ad2      	subs	r2, r2, r3
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d7f4 <prvHeapInit+0xb4>)
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	4a0a      	ldr	r2, [pc, #40]	@ (800d7f8 <prvHeapInit+0xb8>)
 800d7ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	4a09      	ldr	r2, [pc, #36]	@ (800d7fc <prvHeapInit+0xbc>)
 800d7d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7d8:	4b09      	ldr	r3, [pc, #36]	@ (800d800 <prvHeapInit+0xc0>)
 800d7da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d7de:	601a      	str	r2, [r3, #0]
}
 800d7e0:	bf00      	nop
 800d7e2:	3714      	adds	r7, #20
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	240013d8 	.word	0x240013d8
 800d7f0:	240213d8 	.word	0x240213d8
 800d7f4:	240213e0 	.word	0x240213e0
 800d7f8:	240213e8 	.word	0x240213e8
 800d7fc:	240213e4 	.word	0x240213e4
 800d800:	240213f4 	.word	0x240213f4

0800d804 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d80c:	4b28      	ldr	r3, [pc, #160]	@ (800d8b0 <prvInsertBlockIntoFreeList+0xac>)
 800d80e:	60fb      	str	r3, [r7, #12]
 800d810:	e002      	b.n	800d818 <prvInsertBlockIntoFreeList+0x14>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d8f7      	bhi.n	800d812 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	4413      	add	r3, r2
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	429a      	cmp	r2, r3
 800d832:	d108      	bne.n	800d846 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	685a      	ldr	r2, [r3, #4]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	441a      	add	r2, r3
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	68ba      	ldr	r2, [r7, #8]
 800d850:	441a      	add	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	429a      	cmp	r2, r3
 800d858:	d118      	bne.n	800d88c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	4b15      	ldr	r3, [pc, #84]	@ (800d8b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	429a      	cmp	r2, r3
 800d864:	d00d      	beq.n	800d882 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	441a      	add	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	601a      	str	r2, [r3, #0]
 800d880:	e008      	b.n	800d894 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d882:	4b0c      	ldr	r3, [pc, #48]	@ (800d8b4 <prvInsertBlockIntoFreeList+0xb0>)
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	e003      	b.n	800d894 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d002      	beq.n	800d8a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8a2:	bf00      	nop
 800d8a4:	3714      	adds	r7, #20
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	240213d8 	.word	0x240213d8
 800d8b4:	240213e0 	.word	0x240213e0

0800d8b8 <memset>:
 800d8b8:	4402      	add	r2, r0
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d100      	bne.n	800d8c2 <memset+0xa>
 800d8c0:	4770      	bx	lr
 800d8c2:	f803 1b01 	strb.w	r1, [r3], #1
 800d8c6:	e7f9      	b.n	800d8bc <memset+0x4>

0800d8c8 <_reclaim_reent>:
 800d8c8:	4b29      	ldr	r3, [pc, #164]	@ (800d970 <_reclaim_reent+0xa8>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4283      	cmp	r3, r0
 800d8ce:	b570      	push	{r4, r5, r6, lr}
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	d04b      	beq.n	800d96c <_reclaim_reent+0xa4>
 800d8d4:	69c3      	ldr	r3, [r0, #28]
 800d8d6:	b1ab      	cbz	r3, 800d904 <_reclaim_reent+0x3c>
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	b16b      	cbz	r3, 800d8f8 <_reclaim_reent+0x30>
 800d8dc:	2500      	movs	r5, #0
 800d8de:	69e3      	ldr	r3, [r4, #28]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	5959      	ldr	r1, [r3, r5]
 800d8e4:	2900      	cmp	r1, #0
 800d8e6:	d13b      	bne.n	800d960 <_reclaim_reent+0x98>
 800d8e8:	3504      	adds	r5, #4
 800d8ea:	2d80      	cmp	r5, #128	@ 0x80
 800d8ec:	d1f7      	bne.n	800d8de <_reclaim_reent+0x16>
 800d8ee:	69e3      	ldr	r3, [r4, #28]
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	68d9      	ldr	r1, [r3, #12]
 800d8f4:	f000 f872 	bl	800d9dc <_free_r>
 800d8f8:	69e3      	ldr	r3, [r4, #28]
 800d8fa:	6819      	ldr	r1, [r3, #0]
 800d8fc:	b111      	cbz	r1, 800d904 <_reclaim_reent+0x3c>
 800d8fe:	4620      	mov	r0, r4
 800d900:	f000 f86c 	bl	800d9dc <_free_r>
 800d904:	6961      	ldr	r1, [r4, #20]
 800d906:	b111      	cbz	r1, 800d90e <_reclaim_reent+0x46>
 800d908:	4620      	mov	r0, r4
 800d90a:	f000 f867 	bl	800d9dc <_free_r>
 800d90e:	69e1      	ldr	r1, [r4, #28]
 800d910:	b111      	cbz	r1, 800d918 <_reclaim_reent+0x50>
 800d912:	4620      	mov	r0, r4
 800d914:	f000 f862 	bl	800d9dc <_free_r>
 800d918:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d91a:	b111      	cbz	r1, 800d922 <_reclaim_reent+0x5a>
 800d91c:	4620      	mov	r0, r4
 800d91e:	f000 f85d 	bl	800d9dc <_free_r>
 800d922:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d924:	b111      	cbz	r1, 800d92c <_reclaim_reent+0x64>
 800d926:	4620      	mov	r0, r4
 800d928:	f000 f858 	bl	800d9dc <_free_r>
 800d92c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d92e:	b111      	cbz	r1, 800d936 <_reclaim_reent+0x6e>
 800d930:	4620      	mov	r0, r4
 800d932:	f000 f853 	bl	800d9dc <_free_r>
 800d936:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d938:	b111      	cbz	r1, 800d940 <_reclaim_reent+0x78>
 800d93a:	4620      	mov	r0, r4
 800d93c:	f000 f84e 	bl	800d9dc <_free_r>
 800d940:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d942:	b111      	cbz	r1, 800d94a <_reclaim_reent+0x82>
 800d944:	4620      	mov	r0, r4
 800d946:	f000 f849 	bl	800d9dc <_free_r>
 800d94a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d94c:	b111      	cbz	r1, 800d954 <_reclaim_reent+0x8c>
 800d94e:	4620      	mov	r0, r4
 800d950:	f000 f844 	bl	800d9dc <_free_r>
 800d954:	6a23      	ldr	r3, [r4, #32]
 800d956:	b14b      	cbz	r3, 800d96c <_reclaim_reent+0xa4>
 800d958:	4620      	mov	r0, r4
 800d95a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d95e:	4718      	bx	r3
 800d960:	680e      	ldr	r6, [r1, #0]
 800d962:	4620      	mov	r0, r4
 800d964:	f000 f83a 	bl	800d9dc <_free_r>
 800d968:	4631      	mov	r1, r6
 800d96a:	e7bb      	b.n	800d8e4 <_reclaim_reent+0x1c>
 800d96c:	bd70      	pop	{r4, r5, r6, pc}
 800d96e:	bf00      	nop
 800d970:	24000014 	.word	0x24000014

0800d974 <__libc_init_array>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	4d0d      	ldr	r5, [pc, #52]	@ (800d9ac <__libc_init_array+0x38>)
 800d978:	4c0d      	ldr	r4, [pc, #52]	@ (800d9b0 <__libc_init_array+0x3c>)
 800d97a:	1b64      	subs	r4, r4, r5
 800d97c:	10a4      	asrs	r4, r4, #2
 800d97e:	2600      	movs	r6, #0
 800d980:	42a6      	cmp	r6, r4
 800d982:	d109      	bne.n	800d998 <__libc_init_array+0x24>
 800d984:	4d0b      	ldr	r5, [pc, #44]	@ (800d9b4 <__libc_init_array+0x40>)
 800d986:	4c0c      	ldr	r4, [pc, #48]	@ (800d9b8 <__libc_init_array+0x44>)
 800d988:	f000 f87e 	bl	800da88 <_init>
 800d98c:	1b64      	subs	r4, r4, r5
 800d98e:	10a4      	asrs	r4, r4, #2
 800d990:	2600      	movs	r6, #0
 800d992:	42a6      	cmp	r6, r4
 800d994:	d105      	bne.n	800d9a2 <__libc_init_array+0x2e>
 800d996:	bd70      	pop	{r4, r5, r6, pc}
 800d998:	f855 3b04 	ldr.w	r3, [r5], #4
 800d99c:	4798      	blx	r3
 800d99e:	3601      	adds	r6, #1
 800d9a0:	e7ee      	b.n	800d980 <__libc_init_array+0xc>
 800d9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9a6:	4798      	blx	r3
 800d9a8:	3601      	adds	r6, #1
 800d9aa:	e7f2      	b.n	800d992 <__libc_init_array+0x1e>
 800d9ac:	0800db5c 	.word	0x0800db5c
 800d9b0:	0800db5c 	.word	0x0800db5c
 800d9b4:	0800db5c 	.word	0x0800db5c
 800d9b8:	0800db60 	.word	0x0800db60

0800d9bc <__retarget_lock_acquire_recursive>:
 800d9bc:	4770      	bx	lr

0800d9be <__retarget_lock_release_recursive>:
 800d9be:	4770      	bx	lr

0800d9c0 <memcpy>:
 800d9c0:	440a      	add	r2, r1
 800d9c2:	4291      	cmp	r1, r2
 800d9c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9c8:	d100      	bne.n	800d9cc <memcpy+0xc>
 800d9ca:	4770      	bx	lr
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9d6:	4291      	cmp	r1, r2
 800d9d8:	d1f9      	bne.n	800d9ce <memcpy+0xe>
 800d9da:	bd10      	pop	{r4, pc}

0800d9dc <_free_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4605      	mov	r5, r0
 800d9e0:	2900      	cmp	r1, #0
 800d9e2:	d041      	beq.n	800da68 <_free_r+0x8c>
 800d9e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9e8:	1f0c      	subs	r4, r1, #4
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	bfb8      	it	lt
 800d9ee:	18e4      	addlt	r4, r4, r3
 800d9f0:	f000 f83e 	bl	800da70 <__malloc_lock>
 800d9f4:	4a1d      	ldr	r2, [pc, #116]	@ (800da6c <_free_r+0x90>)
 800d9f6:	6813      	ldr	r3, [r2, #0]
 800d9f8:	b933      	cbnz	r3, 800da08 <_free_r+0x2c>
 800d9fa:	6063      	str	r3, [r4, #4]
 800d9fc:	6014      	str	r4, [r2, #0]
 800d9fe:	4628      	mov	r0, r5
 800da00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da04:	f000 b83a 	b.w	800da7c <__malloc_unlock>
 800da08:	42a3      	cmp	r3, r4
 800da0a:	d908      	bls.n	800da1e <_free_r+0x42>
 800da0c:	6820      	ldr	r0, [r4, #0]
 800da0e:	1821      	adds	r1, r4, r0
 800da10:	428b      	cmp	r3, r1
 800da12:	bf01      	itttt	eq
 800da14:	6819      	ldreq	r1, [r3, #0]
 800da16:	685b      	ldreq	r3, [r3, #4]
 800da18:	1809      	addeq	r1, r1, r0
 800da1a:	6021      	streq	r1, [r4, #0]
 800da1c:	e7ed      	b.n	800d9fa <_free_r+0x1e>
 800da1e:	461a      	mov	r2, r3
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	b10b      	cbz	r3, 800da28 <_free_r+0x4c>
 800da24:	42a3      	cmp	r3, r4
 800da26:	d9fa      	bls.n	800da1e <_free_r+0x42>
 800da28:	6811      	ldr	r1, [r2, #0]
 800da2a:	1850      	adds	r0, r2, r1
 800da2c:	42a0      	cmp	r0, r4
 800da2e:	d10b      	bne.n	800da48 <_free_r+0x6c>
 800da30:	6820      	ldr	r0, [r4, #0]
 800da32:	4401      	add	r1, r0
 800da34:	1850      	adds	r0, r2, r1
 800da36:	4283      	cmp	r3, r0
 800da38:	6011      	str	r1, [r2, #0]
 800da3a:	d1e0      	bne.n	800d9fe <_free_r+0x22>
 800da3c:	6818      	ldr	r0, [r3, #0]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	6053      	str	r3, [r2, #4]
 800da42:	4408      	add	r0, r1
 800da44:	6010      	str	r0, [r2, #0]
 800da46:	e7da      	b.n	800d9fe <_free_r+0x22>
 800da48:	d902      	bls.n	800da50 <_free_r+0x74>
 800da4a:	230c      	movs	r3, #12
 800da4c:	602b      	str	r3, [r5, #0]
 800da4e:	e7d6      	b.n	800d9fe <_free_r+0x22>
 800da50:	6820      	ldr	r0, [r4, #0]
 800da52:	1821      	adds	r1, r4, r0
 800da54:	428b      	cmp	r3, r1
 800da56:	bf04      	itt	eq
 800da58:	6819      	ldreq	r1, [r3, #0]
 800da5a:	685b      	ldreq	r3, [r3, #4]
 800da5c:	6063      	str	r3, [r4, #4]
 800da5e:	bf04      	itt	eq
 800da60:	1809      	addeq	r1, r1, r0
 800da62:	6021      	streq	r1, [r4, #0]
 800da64:	6054      	str	r4, [r2, #4]
 800da66:	e7ca      	b.n	800d9fe <_free_r+0x22>
 800da68:	bd38      	pop	{r3, r4, r5, pc}
 800da6a:	bf00      	nop
 800da6c:	24021534 	.word	0x24021534

0800da70 <__malloc_lock>:
 800da70:	4801      	ldr	r0, [pc, #4]	@ (800da78 <__malloc_lock+0x8>)
 800da72:	f7ff bfa3 	b.w	800d9bc <__retarget_lock_acquire_recursive>
 800da76:	bf00      	nop
 800da78:	24021530 	.word	0x24021530

0800da7c <__malloc_unlock>:
 800da7c:	4801      	ldr	r0, [pc, #4]	@ (800da84 <__malloc_unlock+0x8>)
 800da7e:	f7ff bf9e 	b.w	800d9be <__retarget_lock_release_recursive>
 800da82:	bf00      	nop
 800da84:	24021530 	.word	0x24021530

0800da88 <_init>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	bf00      	nop
 800da8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8e:	bc08      	pop	{r3}
 800da90:	469e      	mov	lr, r3
 800da92:	4770      	bx	lr

0800da94 <_fini>:
 800da94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da96:	bf00      	nop
 800da98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da9a:	bc08      	pop	{r3}
 800da9c:	469e      	mov	lr, r3
 800da9e:	4770      	bx	lr
